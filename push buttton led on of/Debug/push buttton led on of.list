
push buttton led on of.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006564  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  080066ec  080066ec  000166ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006744  08006744  00020180  2**0
                  CONTENTS
  4 .ARM          00000008  08006744  08006744  00016744  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800674c  0800674c  00020180  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800674c  0800674c  0001674c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006750  08006750  00016750  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000180  20000000  08006754  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020180  2**0
                  CONTENTS
 10 .bss          00001b1c  20000180  20000180  00020180  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20001c9c  20001c9c  00020180  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020180  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012424  00000000  00000000  000201b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002ce9  00000000  00000000  000325d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b00  00000000  00000000  000352c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000009c8  00000000  00000000  00035dc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022ec0  00000000  00000000  00036788  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e7a0  00000000  00000000  00059648  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c43ed  00000000  00000000  00067de8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0012c1d5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002b5c  00000000  00000000  0012c228  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000180 	.word	0x20000180
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080066d4 	.word	0x080066d4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000184 	.word	0x20000184
 80001c4:	080066d4 	.word	0x080066d4

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c4:	f000 fac2 	bl	8000a4c <HAL_Init>

  /* USER CODE BEGIN Init */

  /* REGİSTERS SET */
  RCC->AHB1ENR &=~(0X0);// ahb1 reset
 80004c8:	4b3a      	ldr	r3, [pc, #232]	; (80005b4 <main+0xf4>)
 80004ca:	4a3a      	ldr	r2, [pc, #232]	; (80005b4 <main+0xf4>)
 80004cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004ce:	6313      	str	r3, [r2, #48]	; 0x30
  RCC->AHB1ENR |= 1<<0;	// gpio A enabled FOR PUSH BUTTON
 80004d0:	4b38      	ldr	r3, [pc, #224]	; (80005b4 <main+0xf4>)
 80004d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004d4:	4a37      	ldr	r2, [pc, #220]	; (80005b4 <main+0xf4>)
 80004d6:	f043 0301 	orr.w	r3, r3, #1
 80004da:	6313      	str	r3, [r2, #48]	; 0x30
  RCC->AHB1ENR |= 1<<3;	//GPIO D ENABLED FOR LED
 80004dc:	4b35      	ldr	r3, [pc, #212]	; (80005b4 <main+0xf4>)
 80004de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004e0:	4a34      	ldr	r2, [pc, #208]	; (80005b4 <main+0xf4>)
 80004e2:	f043 0308 	orr.w	r3, r3, #8
 80004e6:	6313      	str	r3, [r2, #48]	; 0x30

  GPIOA->MODER &= (0XA8<<6*4);	//RESET
 80004e8:	4b33      	ldr	r3, [pc, #204]	; (80005b8 <main+0xf8>)
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	4a32      	ldr	r2, [pc, #200]	; (80005b8 <main+0xf8>)
 80004ee:	f003 4328 	and.w	r3, r3, #2818572288	; 0xa8000000
 80004f2:	6013      	str	r3, [r2, #0]
  GPIOD->MODER &= 0X0;		//reset
 80004f4:	4b31      	ldr	r3, [pc, #196]	; (80005bc <main+0xfc>)
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	4b30      	ldr	r3, [pc, #192]	; (80005bc <main+0xfc>)
 80004fa:	2200      	movs	r2, #0
 80004fc:	601a      	str	r2, [r3, #0]

  GPIOA->MODER |= 0X0;  // SET AS İNPUT A0=0
 80004fe:	4b2e      	ldr	r3, [pc, #184]	; (80005b8 <main+0xf8>)
 8000500:	4a2d      	ldr	r2, [pc, #180]	; (80005b8 <main+0xf8>)
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	6013      	str	r3, [r2, #0]
  GPIOD->MODER |= (1<<12*2);
 8000506:	4b2d      	ldr	r3, [pc, #180]	; (80005bc <main+0xfc>)
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	4a2c      	ldr	r2, [pc, #176]	; (80005bc <main+0xfc>)
 800050c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000510:	6013      	str	r3, [r2, #0]
  GPIOD->MODER |= (1<<13*2);
 8000512:	4b2a      	ldr	r3, [pc, #168]	; (80005bc <main+0xfc>)
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	4a29      	ldr	r2, [pc, #164]	; (80005bc <main+0xfc>)
 8000518:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800051c:	6013      	str	r3, [r2, #0]
  GPIOD->MODER |= (1<<14*2);
 800051e:	4b27      	ldr	r3, [pc, #156]	; (80005bc <main+0xfc>)
 8000520:	681b      	ldr	r3, [r3, #0]
 8000522:	4a26      	ldr	r2, [pc, #152]	; (80005bc <main+0xfc>)
 8000524:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000528:	6013      	str	r3, [r2, #0]
  GPIOD->MODER |= (1<<15*2);
 800052a:	4b24      	ldr	r3, [pc, #144]	; (80005bc <main+0xfc>)
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	4a23      	ldr	r2, [pc, #140]	; (80005bc <main+0xfc>)
 8000530:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000534:	6013      	str	r3, [r2, #0]


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000536:	f000 f843 	bl	80005c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800053a:	f000 f8a9 	bl	8000690 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 800053e:	f005 fb8b 	bl	8005c58 <MX_USB_DEVICE_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if((GPIOA->IDR & 0x1)==1)
 8000542:	4b1d      	ldr	r3, [pc, #116]	; (80005b8 <main+0xf8>)
 8000544:	691b      	ldr	r3, [r3, #16]
 8000546:	f003 0301 	and.w	r3, r3, #1
 800054a:	2b01      	cmp	r3, #1
 800054c:	d118      	bne.n	8000580 <main+0xc0>
	  {
		  GPIOD->ODR |= (1<<(12));//D12 HİGH
 800054e:	4b1b      	ldr	r3, [pc, #108]	; (80005bc <main+0xfc>)
 8000550:	695b      	ldr	r3, [r3, #20]
 8000552:	4a1a      	ldr	r2, [pc, #104]	; (80005bc <main+0xfc>)
 8000554:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000558:	6153      	str	r3, [r2, #20]
		  GPIOD->ODR |= (1<<13);// D13 HİGH
 800055a:	4b18      	ldr	r3, [pc, #96]	; (80005bc <main+0xfc>)
 800055c:	695b      	ldr	r3, [r3, #20]
 800055e:	4a17      	ldr	r2, [pc, #92]	; (80005bc <main+0xfc>)
 8000560:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000564:	6153      	str	r3, [r2, #20]
		  GPIOD->ODR |= (1<<14);//D14 HİGH
 8000566:	4b15      	ldr	r3, [pc, #84]	; (80005bc <main+0xfc>)
 8000568:	695b      	ldr	r3, [r3, #20]
 800056a:	4a14      	ldr	r2, [pc, #80]	; (80005bc <main+0xfc>)
 800056c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000570:	6153      	str	r3, [r2, #20]
		  GPIOD->ODR |= (1<<15);//D15 HİGH
 8000572:	4b12      	ldr	r3, [pc, #72]	; (80005bc <main+0xfc>)
 8000574:	695b      	ldr	r3, [r3, #20]
 8000576:	4a11      	ldr	r2, [pc, #68]	; (80005bc <main+0xfc>)
 8000578:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800057c:	6153      	str	r3, [r2, #20]
 800057e:	e7e0      	b.n	8000542 <main+0x82>
	  }
	  else
	  {
		  GPIOD->ODR &= ~(1<<(12));//D12 LOW
 8000580:	4b0e      	ldr	r3, [pc, #56]	; (80005bc <main+0xfc>)
 8000582:	695b      	ldr	r3, [r3, #20]
 8000584:	4a0d      	ldr	r2, [pc, #52]	; (80005bc <main+0xfc>)
 8000586:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800058a:	6153      	str	r3, [r2, #20]
		  GPIOD->ODR &= ~(1<<13);// D13 LOW
 800058c:	4b0b      	ldr	r3, [pc, #44]	; (80005bc <main+0xfc>)
 800058e:	695b      	ldr	r3, [r3, #20]
 8000590:	4a0a      	ldr	r2, [pc, #40]	; (80005bc <main+0xfc>)
 8000592:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000596:	6153      	str	r3, [r2, #20]
		  GPIOD->ODR &= ~(1<<14);//D14 LOW
 8000598:	4b08      	ldr	r3, [pc, #32]	; (80005bc <main+0xfc>)
 800059a:	695b      	ldr	r3, [r3, #20]
 800059c:	4a07      	ldr	r2, [pc, #28]	; (80005bc <main+0xfc>)
 800059e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80005a2:	6153      	str	r3, [r2, #20]
		  GPIOD->ODR &= ~(1<<15);//D15 LOW
 80005a4:	4b05      	ldr	r3, [pc, #20]	; (80005bc <main+0xfc>)
 80005a6:	695b      	ldr	r3, [r3, #20]
 80005a8:	4a04      	ldr	r2, [pc, #16]	; (80005bc <main+0xfc>)
 80005aa:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80005ae:	6153      	str	r3, [r2, #20]
	  if((GPIOA->IDR & 0x1)==1)
 80005b0:	e7c7      	b.n	8000542 <main+0x82>
 80005b2:	bf00      	nop
 80005b4:	40023800 	.word	0x40023800
 80005b8:	40020000 	.word	0x40020000
 80005bc:	40020c00 	.word	0x40020c00

080005c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b094      	sub	sp, #80	; 0x50
 80005c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005c6:	f107 0320 	add.w	r3, r7, #32
 80005ca:	2230      	movs	r2, #48	; 0x30
 80005cc:	2100      	movs	r1, #0
 80005ce:	4618      	mov	r0, r3
 80005d0:	f006 f878 	bl	80066c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005d4:	f107 030c 	add.w	r3, r7, #12
 80005d8:	2200      	movs	r2, #0
 80005da:	601a      	str	r2, [r3, #0]
 80005dc:	605a      	str	r2, [r3, #4]
 80005de:	609a      	str	r2, [r3, #8]
 80005e0:	60da      	str	r2, [r3, #12]
 80005e2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005e4:	2300      	movs	r3, #0
 80005e6:	60bb      	str	r3, [r7, #8]
 80005e8:	4b27      	ldr	r3, [pc, #156]	; (8000688 <SystemClock_Config+0xc8>)
 80005ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005ec:	4a26      	ldr	r2, [pc, #152]	; (8000688 <SystemClock_Config+0xc8>)
 80005ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005f2:	6413      	str	r3, [r2, #64]	; 0x40
 80005f4:	4b24      	ldr	r3, [pc, #144]	; (8000688 <SystemClock_Config+0xc8>)
 80005f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005fc:	60bb      	str	r3, [r7, #8]
 80005fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000600:	2300      	movs	r3, #0
 8000602:	607b      	str	r3, [r7, #4]
 8000604:	4b21      	ldr	r3, [pc, #132]	; (800068c <SystemClock_Config+0xcc>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	4a20      	ldr	r2, [pc, #128]	; (800068c <SystemClock_Config+0xcc>)
 800060a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800060e:	6013      	str	r3, [r2, #0]
 8000610:	4b1e      	ldr	r3, [pc, #120]	; (800068c <SystemClock_Config+0xcc>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000618:	607b      	str	r3, [r7, #4]
 800061a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800061c:	2301      	movs	r3, #1
 800061e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000620:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000624:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000626:	2302      	movs	r3, #2
 8000628:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800062a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800062e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000630:	2304      	movs	r3, #4
 8000632:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000634:	2348      	movs	r3, #72	; 0x48
 8000636:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000638:	2302      	movs	r3, #2
 800063a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 800063c:	2303      	movs	r3, #3
 800063e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000640:	f107 0320 	add.w	r3, r7, #32
 8000644:	4618      	mov	r0, r3
 8000646:	f001 fee1 	bl	800240c <HAL_RCC_OscConfig>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d001      	beq.n	8000654 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000650:	f000 f95e 	bl	8000910 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000654:	230f      	movs	r3, #15
 8000656:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000658:	2302      	movs	r3, #2
 800065a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800065c:	2300      	movs	r3, #0
 800065e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000660:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000664:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000666:	2300      	movs	r3, #0
 8000668:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800066a:	f107 030c 	add.w	r3, r7, #12
 800066e:	2102      	movs	r1, #2
 8000670:	4618      	mov	r0, r3
 8000672:	f002 f943 	bl	80028fc <HAL_RCC_ClockConfig>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d001      	beq.n	8000680 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800067c:	f000 f948 	bl	8000910 <Error_Handler>
  }
}
 8000680:	bf00      	nop
 8000682:	3750      	adds	r7, #80	; 0x50
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}
 8000688:	40023800 	.word	0x40023800
 800068c:	40007000 	.word	0x40007000

08000690 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b08c      	sub	sp, #48	; 0x30
 8000694:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000696:	f107 031c 	add.w	r3, r7, #28
 800069a:	2200      	movs	r2, #0
 800069c:	601a      	str	r2, [r3, #0]
 800069e:	605a      	str	r2, [r3, #4]
 80006a0:	609a      	str	r2, [r3, #8]
 80006a2:	60da      	str	r2, [r3, #12]
 80006a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80006a6:	2300      	movs	r3, #0
 80006a8:	61bb      	str	r3, [r7, #24]
 80006aa:	4b93      	ldr	r3, [pc, #588]	; (80008f8 <MX_GPIO_Init+0x268>)
 80006ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ae:	4a92      	ldr	r2, [pc, #584]	; (80008f8 <MX_GPIO_Init+0x268>)
 80006b0:	f043 0310 	orr.w	r3, r3, #16
 80006b4:	6313      	str	r3, [r2, #48]	; 0x30
 80006b6:	4b90      	ldr	r3, [pc, #576]	; (80008f8 <MX_GPIO_Init+0x268>)
 80006b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ba:	f003 0310 	and.w	r3, r3, #16
 80006be:	61bb      	str	r3, [r7, #24]
 80006c0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006c2:	2300      	movs	r3, #0
 80006c4:	617b      	str	r3, [r7, #20]
 80006c6:	4b8c      	ldr	r3, [pc, #560]	; (80008f8 <MX_GPIO_Init+0x268>)
 80006c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ca:	4a8b      	ldr	r2, [pc, #556]	; (80008f8 <MX_GPIO_Init+0x268>)
 80006cc:	f043 0304 	orr.w	r3, r3, #4
 80006d0:	6313      	str	r3, [r2, #48]	; 0x30
 80006d2:	4b89      	ldr	r3, [pc, #548]	; (80008f8 <MX_GPIO_Init+0x268>)
 80006d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d6:	f003 0304 	and.w	r3, r3, #4
 80006da:	617b      	str	r3, [r7, #20]
 80006dc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006de:	2300      	movs	r3, #0
 80006e0:	613b      	str	r3, [r7, #16]
 80006e2:	4b85      	ldr	r3, [pc, #532]	; (80008f8 <MX_GPIO_Init+0x268>)
 80006e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e6:	4a84      	ldr	r2, [pc, #528]	; (80008f8 <MX_GPIO_Init+0x268>)
 80006e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006ec:	6313      	str	r3, [r2, #48]	; 0x30
 80006ee:	4b82      	ldr	r3, [pc, #520]	; (80008f8 <MX_GPIO_Init+0x268>)
 80006f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006f6:	613b      	str	r3, [r7, #16]
 80006f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006fa:	2300      	movs	r3, #0
 80006fc:	60fb      	str	r3, [r7, #12]
 80006fe:	4b7e      	ldr	r3, [pc, #504]	; (80008f8 <MX_GPIO_Init+0x268>)
 8000700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000702:	4a7d      	ldr	r2, [pc, #500]	; (80008f8 <MX_GPIO_Init+0x268>)
 8000704:	f043 0301 	orr.w	r3, r3, #1
 8000708:	6313      	str	r3, [r2, #48]	; 0x30
 800070a:	4b7b      	ldr	r3, [pc, #492]	; (80008f8 <MX_GPIO_Init+0x268>)
 800070c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070e:	f003 0301 	and.w	r3, r3, #1
 8000712:	60fb      	str	r3, [r7, #12]
 8000714:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000716:	2300      	movs	r3, #0
 8000718:	60bb      	str	r3, [r7, #8]
 800071a:	4b77      	ldr	r3, [pc, #476]	; (80008f8 <MX_GPIO_Init+0x268>)
 800071c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071e:	4a76      	ldr	r2, [pc, #472]	; (80008f8 <MX_GPIO_Init+0x268>)
 8000720:	f043 0302 	orr.w	r3, r3, #2
 8000724:	6313      	str	r3, [r2, #48]	; 0x30
 8000726:	4b74      	ldr	r3, [pc, #464]	; (80008f8 <MX_GPIO_Init+0x268>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072a:	f003 0302 	and.w	r3, r3, #2
 800072e:	60bb      	str	r3, [r7, #8]
 8000730:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000732:	2300      	movs	r3, #0
 8000734:	607b      	str	r3, [r7, #4]
 8000736:	4b70      	ldr	r3, [pc, #448]	; (80008f8 <MX_GPIO_Init+0x268>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073a:	4a6f      	ldr	r2, [pc, #444]	; (80008f8 <MX_GPIO_Init+0x268>)
 800073c:	f043 0308 	orr.w	r3, r3, #8
 8000740:	6313      	str	r3, [r2, #48]	; 0x30
 8000742:	4b6d      	ldr	r3, [pc, #436]	; (80008f8 <MX_GPIO_Init+0x268>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000746:	f003 0308 	and.w	r3, r3, #8
 800074a:	607b      	str	r3, [r7, #4]
 800074c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800074e:	2200      	movs	r2, #0
 8000750:	2108      	movs	r1, #8
 8000752:	486a      	ldr	r0, [pc, #424]	; (80008fc <MX_GPIO_Init+0x26c>)
 8000754:	f000 fcbe 	bl	80010d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000758:	2201      	movs	r2, #1
 800075a:	2101      	movs	r1, #1
 800075c:	4868      	ldr	r0, [pc, #416]	; (8000900 <MX_GPIO_Init+0x270>)
 800075e:	f000 fcb9 	bl	80010d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000762:	2200      	movs	r2, #0
 8000764:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000768:	4866      	ldr	r0, [pc, #408]	; (8000904 <MX_GPIO_Init+0x274>)
 800076a:	f000 fcb3 	bl	80010d4 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800076e:	2308      	movs	r3, #8
 8000770:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000772:	2301      	movs	r3, #1
 8000774:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000776:	2300      	movs	r3, #0
 8000778:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800077a:	2300      	movs	r3, #0
 800077c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800077e:	f107 031c 	add.w	r3, r7, #28
 8000782:	4619      	mov	r1, r3
 8000784:	485d      	ldr	r0, [pc, #372]	; (80008fc <MX_GPIO_Init+0x26c>)
 8000786:	f000 fb09 	bl	8000d9c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800078a:	2301      	movs	r3, #1
 800078c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800078e:	2301      	movs	r3, #1
 8000790:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000792:	2300      	movs	r3, #0
 8000794:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000796:	2300      	movs	r3, #0
 8000798:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800079a:	f107 031c 	add.w	r3, r7, #28
 800079e:	4619      	mov	r1, r3
 80007a0:	4857      	ldr	r0, [pc, #348]	; (8000900 <MX_GPIO_Init+0x270>)
 80007a2:	f000 fafb 	bl	8000d9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80007a6:	2308      	movs	r3, #8
 80007a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007aa:	2302      	movs	r3, #2
 80007ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ae:	2300      	movs	r3, #0
 80007b0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b2:	2300      	movs	r3, #0
 80007b4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80007b6:	2305      	movs	r3, #5
 80007b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80007ba:	f107 031c 	add.w	r3, r7, #28
 80007be:	4619      	mov	r1, r3
 80007c0:	484f      	ldr	r0, [pc, #316]	; (8000900 <MX_GPIO_Init+0x270>)
 80007c2:	f000 faeb 	bl	8000d9c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007c6:	2301      	movs	r3, #1
 80007c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007ca:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80007ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d0:	2300      	movs	r3, #0
 80007d2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007d4:	f107 031c 	add.w	r3, r7, #28
 80007d8:	4619      	mov	r1, r3
 80007da:	484b      	ldr	r0, [pc, #300]	; (8000908 <MX_GPIO_Init+0x278>)
 80007dc:	f000 fade 	bl	8000d9c <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80007e0:	2310      	movs	r3, #16
 80007e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007e4:	2302      	movs	r3, #2
 80007e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e8:	2300      	movs	r3, #0
 80007ea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ec:	2300      	movs	r3, #0
 80007ee:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80007f0:	2306      	movs	r3, #6
 80007f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80007f4:	f107 031c 	add.w	r3, r7, #28
 80007f8:	4619      	mov	r1, r3
 80007fa:	4843      	ldr	r0, [pc, #268]	; (8000908 <MX_GPIO_Init+0x278>)
 80007fc:	f000 face 	bl	8000d9c <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000800:	23e0      	movs	r3, #224	; 0xe0
 8000802:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000804:	2302      	movs	r3, #2
 8000806:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000808:	2300      	movs	r3, #0
 800080a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800080c:	2300      	movs	r3, #0
 800080e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000810:	2305      	movs	r3, #5
 8000812:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000814:	f107 031c 	add.w	r3, r7, #28
 8000818:	4619      	mov	r1, r3
 800081a:	483b      	ldr	r0, [pc, #236]	; (8000908 <MX_GPIO_Init+0x278>)
 800081c:	f000 fabe 	bl	8000d9c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000820:	2304      	movs	r3, #4
 8000822:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000824:	2300      	movs	r3, #0
 8000826:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000828:	2300      	movs	r3, #0
 800082a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800082c:	f107 031c 	add.w	r3, r7, #28
 8000830:	4619      	mov	r1, r3
 8000832:	4836      	ldr	r0, [pc, #216]	; (800090c <MX_GPIO_Init+0x27c>)
 8000834:	f000 fab2 	bl	8000d9c <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000838:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800083c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800083e:	2302      	movs	r3, #2
 8000840:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000842:	2300      	movs	r3, #0
 8000844:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000846:	2300      	movs	r3, #0
 8000848:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800084a:	2305      	movs	r3, #5
 800084c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800084e:	f107 031c 	add.w	r3, r7, #28
 8000852:	4619      	mov	r1, r3
 8000854:	482d      	ldr	r0, [pc, #180]	; (800090c <MX_GPIO_Init+0x27c>)
 8000856:	f000 faa1 	bl	8000d9c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800085a:	f24f 0310 	movw	r3, #61456	; 0xf010
 800085e:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000860:	2301      	movs	r3, #1
 8000862:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000864:	2300      	movs	r3, #0
 8000866:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000868:	2300      	movs	r3, #0
 800086a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800086c:	f107 031c 	add.w	r3, r7, #28
 8000870:	4619      	mov	r1, r3
 8000872:	4824      	ldr	r0, [pc, #144]	; (8000904 <MX_GPIO_Init+0x274>)
 8000874:	f000 fa92 	bl	8000d9c <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000878:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 800087c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800087e:	2302      	movs	r3, #2
 8000880:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000882:	2300      	movs	r3, #0
 8000884:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000886:	2300      	movs	r3, #0
 8000888:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800088a:	2306      	movs	r3, #6
 800088c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800088e:	f107 031c 	add.w	r3, r7, #28
 8000892:	4619      	mov	r1, r3
 8000894:	481a      	ldr	r0, [pc, #104]	; (8000900 <MX_GPIO_Init+0x270>)
 8000896:	f000 fa81 	bl	8000d9c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800089a:	2320      	movs	r3, #32
 800089c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800089e:	2300      	movs	r3, #0
 80008a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a2:	2300      	movs	r3, #0
 80008a4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80008a6:	f107 031c 	add.w	r3, r7, #28
 80008aa:	4619      	mov	r1, r3
 80008ac:	4815      	ldr	r0, [pc, #84]	; (8000904 <MX_GPIO_Init+0x274>)
 80008ae:	f000 fa75 	bl	8000d9c <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80008b2:	f44f 7310 	mov.w	r3, #576	; 0x240
 80008b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008b8:	2312      	movs	r3, #18
 80008ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008bc:	2300      	movs	r3, #0
 80008be:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c0:	2300      	movs	r3, #0
 80008c2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80008c4:	2304      	movs	r3, #4
 80008c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008c8:	f107 031c 	add.w	r3, r7, #28
 80008cc:	4619      	mov	r1, r3
 80008ce:	480f      	ldr	r0, [pc, #60]	; (800090c <MX_GPIO_Init+0x27c>)
 80008d0:	f000 fa64 	bl	8000d9c <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80008d4:	2302      	movs	r3, #2
 80008d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80008d8:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80008dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008de:	2300      	movs	r3, #0
 80008e0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80008e2:	f107 031c 	add.w	r3, r7, #28
 80008e6:	4619      	mov	r1, r3
 80008e8:	4804      	ldr	r0, [pc, #16]	; (80008fc <MX_GPIO_Init+0x26c>)
 80008ea:	f000 fa57 	bl	8000d9c <HAL_GPIO_Init>

}
 80008ee:	bf00      	nop
 80008f0:	3730      	adds	r7, #48	; 0x30
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	40023800 	.word	0x40023800
 80008fc:	40021000 	.word	0x40021000
 8000900:	40020800 	.word	0x40020800
 8000904:	40020c00 	.word	0x40020c00
 8000908:	40020000 	.word	0x40020000
 800090c:	40020400 	.word	0x40020400

08000910 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000914:	b672      	cpsid	i
}
 8000916:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000918:	e7fe      	b.n	8000918 <Error_Handler+0x8>
	...

0800091c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b082      	sub	sp, #8
 8000920:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000922:	2300      	movs	r3, #0
 8000924:	607b      	str	r3, [r7, #4]
 8000926:	4b10      	ldr	r3, [pc, #64]	; (8000968 <HAL_MspInit+0x4c>)
 8000928:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800092a:	4a0f      	ldr	r2, [pc, #60]	; (8000968 <HAL_MspInit+0x4c>)
 800092c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000930:	6453      	str	r3, [r2, #68]	; 0x44
 8000932:	4b0d      	ldr	r3, [pc, #52]	; (8000968 <HAL_MspInit+0x4c>)
 8000934:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000936:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800093a:	607b      	str	r3, [r7, #4]
 800093c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800093e:	2300      	movs	r3, #0
 8000940:	603b      	str	r3, [r7, #0]
 8000942:	4b09      	ldr	r3, [pc, #36]	; (8000968 <HAL_MspInit+0x4c>)
 8000944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000946:	4a08      	ldr	r2, [pc, #32]	; (8000968 <HAL_MspInit+0x4c>)
 8000948:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800094c:	6413      	str	r3, [r2, #64]	; 0x40
 800094e:	4b06      	ldr	r3, [pc, #24]	; (8000968 <HAL_MspInit+0x4c>)
 8000950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000952:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000956:	603b      	str	r3, [r7, #0]
 8000958:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800095a:	2007      	movs	r0, #7
 800095c:	f000 f9dc 	bl	8000d18 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000960:	bf00      	nop
 8000962:	3708      	adds	r7, #8
 8000964:	46bd      	mov	sp, r7
 8000966:	bd80      	pop	{r7, pc}
 8000968:	40023800 	.word	0x40023800

0800096c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000970:	e7fe      	b.n	8000970 <NMI_Handler+0x4>

08000972 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000972:	b480      	push	{r7}
 8000974:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000976:	e7fe      	b.n	8000976 <HardFault_Handler+0x4>

08000978 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800097c:	e7fe      	b.n	800097c <MemManage_Handler+0x4>

0800097e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800097e:	b480      	push	{r7}
 8000980:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000982:	e7fe      	b.n	8000982 <BusFault_Handler+0x4>

08000984 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000988:	e7fe      	b.n	8000988 <UsageFault_Handler+0x4>

0800098a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800098a:	b480      	push	{r7}
 800098c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800098e:	bf00      	nop
 8000990:	46bd      	mov	sp, r7
 8000992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000996:	4770      	bx	lr

08000998 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800099c:	bf00      	nop
 800099e:	46bd      	mov	sp, r7
 80009a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a4:	4770      	bx	lr

080009a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009a6:	b480      	push	{r7}
 80009a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009aa:	bf00      	nop
 80009ac:	46bd      	mov	sp, r7
 80009ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b2:	4770      	bx	lr

080009b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009b8:	f000 f89a 	bl	8000af0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009bc:	bf00      	nop
 80009be:	bd80      	pop	{r7, pc}

080009c0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80009c4:	4802      	ldr	r0, [pc, #8]	; (80009d0 <OTG_FS_IRQHandler+0x10>)
 80009c6:	f000 fcee 	bl	80013a6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80009ca:	bf00      	nop
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	20001894 	.word	0x20001894

080009d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009d8:	4b06      	ldr	r3, [pc, #24]	; (80009f4 <SystemInit+0x20>)
 80009da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009de:	4a05      	ldr	r2, [pc, #20]	; (80009f4 <SystemInit+0x20>)
 80009e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009e8:	bf00      	nop
 80009ea:	46bd      	mov	sp, r7
 80009ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f0:	4770      	bx	lr
 80009f2:	bf00      	nop
 80009f4:	e000ed00 	.word	0xe000ed00

080009f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80009f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a30 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80009fc:	480d      	ldr	r0, [pc, #52]	; (8000a34 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80009fe:	490e      	ldr	r1, [pc, #56]	; (8000a38 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000a00:	4a0e      	ldr	r2, [pc, #56]	; (8000a3c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a04:	e002      	b.n	8000a0c <LoopCopyDataInit>

08000a06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a0a:	3304      	adds	r3, #4

08000a0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a10:	d3f9      	bcc.n	8000a06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a12:	4a0b      	ldr	r2, [pc, #44]	; (8000a40 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000a14:	4c0b      	ldr	r4, [pc, #44]	; (8000a44 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000a16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a18:	e001      	b.n	8000a1e <LoopFillZerobss>

08000a1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a1c:	3204      	adds	r2, #4

08000a1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a20:	d3fb      	bcc.n	8000a1a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000a22:	f7ff ffd7 	bl	80009d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a26:	f005 fe29 	bl	800667c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a2a:	f7ff fd49 	bl	80004c0 <main>
  bx  lr    
 8000a2e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000a30:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a38:	20000180 	.word	0x20000180
  ldr r2, =_sidata
 8000a3c:	08006754 	.word	0x08006754
  ldr r2, =_sbss
 8000a40:	20000180 	.word	0x20000180
  ldr r4, =_ebss
 8000a44:	20001c9c 	.word	0x20001c9c

08000a48 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a48:	e7fe      	b.n	8000a48 <ADC_IRQHandler>
	...

08000a4c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a50:	4b0e      	ldr	r3, [pc, #56]	; (8000a8c <HAL_Init+0x40>)
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	4a0d      	ldr	r2, [pc, #52]	; (8000a8c <HAL_Init+0x40>)
 8000a56:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a5a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a5c:	4b0b      	ldr	r3, [pc, #44]	; (8000a8c <HAL_Init+0x40>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	4a0a      	ldr	r2, [pc, #40]	; (8000a8c <HAL_Init+0x40>)
 8000a62:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a66:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a68:	4b08      	ldr	r3, [pc, #32]	; (8000a8c <HAL_Init+0x40>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	4a07      	ldr	r2, [pc, #28]	; (8000a8c <HAL_Init+0x40>)
 8000a6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a72:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a74:	2003      	movs	r0, #3
 8000a76:	f000 f94f 	bl	8000d18 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a7a:	2000      	movs	r0, #0
 8000a7c:	f000 f808 	bl	8000a90 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a80:	f7ff ff4c 	bl	800091c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a84:	2300      	movs	r3, #0
}
 8000a86:	4618      	mov	r0, r3
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	40023c00 	.word	0x40023c00

08000a90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b082      	sub	sp, #8
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a98:	4b12      	ldr	r3, [pc, #72]	; (8000ae4 <HAL_InitTick+0x54>)
 8000a9a:	681a      	ldr	r2, [r3, #0]
 8000a9c:	4b12      	ldr	r3, [pc, #72]	; (8000ae8 <HAL_InitTick+0x58>)
 8000a9e:	781b      	ldrb	r3, [r3, #0]
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000aa6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000aaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000aae:	4618      	mov	r0, r3
 8000ab0:	f000 f967 	bl	8000d82 <HAL_SYSTICK_Config>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d001      	beq.n	8000abe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000aba:	2301      	movs	r3, #1
 8000abc:	e00e      	b.n	8000adc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	2b0f      	cmp	r3, #15
 8000ac2:	d80a      	bhi.n	8000ada <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	6879      	ldr	r1, [r7, #4]
 8000ac8:	f04f 30ff 	mov.w	r0, #4294967295
 8000acc:	f000 f92f 	bl	8000d2e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ad0:	4a06      	ldr	r2, [pc, #24]	; (8000aec <HAL_InitTick+0x5c>)
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	e000      	b.n	8000adc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ada:	2301      	movs	r3, #1
}
 8000adc:	4618      	mov	r0, r3
 8000ade:	3708      	adds	r7, #8
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	20000000 	.word	0x20000000
 8000ae8:	20000008 	.word	0x20000008
 8000aec:	20000004 	.word	0x20000004

08000af0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000af4:	4b06      	ldr	r3, [pc, #24]	; (8000b10 <HAL_IncTick+0x20>)
 8000af6:	781b      	ldrb	r3, [r3, #0]
 8000af8:	461a      	mov	r2, r3
 8000afa:	4b06      	ldr	r3, [pc, #24]	; (8000b14 <HAL_IncTick+0x24>)
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	4413      	add	r3, r2
 8000b00:	4a04      	ldr	r2, [pc, #16]	; (8000b14 <HAL_IncTick+0x24>)
 8000b02:	6013      	str	r3, [r2, #0]
}
 8000b04:	bf00      	nop
 8000b06:	46bd      	mov	sp, r7
 8000b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0c:	4770      	bx	lr
 8000b0e:	bf00      	nop
 8000b10:	20000008 	.word	0x20000008
 8000b14:	200003c0 	.word	0x200003c0

08000b18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0
  return uwTick;
 8000b1c:	4b03      	ldr	r3, [pc, #12]	; (8000b2c <HAL_GetTick+0x14>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
}
 8000b20:	4618      	mov	r0, r3
 8000b22:	46bd      	mov	sp, r7
 8000b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b28:	4770      	bx	lr
 8000b2a:	bf00      	nop
 8000b2c:	200003c0 	.word	0x200003c0

08000b30 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b084      	sub	sp, #16
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b38:	f7ff ffee 	bl	8000b18 <HAL_GetTick>
 8000b3c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b42:	68fb      	ldr	r3, [r7, #12]
 8000b44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b48:	d005      	beq.n	8000b56 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b4a:	4b0a      	ldr	r3, [pc, #40]	; (8000b74 <HAL_Delay+0x44>)
 8000b4c:	781b      	ldrb	r3, [r3, #0]
 8000b4e:	461a      	mov	r2, r3
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	4413      	add	r3, r2
 8000b54:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000b56:	bf00      	nop
 8000b58:	f7ff ffde 	bl	8000b18 <HAL_GetTick>
 8000b5c:	4602      	mov	r2, r0
 8000b5e:	68bb      	ldr	r3, [r7, #8]
 8000b60:	1ad3      	subs	r3, r2, r3
 8000b62:	68fa      	ldr	r2, [r7, #12]
 8000b64:	429a      	cmp	r2, r3
 8000b66:	d8f7      	bhi.n	8000b58 <HAL_Delay+0x28>
  {
  }
}
 8000b68:	bf00      	nop
 8000b6a:	bf00      	nop
 8000b6c:	3710      	adds	r7, #16
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	20000008 	.word	0x20000008

08000b78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	b085      	sub	sp, #20
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	f003 0307 	and.w	r3, r3, #7
 8000b86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b88:	4b0c      	ldr	r3, [pc, #48]	; (8000bbc <__NVIC_SetPriorityGrouping+0x44>)
 8000b8a:	68db      	ldr	r3, [r3, #12]
 8000b8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b8e:	68ba      	ldr	r2, [r7, #8]
 8000b90:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b94:	4013      	ands	r3, r2
 8000b96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b9c:	68bb      	ldr	r3, [r7, #8]
 8000b9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ba0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ba4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ba8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000baa:	4a04      	ldr	r2, [pc, #16]	; (8000bbc <__NVIC_SetPriorityGrouping+0x44>)
 8000bac:	68bb      	ldr	r3, [r7, #8]
 8000bae:	60d3      	str	r3, [r2, #12]
}
 8000bb0:	bf00      	nop
 8000bb2:	3714      	adds	r7, #20
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bba:	4770      	bx	lr
 8000bbc:	e000ed00 	.word	0xe000ed00

08000bc0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bc4:	4b04      	ldr	r3, [pc, #16]	; (8000bd8 <__NVIC_GetPriorityGrouping+0x18>)
 8000bc6:	68db      	ldr	r3, [r3, #12]
 8000bc8:	0a1b      	lsrs	r3, r3, #8
 8000bca:	f003 0307 	and.w	r3, r3, #7
}
 8000bce:	4618      	mov	r0, r3
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd6:	4770      	bx	lr
 8000bd8:	e000ed00 	.word	0xe000ed00

08000bdc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	b083      	sub	sp, #12
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	4603      	mov	r3, r0
 8000be4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000be6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	db0b      	blt.n	8000c06 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bee:	79fb      	ldrb	r3, [r7, #7]
 8000bf0:	f003 021f 	and.w	r2, r3, #31
 8000bf4:	4907      	ldr	r1, [pc, #28]	; (8000c14 <__NVIC_EnableIRQ+0x38>)
 8000bf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bfa:	095b      	lsrs	r3, r3, #5
 8000bfc:	2001      	movs	r0, #1
 8000bfe:	fa00 f202 	lsl.w	r2, r0, r2
 8000c02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c06:	bf00      	nop
 8000c08:	370c      	adds	r7, #12
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c10:	4770      	bx	lr
 8000c12:	bf00      	nop
 8000c14:	e000e100 	.word	0xe000e100

08000c18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	b083      	sub	sp, #12
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	4603      	mov	r3, r0
 8000c20:	6039      	str	r1, [r7, #0]
 8000c22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	db0a      	blt.n	8000c42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c2c:	683b      	ldr	r3, [r7, #0]
 8000c2e:	b2da      	uxtb	r2, r3
 8000c30:	490c      	ldr	r1, [pc, #48]	; (8000c64 <__NVIC_SetPriority+0x4c>)
 8000c32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c36:	0112      	lsls	r2, r2, #4
 8000c38:	b2d2      	uxtb	r2, r2
 8000c3a:	440b      	add	r3, r1
 8000c3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c40:	e00a      	b.n	8000c58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c42:	683b      	ldr	r3, [r7, #0]
 8000c44:	b2da      	uxtb	r2, r3
 8000c46:	4908      	ldr	r1, [pc, #32]	; (8000c68 <__NVIC_SetPriority+0x50>)
 8000c48:	79fb      	ldrb	r3, [r7, #7]
 8000c4a:	f003 030f 	and.w	r3, r3, #15
 8000c4e:	3b04      	subs	r3, #4
 8000c50:	0112      	lsls	r2, r2, #4
 8000c52:	b2d2      	uxtb	r2, r2
 8000c54:	440b      	add	r3, r1
 8000c56:	761a      	strb	r2, [r3, #24]
}
 8000c58:	bf00      	nop
 8000c5a:	370c      	adds	r7, #12
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c62:	4770      	bx	lr
 8000c64:	e000e100 	.word	0xe000e100
 8000c68:	e000ed00 	.word	0xe000ed00

08000c6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	b089      	sub	sp, #36	; 0x24
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	60f8      	str	r0, [r7, #12]
 8000c74:	60b9      	str	r1, [r7, #8]
 8000c76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	f003 0307 	and.w	r3, r3, #7
 8000c7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c80:	69fb      	ldr	r3, [r7, #28]
 8000c82:	f1c3 0307 	rsb	r3, r3, #7
 8000c86:	2b04      	cmp	r3, #4
 8000c88:	bf28      	it	cs
 8000c8a:	2304      	movcs	r3, #4
 8000c8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c8e:	69fb      	ldr	r3, [r7, #28]
 8000c90:	3304      	adds	r3, #4
 8000c92:	2b06      	cmp	r3, #6
 8000c94:	d902      	bls.n	8000c9c <NVIC_EncodePriority+0x30>
 8000c96:	69fb      	ldr	r3, [r7, #28]
 8000c98:	3b03      	subs	r3, #3
 8000c9a:	e000      	b.n	8000c9e <NVIC_EncodePriority+0x32>
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ca0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ca4:	69bb      	ldr	r3, [r7, #24]
 8000ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8000caa:	43da      	mvns	r2, r3
 8000cac:	68bb      	ldr	r3, [r7, #8]
 8000cae:	401a      	ands	r2, r3
 8000cb0:	697b      	ldr	r3, [r7, #20]
 8000cb2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cb4:	f04f 31ff 	mov.w	r1, #4294967295
 8000cb8:	697b      	ldr	r3, [r7, #20]
 8000cba:	fa01 f303 	lsl.w	r3, r1, r3
 8000cbe:	43d9      	mvns	r1, r3
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cc4:	4313      	orrs	r3, r2
         );
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	3724      	adds	r7, #36	; 0x24
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr
	...

08000cd4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b082      	sub	sp, #8
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	3b01      	subs	r3, #1
 8000ce0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ce4:	d301      	bcc.n	8000cea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ce6:	2301      	movs	r3, #1
 8000ce8:	e00f      	b.n	8000d0a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cea:	4a0a      	ldr	r2, [pc, #40]	; (8000d14 <SysTick_Config+0x40>)
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	3b01      	subs	r3, #1
 8000cf0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cf2:	210f      	movs	r1, #15
 8000cf4:	f04f 30ff 	mov.w	r0, #4294967295
 8000cf8:	f7ff ff8e 	bl	8000c18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cfc:	4b05      	ldr	r3, [pc, #20]	; (8000d14 <SysTick_Config+0x40>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d02:	4b04      	ldr	r3, [pc, #16]	; (8000d14 <SysTick_Config+0x40>)
 8000d04:	2207      	movs	r2, #7
 8000d06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d08:	2300      	movs	r3, #0
}
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	3708      	adds	r7, #8
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	e000e010 	.word	0xe000e010

08000d18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b082      	sub	sp, #8
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d20:	6878      	ldr	r0, [r7, #4]
 8000d22:	f7ff ff29 	bl	8000b78 <__NVIC_SetPriorityGrouping>
}
 8000d26:	bf00      	nop
 8000d28:	3708      	adds	r7, #8
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}

08000d2e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d2e:	b580      	push	{r7, lr}
 8000d30:	b086      	sub	sp, #24
 8000d32:	af00      	add	r7, sp, #0
 8000d34:	4603      	mov	r3, r0
 8000d36:	60b9      	str	r1, [r7, #8]
 8000d38:	607a      	str	r2, [r7, #4]
 8000d3a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d40:	f7ff ff3e 	bl	8000bc0 <__NVIC_GetPriorityGrouping>
 8000d44:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d46:	687a      	ldr	r2, [r7, #4]
 8000d48:	68b9      	ldr	r1, [r7, #8]
 8000d4a:	6978      	ldr	r0, [r7, #20]
 8000d4c:	f7ff ff8e 	bl	8000c6c <NVIC_EncodePriority>
 8000d50:	4602      	mov	r2, r0
 8000d52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d56:	4611      	mov	r1, r2
 8000d58:	4618      	mov	r0, r3
 8000d5a:	f7ff ff5d 	bl	8000c18 <__NVIC_SetPriority>
}
 8000d5e:	bf00      	nop
 8000d60:	3718      	adds	r7, #24
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}

08000d66 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d66:	b580      	push	{r7, lr}
 8000d68:	b082      	sub	sp, #8
 8000d6a:	af00      	add	r7, sp, #0
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d74:	4618      	mov	r0, r3
 8000d76:	f7ff ff31 	bl	8000bdc <__NVIC_EnableIRQ>
}
 8000d7a:	bf00      	nop
 8000d7c:	3708      	adds	r7, #8
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}

08000d82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d82:	b580      	push	{r7, lr}
 8000d84:	b082      	sub	sp, #8
 8000d86:	af00      	add	r7, sp, #0
 8000d88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d8a:	6878      	ldr	r0, [r7, #4]
 8000d8c:	f7ff ffa2 	bl	8000cd4 <SysTick_Config>
 8000d90:	4603      	mov	r3, r0
}
 8000d92:	4618      	mov	r0, r3
 8000d94:	3708      	adds	r7, #8
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
	...

08000d9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	b089      	sub	sp, #36	; 0x24
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
 8000da4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000da6:	2300      	movs	r3, #0
 8000da8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000daa:	2300      	movs	r3, #0
 8000dac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000dae:	2300      	movs	r3, #0
 8000db0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000db2:	2300      	movs	r3, #0
 8000db4:	61fb      	str	r3, [r7, #28]
 8000db6:	e16b      	b.n	8001090 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000db8:	2201      	movs	r2, #1
 8000dba:	69fb      	ldr	r3, [r7, #28]
 8000dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000dc2:	683b      	ldr	r3, [r7, #0]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	697a      	ldr	r2, [r7, #20]
 8000dc8:	4013      	ands	r3, r2
 8000dca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000dcc:	693a      	ldr	r2, [r7, #16]
 8000dce:	697b      	ldr	r3, [r7, #20]
 8000dd0:	429a      	cmp	r2, r3
 8000dd2:	f040 815a 	bne.w	800108a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000dd6:	683b      	ldr	r3, [r7, #0]
 8000dd8:	685b      	ldr	r3, [r3, #4]
 8000dda:	f003 0303 	and.w	r3, r3, #3
 8000dde:	2b01      	cmp	r3, #1
 8000de0:	d005      	beq.n	8000dee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	685b      	ldr	r3, [r3, #4]
 8000de6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000dea:	2b02      	cmp	r3, #2
 8000dec:	d130      	bne.n	8000e50 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	689b      	ldr	r3, [r3, #8]
 8000df2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000df4:	69fb      	ldr	r3, [r7, #28]
 8000df6:	005b      	lsls	r3, r3, #1
 8000df8:	2203      	movs	r2, #3
 8000dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfe:	43db      	mvns	r3, r3
 8000e00:	69ba      	ldr	r2, [r7, #24]
 8000e02:	4013      	ands	r3, r2
 8000e04:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	68da      	ldr	r2, [r3, #12]
 8000e0a:	69fb      	ldr	r3, [r7, #28]
 8000e0c:	005b      	lsls	r3, r3, #1
 8000e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e12:	69ba      	ldr	r2, [r7, #24]
 8000e14:	4313      	orrs	r3, r2
 8000e16:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	69ba      	ldr	r2, [r7, #24]
 8000e1c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	685b      	ldr	r3, [r3, #4]
 8000e22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e24:	2201      	movs	r2, #1
 8000e26:	69fb      	ldr	r3, [r7, #28]
 8000e28:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2c:	43db      	mvns	r3, r3
 8000e2e:	69ba      	ldr	r2, [r7, #24]
 8000e30:	4013      	ands	r3, r2
 8000e32:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	685b      	ldr	r3, [r3, #4]
 8000e38:	091b      	lsrs	r3, r3, #4
 8000e3a:	f003 0201 	and.w	r2, r3, #1
 8000e3e:	69fb      	ldr	r3, [r7, #28]
 8000e40:	fa02 f303 	lsl.w	r3, r2, r3
 8000e44:	69ba      	ldr	r2, [r7, #24]
 8000e46:	4313      	orrs	r3, r2
 8000e48:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	69ba      	ldr	r2, [r7, #24]
 8000e4e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	685b      	ldr	r3, [r3, #4]
 8000e54:	f003 0303 	and.w	r3, r3, #3
 8000e58:	2b03      	cmp	r3, #3
 8000e5a:	d017      	beq.n	8000e8c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	68db      	ldr	r3, [r3, #12]
 8000e60:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e62:	69fb      	ldr	r3, [r7, #28]
 8000e64:	005b      	lsls	r3, r3, #1
 8000e66:	2203      	movs	r2, #3
 8000e68:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6c:	43db      	mvns	r3, r3
 8000e6e:	69ba      	ldr	r2, [r7, #24]
 8000e70:	4013      	ands	r3, r2
 8000e72:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	689a      	ldr	r2, [r3, #8]
 8000e78:	69fb      	ldr	r3, [r7, #28]
 8000e7a:	005b      	lsls	r3, r3, #1
 8000e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e80:	69ba      	ldr	r2, [r7, #24]
 8000e82:	4313      	orrs	r3, r2
 8000e84:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	69ba      	ldr	r2, [r7, #24]
 8000e8a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	685b      	ldr	r3, [r3, #4]
 8000e90:	f003 0303 	and.w	r3, r3, #3
 8000e94:	2b02      	cmp	r3, #2
 8000e96:	d123      	bne.n	8000ee0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e98:	69fb      	ldr	r3, [r7, #28]
 8000e9a:	08da      	lsrs	r2, r3, #3
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	3208      	adds	r2, #8
 8000ea0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ea4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000ea6:	69fb      	ldr	r3, [r7, #28]
 8000ea8:	f003 0307 	and.w	r3, r3, #7
 8000eac:	009b      	lsls	r3, r3, #2
 8000eae:	220f      	movs	r2, #15
 8000eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb4:	43db      	mvns	r3, r3
 8000eb6:	69ba      	ldr	r2, [r7, #24]
 8000eb8:	4013      	ands	r3, r2
 8000eba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	691a      	ldr	r2, [r3, #16]
 8000ec0:	69fb      	ldr	r3, [r7, #28]
 8000ec2:	f003 0307 	and.w	r3, r3, #7
 8000ec6:	009b      	lsls	r3, r3, #2
 8000ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ecc:	69ba      	ldr	r2, [r7, #24]
 8000ece:	4313      	orrs	r3, r2
 8000ed0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000ed2:	69fb      	ldr	r3, [r7, #28]
 8000ed4:	08da      	lsrs	r2, r3, #3
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	3208      	adds	r2, #8
 8000eda:	69b9      	ldr	r1, [r7, #24]
 8000edc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000ee6:	69fb      	ldr	r3, [r7, #28]
 8000ee8:	005b      	lsls	r3, r3, #1
 8000eea:	2203      	movs	r2, #3
 8000eec:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef0:	43db      	mvns	r3, r3
 8000ef2:	69ba      	ldr	r2, [r7, #24]
 8000ef4:	4013      	ands	r3, r2
 8000ef6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	685b      	ldr	r3, [r3, #4]
 8000efc:	f003 0203 	and.w	r2, r3, #3
 8000f00:	69fb      	ldr	r3, [r7, #28]
 8000f02:	005b      	lsls	r3, r3, #1
 8000f04:	fa02 f303 	lsl.w	r3, r2, r3
 8000f08:	69ba      	ldr	r2, [r7, #24]
 8000f0a:	4313      	orrs	r3, r2
 8000f0c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	69ba      	ldr	r2, [r7, #24]
 8000f12:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	685b      	ldr	r3, [r3, #4]
 8000f18:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	f000 80b4 	beq.w	800108a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f22:	2300      	movs	r3, #0
 8000f24:	60fb      	str	r3, [r7, #12]
 8000f26:	4b60      	ldr	r3, [pc, #384]	; (80010a8 <HAL_GPIO_Init+0x30c>)
 8000f28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f2a:	4a5f      	ldr	r2, [pc, #380]	; (80010a8 <HAL_GPIO_Init+0x30c>)
 8000f2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f30:	6453      	str	r3, [r2, #68]	; 0x44
 8000f32:	4b5d      	ldr	r3, [pc, #372]	; (80010a8 <HAL_GPIO_Init+0x30c>)
 8000f34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f3a:	60fb      	str	r3, [r7, #12]
 8000f3c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f3e:	4a5b      	ldr	r2, [pc, #364]	; (80010ac <HAL_GPIO_Init+0x310>)
 8000f40:	69fb      	ldr	r3, [r7, #28]
 8000f42:	089b      	lsrs	r3, r3, #2
 8000f44:	3302      	adds	r3, #2
 8000f46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f4c:	69fb      	ldr	r3, [r7, #28]
 8000f4e:	f003 0303 	and.w	r3, r3, #3
 8000f52:	009b      	lsls	r3, r3, #2
 8000f54:	220f      	movs	r2, #15
 8000f56:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5a:	43db      	mvns	r3, r3
 8000f5c:	69ba      	ldr	r2, [r7, #24]
 8000f5e:	4013      	ands	r3, r2
 8000f60:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	4a52      	ldr	r2, [pc, #328]	; (80010b0 <HAL_GPIO_Init+0x314>)
 8000f66:	4293      	cmp	r3, r2
 8000f68:	d02b      	beq.n	8000fc2 <HAL_GPIO_Init+0x226>
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	4a51      	ldr	r2, [pc, #324]	; (80010b4 <HAL_GPIO_Init+0x318>)
 8000f6e:	4293      	cmp	r3, r2
 8000f70:	d025      	beq.n	8000fbe <HAL_GPIO_Init+0x222>
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	4a50      	ldr	r2, [pc, #320]	; (80010b8 <HAL_GPIO_Init+0x31c>)
 8000f76:	4293      	cmp	r3, r2
 8000f78:	d01f      	beq.n	8000fba <HAL_GPIO_Init+0x21e>
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	4a4f      	ldr	r2, [pc, #316]	; (80010bc <HAL_GPIO_Init+0x320>)
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	d019      	beq.n	8000fb6 <HAL_GPIO_Init+0x21a>
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	4a4e      	ldr	r2, [pc, #312]	; (80010c0 <HAL_GPIO_Init+0x324>)
 8000f86:	4293      	cmp	r3, r2
 8000f88:	d013      	beq.n	8000fb2 <HAL_GPIO_Init+0x216>
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	4a4d      	ldr	r2, [pc, #308]	; (80010c4 <HAL_GPIO_Init+0x328>)
 8000f8e:	4293      	cmp	r3, r2
 8000f90:	d00d      	beq.n	8000fae <HAL_GPIO_Init+0x212>
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	4a4c      	ldr	r2, [pc, #304]	; (80010c8 <HAL_GPIO_Init+0x32c>)
 8000f96:	4293      	cmp	r3, r2
 8000f98:	d007      	beq.n	8000faa <HAL_GPIO_Init+0x20e>
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	4a4b      	ldr	r2, [pc, #300]	; (80010cc <HAL_GPIO_Init+0x330>)
 8000f9e:	4293      	cmp	r3, r2
 8000fa0:	d101      	bne.n	8000fa6 <HAL_GPIO_Init+0x20a>
 8000fa2:	2307      	movs	r3, #7
 8000fa4:	e00e      	b.n	8000fc4 <HAL_GPIO_Init+0x228>
 8000fa6:	2308      	movs	r3, #8
 8000fa8:	e00c      	b.n	8000fc4 <HAL_GPIO_Init+0x228>
 8000faa:	2306      	movs	r3, #6
 8000fac:	e00a      	b.n	8000fc4 <HAL_GPIO_Init+0x228>
 8000fae:	2305      	movs	r3, #5
 8000fb0:	e008      	b.n	8000fc4 <HAL_GPIO_Init+0x228>
 8000fb2:	2304      	movs	r3, #4
 8000fb4:	e006      	b.n	8000fc4 <HAL_GPIO_Init+0x228>
 8000fb6:	2303      	movs	r3, #3
 8000fb8:	e004      	b.n	8000fc4 <HAL_GPIO_Init+0x228>
 8000fba:	2302      	movs	r3, #2
 8000fbc:	e002      	b.n	8000fc4 <HAL_GPIO_Init+0x228>
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	e000      	b.n	8000fc4 <HAL_GPIO_Init+0x228>
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	69fa      	ldr	r2, [r7, #28]
 8000fc6:	f002 0203 	and.w	r2, r2, #3
 8000fca:	0092      	lsls	r2, r2, #2
 8000fcc:	4093      	lsls	r3, r2
 8000fce:	69ba      	ldr	r2, [r7, #24]
 8000fd0:	4313      	orrs	r3, r2
 8000fd2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000fd4:	4935      	ldr	r1, [pc, #212]	; (80010ac <HAL_GPIO_Init+0x310>)
 8000fd6:	69fb      	ldr	r3, [r7, #28]
 8000fd8:	089b      	lsrs	r3, r3, #2
 8000fda:	3302      	adds	r3, #2
 8000fdc:	69ba      	ldr	r2, [r7, #24]
 8000fde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000fe2:	4b3b      	ldr	r3, [pc, #236]	; (80010d0 <HAL_GPIO_Init+0x334>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fe8:	693b      	ldr	r3, [r7, #16]
 8000fea:	43db      	mvns	r3, r3
 8000fec:	69ba      	ldr	r2, [r7, #24]
 8000fee:	4013      	ands	r3, r2
 8000ff0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	685b      	ldr	r3, [r3, #4]
 8000ff6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d003      	beq.n	8001006 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000ffe:	69ba      	ldr	r2, [r7, #24]
 8001000:	693b      	ldr	r3, [r7, #16]
 8001002:	4313      	orrs	r3, r2
 8001004:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001006:	4a32      	ldr	r2, [pc, #200]	; (80010d0 <HAL_GPIO_Init+0x334>)
 8001008:	69bb      	ldr	r3, [r7, #24]
 800100a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800100c:	4b30      	ldr	r3, [pc, #192]	; (80010d0 <HAL_GPIO_Init+0x334>)
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001012:	693b      	ldr	r3, [r7, #16]
 8001014:	43db      	mvns	r3, r3
 8001016:	69ba      	ldr	r2, [r7, #24]
 8001018:	4013      	ands	r3, r2
 800101a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	685b      	ldr	r3, [r3, #4]
 8001020:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001024:	2b00      	cmp	r3, #0
 8001026:	d003      	beq.n	8001030 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001028:	69ba      	ldr	r2, [r7, #24]
 800102a:	693b      	ldr	r3, [r7, #16]
 800102c:	4313      	orrs	r3, r2
 800102e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001030:	4a27      	ldr	r2, [pc, #156]	; (80010d0 <HAL_GPIO_Init+0x334>)
 8001032:	69bb      	ldr	r3, [r7, #24]
 8001034:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001036:	4b26      	ldr	r3, [pc, #152]	; (80010d0 <HAL_GPIO_Init+0x334>)
 8001038:	689b      	ldr	r3, [r3, #8]
 800103a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800103c:	693b      	ldr	r3, [r7, #16]
 800103e:	43db      	mvns	r3, r3
 8001040:	69ba      	ldr	r2, [r7, #24]
 8001042:	4013      	ands	r3, r2
 8001044:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	685b      	ldr	r3, [r3, #4]
 800104a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800104e:	2b00      	cmp	r3, #0
 8001050:	d003      	beq.n	800105a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001052:	69ba      	ldr	r2, [r7, #24]
 8001054:	693b      	ldr	r3, [r7, #16]
 8001056:	4313      	orrs	r3, r2
 8001058:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800105a:	4a1d      	ldr	r2, [pc, #116]	; (80010d0 <HAL_GPIO_Init+0x334>)
 800105c:	69bb      	ldr	r3, [r7, #24]
 800105e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001060:	4b1b      	ldr	r3, [pc, #108]	; (80010d0 <HAL_GPIO_Init+0x334>)
 8001062:	68db      	ldr	r3, [r3, #12]
 8001064:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001066:	693b      	ldr	r3, [r7, #16]
 8001068:	43db      	mvns	r3, r3
 800106a:	69ba      	ldr	r2, [r7, #24]
 800106c:	4013      	ands	r3, r2
 800106e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001078:	2b00      	cmp	r3, #0
 800107a:	d003      	beq.n	8001084 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800107c:	69ba      	ldr	r2, [r7, #24]
 800107e:	693b      	ldr	r3, [r7, #16]
 8001080:	4313      	orrs	r3, r2
 8001082:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001084:	4a12      	ldr	r2, [pc, #72]	; (80010d0 <HAL_GPIO_Init+0x334>)
 8001086:	69bb      	ldr	r3, [r7, #24]
 8001088:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800108a:	69fb      	ldr	r3, [r7, #28]
 800108c:	3301      	adds	r3, #1
 800108e:	61fb      	str	r3, [r7, #28]
 8001090:	69fb      	ldr	r3, [r7, #28]
 8001092:	2b0f      	cmp	r3, #15
 8001094:	f67f ae90 	bls.w	8000db8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001098:	bf00      	nop
 800109a:	bf00      	nop
 800109c:	3724      	adds	r7, #36	; 0x24
 800109e:	46bd      	mov	sp, r7
 80010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop
 80010a8:	40023800 	.word	0x40023800
 80010ac:	40013800 	.word	0x40013800
 80010b0:	40020000 	.word	0x40020000
 80010b4:	40020400 	.word	0x40020400
 80010b8:	40020800 	.word	0x40020800
 80010bc:	40020c00 	.word	0x40020c00
 80010c0:	40021000 	.word	0x40021000
 80010c4:	40021400 	.word	0x40021400
 80010c8:	40021800 	.word	0x40021800
 80010cc:	40021c00 	.word	0x40021c00
 80010d0:	40013c00 	.word	0x40013c00

080010d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010d4:	b480      	push	{r7}
 80010d6:	b083      	sub	sp, #12
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
 80010dc:	460b      	mov	r3, r1
 80010de:	807b      	strh	r3, [r7, #2]
 80010e0:	4613      	mov	r3, r2
 80010e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80010e4:	787b      	ldrb	r3, [r7, #1]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d003      	beq.n	80010f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80010ea:	887a      	ldrh	r2, [r7, #2]
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80010f0:	e003      	b.n	80010fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80010f2:	887b      	ldrh	r3, [r7, #2]
 80010f4:	041a      	lsls	r2, r3, #16
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	619a      	str	r2, [r3, #24]
}
 80010fa:	bf00      	nop
 80010fc:	370c      	adds	r7, #12
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr

08001106 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001106:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001108:	b08f      	sub	sp, #60	; 0x3c
 800110a:	af0a      	add	r7, sp, #40	; 0x28
 800110c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	2b00      	cmp	r3, #0
 8001112:	d101      	bne.n	8001118 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001114:	2301      	movs	r3, #1
 8001116:	e10f      	b.n	8001338 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8001124:	b2db      	uxtb	r3, r3
 8001126:	2b00      	cmp	r3, #0
 8001128:	d106      	bne.n	8001138 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	2200      	movs	r2, #0
 800112e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001132:	6878      	ldr	r0, [r7, #4]
 8001134:	f004 ff70 	bl	8006018 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	2203      	movs	r2, #3
 800113c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001140:	68bb      	ldr	r3, [r7, #8]
 8001142:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001144:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001148:	2b00      	cmp	r3, #0
 800114a:	d102      	bne.n	8001152 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	2200      	movs	r2, #0
 8001150:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	4618      	mov	r0, r3
 8001158:	f001 feb9 	bl	8002ece <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	603b      	str	r3, [r7, #0]
 8001162:	687e      	ldr	r6, [r7, #4]
 8001164:	466d      	mov	r5, sp
 8001166:	f106 0410 	add.w	r4, r6, #16
 800116a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800116c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800116e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001170:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001172:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001176:	e885 0003 	stmia.w	r5, {r0, r1}
 800117a:	1d33      	adds	r3, r6, #4
 800117c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800117e:	6838      	ldr	r0, [r7, #0]
 8001180:	f001 fd90 	bl	8002ca4 <USB_CoreInit>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d005      	beq.n	8001196 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	2202      	movs	r2, #2
 800118e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001192:	2301      	movs	r3, #1
 8001194:	e0d0      	b.n	8001338 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	2100      	movs	r1, #0
 800119c:	4618      	mov	r0, r3
 800119e:	f001 fea7 	bl	8002ef0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80011a2:	2300      	movs	r3, #0
 80011a4:	73fb      	strb	r3, [r7, #15]
 80011a6:	e04a      	b.n	800123e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80011a8:	7bfa      	ldrb	r2, [r7, #15]
 80011aa:	6879      	ldr	r1, [r7, #4]
 80011ac:	4613      	mov	r3, r2
 80011ae:	00db      	lsls	r3, r3, #3
 80011b0:	1a9b      	subs	r3, r3, r2
 80011b2:	009b      	lsls	r3, r3, #2
 80011b4:	440b      	add	r3, r1
 80011b6:	333d      	adds	r3, #61	; 0x3d
 80011b8:	2201      	movs	r2, #1
 80011ba:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80011bc:	7bfa      	ldrb	r2, [r7, #15]
 80011be:	6879      	ldr	r1, [r7, #4]
 80011c0:	4613      	mov	r3, r2
 80011c2:	00db      	lsls	r3, r3, #3
 80011c4:	1a9b      	subs	r3, r3, r2
 80011c6:	009b      	lsls	r3, r3, #2
 80011c8:	440b      	add	r3, r1
 80011ca:	333c      	adds	r3, #60	; 0x3c
 80011cc:	7bfa      	ldrb	r2, [r7, #15]
 80011ce:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80011d0:	7bfa      	ldrb	r2, [r7, #15]
 80011d2:	7bfb      	ldrb	r3, [r7, #15]
 80011d4:	b298      	uxth	r0, r3
 80011d6:	6879      	ldr	r1, [r7, #4]
 80011d8:	4613      	mov	r3, r2
 80011da:	00db      	lsls	r3, r3, #3
 80011dc:	1a9b      	subs	r3, r3, r2
 80011de:	009b      	lsls	r3, r3, #2
 80011e0:	440b      	add	r3, r1
 80011e2:	3342      	adds	r3, #66	; 0x42
 80011e4:	4602      	mov	r2, r0
 80011e6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80011e8:	7bfa      	ldrb	r2, [r7, #15]
 80011ea:	6879      	ldr	r1, [r7, #4]
 80011ec:	4613      	mov	r3, r2
 80011ee:	00db      	lsls	r3, r3, #3
 80011f0:	1a9b      	subs	r3, r3, r2
 80011f2:	009b      	lsls	r3, r3, #2
 80011f4:	440b      	add	r3, r1
 80011f6:	333f      	adds	r3, #63	; 0x3f
 80011f8:	2200      	movs	r2, #0
 80011fa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80011fc:	7bfa      	ldrb	r2, [r7, #15]
 80011fe:	6879      	ldr	r1, [r7, #4]
 8001200:	4613      	mov	r3, r2
 8001202:	00db      	lsls	r3, r3, #3
 8001204:	1a9b      	subs	r3, r3, r2
 8001206:	009b      	lsls	r3, r3, #2
 8001208:	440b      	add	r3, r1
 800120a:	3344      	adds	r3, #68	; 0x44
 800120c:	2200      	movs	r2, #0
 800120e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001210:	7bfa      	ldrb	r2, [r7, #15]
 8001212:	6879      	ldr	r1, [r7, #4]
 8001214:	4613      	mov	r3, r2
 8001216:	00db      	lsls	r3, r3, #3
 8001218:	1a9b      	subs	r3, r3, r2
 800121a:	009b      	lsls	r3, r3, #2
 800121c:	440b      	add	r3, r1
 800121e:	3348      	adds	r3, #72	; 0x48
 8001220:	2200      	movs	r2, #0
 8001222:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001224:	7bfa      	ldrb	r2, [r7, #15]
 8001226:	6879      	ldr	r1, [r7, #4]
 8001228:	4613      	mov	r3, r2
 800122a:	00db      	lsls	r3, r3, #3
 800122c:	1a9b      	subs	r3, r3, r2
 800122e:	009b      	lsls	r3, r3, #2
 8001230:	440b      	add	r3, r1
 8001232:	3350      	adds	r3, #80	; 0x50
 8001234:	2200      	movs	r2, #0
 8001236:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001238:	7bfb      	ldrb	r3, [r7, #15]
 800123a:	3301      	adds	r3, #1
 800123c:	73fb      	strb	r3, [r7, #15]
 800123e:	7bfa      	ldrb	r2, [r7, #15]
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	429a      	cmp	r2, r3
 8001246:	d3af      	bcc.n	80011a8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001248:	2300      	movs	r3, #0
 800124a:	73fb      	strb	r3, [r7, #15]
 800124c:	e044      	b.n	80012d8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800124e:	7bfa      	ldrb	r2, [r7, #15]
 8001250:	6879      	ldr	r1, [r7, #4]
 8001252:	4613      	mov	r3, r2
 8001254:	00db      	lsls	r3, r3, #3
 8001256:	1a9b      	subs	r3, r3, r2
 8001258:	009b      	lsls	r3, r3, #2
 800125a:	440b      	add	r3, r1
 800125c:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8001260:	2200      	movs	r2, #0
 8001262:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001264:	7bfa      	ldrb	r2, [r7, #15]
 8001266:	6879      	ldr	r1, [r7, #4]
 8001268:	4613      	mov	r3, r2
 800126a:	00db      	lsls	r3, r3, #3
 800126c:	1a9b      	subs	r3, r3, r2
 800126e:	009b      	lsls	r3, r3, #2
 8001270:	440b      	add	r3, r1
 8001272:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8001276:	7bfa      	ldrb	r2, [r7, #15]
 8001278:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800127a:	7bfa      	ldrb	r2, [r7, #15]
 800127c:	6879      	ldr	r1, [r7, #4]
 800127e:	4613      	mov	r3, r2
 8001280:	00db      	lsls	r3, r3, #3
 8001282:	1a9b      	subs	r3, r3, r2
 8001284:	009b      	lsls	r3, r3, #2
 8001286:	440b      	add	r3, r1
 8001288:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800128c:	2200      	movs	r2, #0
 800128e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001290:	7bfa      	ldrb	r2, [r7, #15]
 8001292:	6879      	ldr	r1, [r7, #4]
 8001294:	4613      	mov	r3, r2
 8001296:	00db      	lsls	r3, r3, #3
 8001298:	1a9b      	subs	r3, r3, r2
 800129a:	009b      	lsls	r3, r3, #2
 800129c:	440b      	add	r3, r1
 800129e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80012a2:	2200      	movs	r2, #0
 80012a4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80012a6:	7bfa      	ldrb	r2, [r7, #15]
 80012a8:	6879      	ldr	r1, [r7, #4]
 80012aa:	4613      	mov	r3, r2
 80012ac:	00db      	lsls	r3, r3, #3
 80012ae:	1a9b      	subs	r3, r3, r2
 80012b0:	009b      	lsls	r3, r3, #2
 80012b2:	440b      	add	r3, r1
 80012b4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80012b8:	2200      	movs	r2, #0
 80012ba:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80012bc:	7bfa      	ldrb	r2, [r7, #15]
 80012be:	6879      	ldr	r1, [r7, #4]
 80012c0:	4613      	mov	r3, r2
 80012c2:	00db      	lsls	r3, r3, #3
 80012c4:	1a9b      	subs	r3, r3, r2
 80012c6:	009b      	lsls	r3, r3, #2
 80012c8:	440b      	add	r3, r1
 80012ca:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80012ce:	2200      	movs	r2, #0
 80012d0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80012d2:	7bfb      	ldrb	r3, [r7, #15]
 80012d4:	3301      	adds	r3, #1
 80012d6:	73fb      	strb	r3, [r7, #15]
 80012d8:	7bfa      	ldrb	r2, [r7, #15]
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	685b      	ldr	r3, [r3, #4]
 80012de:	429a      	cmp	r2, r3
 80012e0:	d3b5      	bcc.n	800124e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	603b      	str	r3, [r7, #0]
 80012e8:	687e      	ldr	r6, [r7, #4]
 80012ea:	466d      	mov	r5, sp
 80012ec:	f106 0410 	add.w	r4, r6, #16
 80012f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012f2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80012f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012f6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80012f8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80012fc:	e885 0003 	stmia.w	r5, {r0, r1}
 8001300:	1d33      	adds	r3, r6, #4
 8001302:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001304:	6838      	ldr	r0, [r7, #0]
 8001306:	f001 fe3f 	bl	8002f88 <USB_DevInit>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d005      	beq.n	800131c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	2202      	movs	r2, #2
 8001314:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001318:	2301      	movs	r3, #1
 800131a:	e00d      	b.n	8001338 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	2200      	movs	r2, #0
 8001320:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	2201      	movs	r2, #1
 8001328:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4618      	mov	r0, r3
 8001332:	f002 febb 	bl	80040ac <USB_DevDisconnect>

  return HAL_OK;
 8001336:	2300      	movs	r3, #0
}
 8001338:	4618      	mov	r0, r3
 800133a:	3714      	adds	r7, #20
 800133c:	46bd      	mov	sp, r7
 800133e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001340 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b084      	sub	sp, #16
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001354:	2b01      	cmp	r3, #1
 8001356:	d101      	bne.n	800135c <HAL_PCD_Start+0x1c>
 8001358:	2302      	movs	r3, #2
 800135a:	e020      	b.n	800139e <HAL_PCD_Start+0x5e>
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	2201      	movs	r2, #1
 8001360:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001368:	2b01      	cmp	r3, #1
 800136a:	d109      	bne.n	8001380 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001370:	2b01      	cmp	r3, #1
 8001372:	d005      	beq.n	8001380 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001378:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	4618      	mov	r0, r3
 8001386:	f001 fd91 	bl	8002eac <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	4618      	mov	r0, r3
 8001390:	f002 fe6b 	bl	800406a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	2200      	movs	r2, #0
 8001398:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800139c:	2300      	movs	r3, #0
}
 800139e:	4618      	mov	r0, r3
 80013a0:	3710      	adds	r7, #16
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}

080013a6 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80013a6:	b590      	push	{r4, r7, lr}
 80013a8:	b08d      	sub	sp, #52	; 0x34
 80013aa:	af00      	add	r7, sp, #0
 80013ac:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80013b4:	6a3b      	ldr	r3, [r7, #32]
 80013b6:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4618      	mov	r0, r3
 80013be:	f002 ff29 	bl	8004214 <USB_GetMode>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	f040 839d 	bne.w	8001b04 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	4618      	mov	r0, r3
 80013d0:	f002 fe8d 	bl	80040ee <USB_ReadInterrupts>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	f000 8393 	beq.w	8001b02 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4618      	mov	r0, r3
 80013e2:	f002 fe84 	bl	80040ee <USB_ReadInterrupts>
 80013e6:	4603      	mov	r3, r0
 80013e8:	f003 0302 	and.w	r3, r3, #2
 80013ec:	2b02      	cmp	r3, #2
 80013ee:	d107      	bne.n	8001400 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	695a      	ldr	r2, [r3, #20]
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f002 0202 	and.w	r2, r2, #2
 80013fe:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4618      	mov	r0, r3
 8001406:	f002 fe72 	bl	80040ee <USB_ReadInterrupts>
 800140a:	4603      	mov	r3, r0
 800140c:	f003 0310 	and.w	r3, r3, #16
 8001410:	2b10      	cmp	r3, #16
 8001412:	d161      	bne.n	80014d8 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	699a      	ldr	r2, [r3, #24]
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f022 0210 	bic.w	r2, r2, #16
 8001422:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8001424:	6a3b      	ldr	r3, [r7, #32]
 8001426:	6a1b      	ldr	r3, [r3, #32]
 8001428:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800142a:	69bb      	ldr	r3, [r7, #24]
 800142c:	f003 020f 	and.w	r2, r3, #15
 8001430:	4613      	mov	r3, r2
 8001432:	00db      	lsls	r3, r3, #3
 8001434:	1a9b      	subs	r3, r3, r2
 8001436:	009b      	lsls	r3, r3, #2
 8001438:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800143c:	687a      	ldr	r2, [r7, #4]
 800143e:	4413      	add	r3, r2
 8001440:	3304      	adds	r3, #4
 8001442:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001444:	69bb      	ldr	r3, [r7, #24]
 8001446:	0c5b      	lsrs	r3, r3, #17
 8001448:	f003 030f 	and.w	r3, r3, #15
 800144c:	2b02      	cmp	r3, #2
 800144e:	d124      	bne.n	800149a <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001450:	69ba      	ldr	r2, [r7, #24]
 8001452:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001456:	4013      	ands	r3, r2
 8001458:	2b00      	cmp	r3, #0
 800145a:	d035      	beq.n	80014c8 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800145c:	697b      	ldr	r3, [r7, #20]
 800145e:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001460:	69bb      	ldr	r3, [r7, #24]
 8001462:	091b      	lsrs	r3, r3, #4
 8001464:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001466:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800146a:	b29b      	uxth	r3, r3
 800146c:	461a      	mov	r2, r3
 800146e:	6a38      	ldr	r0, [r7, #32]
 8001470:	f002 fca9 	bl	8003dc6 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001474:	697b      	ldr	r3, [r7, #20]
 8001476:	68da      	ldr	r2, [r3, #12]
 8001478:	69bb      	ldr	r3, [r7, #24]
 800147a:	091b      	lsrs	r3, r3, #4
 800147c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001480:	441a      	add	r2, r3
 8001482:	697b      	ldr	r3, [r7, #20]
 8001484:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001486:	697b      	ldr	r3, [r7, #20]
 8001488:	699a      	ldr	r2, [r3, #24]
 800148a:	69bb      	ldr	r3, [r7, #24]
 800148c:	091b      	lsrs	r3, r3, #4
 800148e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001492:	441a      	add	r2, r3
 8001494:	697b      	ldr	r3, [r7, #20]
 8001496:	619a      	str	r2, [r3, #24]
 8001498:	e016      	b.n	80014c8 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800149a:	69bb      	ldr	r3, [r7, #24]
 800149c:	0c5b      	lsrs	r3, r3, #17
 800149e:	f003 030f 	and.w	r3, r3, #15
 80014a2:	2b06      	cmp	r3, #6
 80014a4:	d110      	bne.n	80014c8 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80014ac:	2208      	movs	r2, #8
 80014ae:	4619      	mov	r1, r3
 80014b0:	6a38      	ldr	r0, [r7, #32]
 80014b2:	f002 fc88 	bl	8003dc6 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80014b6:	697b      	ldr	r3, [r7, #20]
 80014b8:	699a      	ldr	r2, [r3, #24]
 80014ba:	69bb      	ldr	r3, [r7, #24]
 80014bc:	091b      	lsrs	r3, r3, #4
 80014be:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80014c2:	441a      	add	r2, r3
 80014c4:	697b      	ldr	r3, [r7, #20]
 80014c6:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	699a      	ldr	r2, [r3, #24]
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f042 0210 	orr.w	r2, r2, #16
 80014d6:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4618      	mov	r0, r3
 80014de:	f002 fe06 	bl	80040ee <USB_ReadInterrupts>
 80014e2:	4603      	mov	r3, r0
 80014e4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80014e8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80014ec:	d16e      	bne.n	80015cc <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80014ee:	2300      	movs	r3, #0
 80014f0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	4618      	mov	r0, r3
 80014f8:	f002 fe0c 	bl	8004114 <USB_ReadDevAllOutEpInterrupt>
 80014fc:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80014fe:	e062      	b.n	80015c6 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001502:	f003 0301 	and.w	r3, r3, #1
 8001506:	2b00      	cmp	r3, #0
 8001508:	d057      	beq.n	80015ba <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001510:	b2d2      	uxtb	r2, r2
 8001512:	4611      	mov	r1, r2
 8001514:	4618      	mov	r0, r3
 8001516:	f002 fe31 	bl	800417c <USB_ReadDevOutEPInterrupt>
 800151a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800151c:	693b      	ldr	r3, [r7, #16]
 800151e:	f003 0301 	and.w	r3, r3, #1
 8001522:	2b00      	cmp	r3, #0
 8001524:	d00c      	beq.n	8001540 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001528:	015a      	lsls	r2, r3, #5
 800152a:	69fb      	ldr	r3, [r7, #28]
 800152c:	4413      	add	r3, r2
 800152e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001532:	461a      	mov	r2, r3
 8001534:	2301      	movs	r3, #1
 8001536:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001538:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800153a:	6878      	ldr	r0, [r7, #4]
 800153c:	f000 fdb0 	bl	80020a0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001540:	693b      	ldr	r3, [r7, #16]
 8001542:	f003 0308 	and.w	r3, r3, #8
 8001546:	2b00      	cmp	r3, #0
 8001548:	d00c      	beq.n	8001564 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800154a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800154c:	015a      	lsls	r2, r3, #5
 800154e:	69fb      	ldr	r3, [r7, #28]
 8001550:	4413      	add	r3, r2
 8001552:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001556:	461a      	mov	r2, r3
 8001558:	2308      	movs	r3, #8
 800155a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800155c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800155e:	6878      	ldr	r0, [r7, #4]
 8001560:	f000 feaa 	bl	80022b8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001564:	693b      	ldr	r3, [r7, #16]
 8001566:	f003 0310 	and.w	r3, r3, #16
 800156a:	2b00      	cmp	r3, #0
 800156c:	d008      	beq.n	8001580 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800156e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001570:	015a      	lsls	r2, r3, #5
 8001572:	69fb      	ldr	r3, [r7, #28]
 8001574:	4413      	add	r3, r2
 8001576:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800157a:	461a      	mov	r2, r3
 800157c:	2310      	movs	r3, #16
 800157e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001580:	693b      	ldr	r3, [r7, #16]
 8001582:	f003 0320 	and.w	r3, r3, #32
 8001586:	2b00      	cmp	r3, #0
 8001588:	d008      	beq.n	800159c <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800158a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800158c:	015a      	lsls	r2, r3, #5
 800158e:	69fb      	ldr	r3, [r7, #28]
 8001590:	4413      	add	r3, r2
 8001592:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001596:	461a      	mov	r2, r3
 8001598:	2320      	movs	r3, #32
 800159a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800159c:	693b      	ldr	r3, [r7, #16]
 800159e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d009      	beq.n	80015ba <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80015a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015a8:	015a      	lsls	r2, r3, #5
 80015aa:	69fb      	ldr	r3, [r7, #28]
 80015ac:	4413      	add	r3, r2
 80015ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80015b2:	461a      	mov	r2, r3
 80015b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015b8:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80015ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015bc:	3301      	adds	r3, #1
 80015be:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80015c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015c2:	085b      	lsrs	r3, r3, #1
 80015c4:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80015c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d199      	bne.n	8001500 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4618      	mov	r0, r3
 80015d2:	f002 fd8c 	bl	80040ee <USB_ReadInterrupts>
 80015d6:	4603      	mov	r3, r0
 80015d8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80015dc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80015e0:	f040 80c0 	bne.w	8001764 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4618      	mov	r0, r3
 80015ea:	f002 fdad 	bl	8004148 <USB_ReadDevAllInEpInterrupt>
 80015ee:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80015f0:	2300      	movs	r3, #0
 80015f2:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80015f4:	e0b2      	b.n	800175c <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80015f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015f8:	f003 0301 	and.w	r3, r3, #1
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	f000 80a7 	beq.w	8001750 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001608:	b2d2      	uxtb	r2, r2
 800160a:	4611      	mov	r1, r2
 800160c:	4618      	mov	r0, r3
 800160e:	f002 fdd3 	bl	80041b8 <USB_ReadDevInEPInterrupt>
 8001612:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001614:	693b      	ldr	r3, [r7, #16]
 8001616:	f003 0301 	and.w	r3, r3, #1
 800161a:	2b00      	cmp	r3, #0
 800161c:	d057      	beq.n	80016ce <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800161e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001620:	f003 030f 	and.w	r3, r3, #15
 8001624:	2201      	movs	r2, #1
 8001626:	fa02 f303 	lsl.w	r3, r2, r3
 800162a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800162c:	69fb      	ldr	r3, [r7, #28]
 800162e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001632:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	43db      	mvns	r3, r3
 8001638:	69f9      	ldr	r1, [r7, #28]
 800163a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800163e:	4013      	ands	r3, r2
 8001640:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001644:	015a      	lsls	r2, r3, #5
 8001646:	69fb      	ldr	r3, [r7, #28]
 8001648:	4413      	add	r3, r2
 800164a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800164e:	461a      	mov	r2, r3
 8001650:	2301      	movs	r3, #1
 8001652:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	691b      	ldr	r3, [r3, #16]
 8001658:	2b01      	cmp	r3, #1
 800165a:	d132      	bne.n	80016c2 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800165c:	6879      	ldr	r1, [r7, #4]
 800165e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001660:	4613      	mov	r3, r2
 8001662:	00db      	lsls	r3, r3, #3
 8001664:	1a9b      	subs	r3, r3, r2
 8001666:	009b      	lsls	r3, r3, #2
 8001668:	440b      	add	r3, r1
 800166a:	3348      	adds	r3, #72	; 0x48
 800166c:	6819      	ldr	r1, [r3, #0]
 800166e:	6878      	ldr	r0, [r7, #4]
 8001670:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001672:	4613      	mov	r3, r2
 8001674:	00db      	lsls	r3, r3, #3
 8001676:	1a9b      	subs	r3, r3, r2
 8001678:	009b      	lsls	r3, r3, #2
 800167a:	4403      	add	r3, r0
 800167c:	3344      	adds	r3, #68	; 0x44
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4419      	add	r1, r3
 8001682:	6878      	ldr	r0, [r7, #4]
 8001684:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001686:	4613      	mov	r3, r2
 8001688:	00db      	lsls	r3, r3, #3
 800168a:	1a9b      	subs	r3, r3, r2
 800168c:	009b      	lsls	r3, r3, #2
 800168e:	4403      	add	r3, r0
 8001690:	3348      	adds	r3, #72	; 0x48
 8001692:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001696:	2b00      	cmp	r3, #0
 8001698:	d113      	bne.n	80016c2 <HAL_PCD_IRQHandler+0x31c>
 800169a:	6879      	ldr	r1, [r7, #4]
 800169c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800169e:	4613      	mov	r3, r2
 80016a0:	00db      	lsls	r3, r3, #3
 80016a2:	1a9b      	subs	r3, r3, r2
 80016a4:	009b      	lsls	r3, r3, #2
 80016a6:	440b      	add	r3, r1
 80016a8:	3350      	adds	r3, #80	; 0x50
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d108      	bne.n	80016c2 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6818      	ldr	r0, [r3, #0]
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80016ba:	461a      	mov	r2, r3
 80016bc:	2101      	movs	r1, #1
 80016be:	f002 fddb 	bl	8004278 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80016c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016c4:	b2db      	uxtb	r3, r3
 80016c6:	4619      	mov	r1, r3
 80016c8:	6878      	ldr	r0, [r7, #4]
 80016ca:	f004 fd44 	bl	8006156 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80016ce:	693b      	ldr	r3, [r7, #16]
 80016d0:	f003 0308 	and.w	r3, r3, #8
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d008      	beq.n	80016ea <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80016d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016da:	015a      	lsls	r2, r3, #5
 80016dc:	69fb      	ldr	r3, [r7, #28]
 80016de:	4413      	add	r3, r2
 80016e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80016e4:	461a      	mov	r2, r3
 80016e6:	2308      	movs	r3, #8
 80016e8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80016ea:	693b      	ldr	r3, [r7, #16]
 80016ec:	f003 0310 	and.w	r3, r3, #16
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d008      	beq.n	8001706 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80016f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016f6:	015a      	lsls	r2, r3, #5
 80016f8:	69fb      	ldr	r3, [r7, #28]
 80016fa:	4413      	add	r3, r2
 80016fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001700:	461a      	mov	r2, r3
 8001702:	2310      	movs	r3, #16
 8001704:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001706:	693b      	ldr	r3, [r7, #16]
 8001708:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800170c:	2b00      	cmp	r3, #0
 800170e:	d008      	beq.n	8001722 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001712:	015a      	lsls	r2, r3, #5
 8001714:	69fb      	ldr	r3, [r7, #28]
 8001716:	4413      	add	r3, r2
 8001718:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800171c:	461a      	mov	r2, r3
 800171e:	2340      	movs	r3, #64	; 0x40
 8001720:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001722:	693b      	ldr	r3, [r7, #16]
 8001724:	f003 0302 	and.w	r3, r3, #2
 8001728:	2b00      	cmp	r3, #0
 800172a:	d008      	beq.n	800173e <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800172c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800172e:	015a      	lsls	r2, r3, #5
 8001730:	69fb      	ldr	r3, [r7, #28]
 8001732:	4413      	add	r3, r2
 8001734:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001738:	461a      	mov	r2, r3
 800173a:	2302      	movs	r3, #2
 800173c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800173e:	693b      	ldr	r3, [r7, #16]
 8001740:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001744:	2b00      	cmp	r3, #0
 8001746:	d003      	beq.n	8001750 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001748:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800174a:	6878      	ldr	r0, [r7, #4]
 800174c:	f000 fc1b 	bl	8001f86 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001752:	3301      	adds	r3, #1
 8001754:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001756:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001758:	085b      	lsrs	r3, r3, #1
 800175a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800175c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800175e:	2b00      	cmp	r3, #0
 8001760:	f47f af49 	bne.w	80015f6 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4618      	mov	r0, r3
 800176a:	f002 fcc0 	bl	80040ee <USB_ReadInterrupts>
 800176e:	4603      	mov	r3, r0
 8001770:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001774:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001778:	d122      	bne.n	80017c0 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800177a:	69fb      	ldr	r3, [r7, #28]
 800177c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	69fa      	ldr	r2, [r7, #28]
 8001784:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001788:	f023 0301 	bic.w	r3, r3, #1
 800178c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8001794:	2b01      	cmp	r3, #1
 8001796:	d108      	bne.n	80017aa <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	2200      	movs	r2, #0
 800179c:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80017a0:	2100      	movs	r1, #0
 80017a2:	6878      	ldr	r0, [r7, #4]
 80017a4:	f000 fe26 	bl	80023f4 <HAL_PCDEx_LPM_Callback>
 80017a8:	e002      	b.n	80017b0 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80017aa:	6878      	ldr	r0, [r7, #4]
 80017ac:	f004 fd4a 	bl	8006244 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	695a      	ldr	r2, [r3, #20]
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80017be:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4618      	mov	r0, r3
 80017c6:	f002 fc92 	bl	80040ee <USB_ReadInterrupts>
 80017ca:	4603      	mov	r3, r0
 80017cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80017d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80017d4:	d112      	bne.n	80017fc <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80017d6:	69fb      	ldr	r3, [r7, #28]
 80017d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80017dc:	689b      	ldr	r3, [r3, #8]
 80017de:	f003 0301 	and.w	r3, r3, #1
 80017e2:	2b01      	cmp	r3, #1
 80017e4:	d102      	bne.n	80017ec <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80017e6:	6878      	ldr	r0, [r7, #4]
 80017e8:	f004 fd06 	bl	80061f8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	695a      	ldr	r2, [r3, #20]
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80017fa:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4618      	mov	r0, r3
 8001802:	f002 fc74 	bl	80040ee <USB_ReadInterrupts>
 8001806:	4603      	mov	r3, r0
 8001808:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800180c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001810:	f040 80c7 	bne.w	80019a2 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001814:	69fb      	ldr	r3, [r7, #28]
 8001816:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	69fa      	ldr	r2, [r7, #28]
 800181e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001822:	f023 0301 	bic.w	r3, r3, #1
 8001826:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	2110      	movs	r1, #16
 800182e:	4618      	mov	r0, r3
 8001830:	f001 fd0e 	bl	8003250 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001834:	2300      	movs	r3, #0
 8001836:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001838:	e056      	b.n	80018e8 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800183a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800183c:	015a      	lsls	r2, r3, #5
 800183e:	69fb      	ldr	r3, [r7, #28]
 8001840:	4413      	add	r3, r2
 8001842:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001846:	461a      	mov	r2, r3
 8001848:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800184c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800184e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001850:	015a      	lsls	r2, r3, #5
 8001852:	69fb      	ldr	r3, [r7, #28]
 8001854:	4413      	add	r3, r2
 8001856:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800185e:	0151      	lsls	r1, r2, #5
 8001860:	69fa      	ldr	r2, [r7, #28]
 8001862:	440a      	add	r2, r1
 8001864:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001868:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800186c:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800186e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001870:	015a      	lsls	r2, r3, #5
 8001872:	69fb      	ldr	r3, [r7, #28]
 8001874:	4413      	add	r3, r2
 8001876:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800187e:	0151      	lsls	r1, r2, #5
 8001880:	69fa      	ldr	r2, [r7, #28]
 8001882:	440a      	add	r2, r1
 8001884:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001888:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800188c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800188e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001890:	015a      	lsls	r2, r3, #5
 8001892:	69fb      	ldr	r3, [r7, #28]
 8001894:	4413      	add	r3, r2
 8001896:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800189a:	461a      	mov	r2, r3
 800189c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80018a0:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80018a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018a4:	015a      	lsls	r2, r3, #5
 80018a6:	69fb      	ldr	r3, [r7, #28]
 80018a8:	4413      	add	r3, r2
 80018aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80018b2:	0151      	lsls	r1, r2, #5
 80018b4:	69fa      	ldr	r2, [r7, #28]
 80018b6:	440a      	add	r2, r1
 80018b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80018bc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80018c0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80018c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018c4:	015a      	lsls	r2, r3, #5
 80018c6:	69fb      	ldr	r3, [r7, #28]
 80018c8:	4413      	add	r3, r2
 80018ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80018d2:	0151      	lsls	r1, r2, #5
 80018d4:	69fa      	ldr	r2, [r7, #28]
 80018d6:	440a      	add	r2, r1
 80018d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80018dc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80018e0:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80018e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018e4:	3301      	adds	r3, #1
 80018e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80018ee:	429a      	cmp	r2, r3
 80018f0:	d3a3      	bcc.n	800183a <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80018f2:	69fb      	ldr	r3, [r7, #28]
 80018f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80018f8:	69db      	ldr	r3, [r3, #28]
 80018fa:	69fa      	ldr	r2, [r7, #28]
 80018fc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001900:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001904:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800190a:	2b00      	cmp	r3, #0
 800190c:	d016      	beq.n	800193c <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800190e:	69fb      	ldr	r3, [r7, #28]
 8001910:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001914:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001918:	69fa      	ldr	r2, [r7, #28]
 800191a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800191e:	f043 030b 	orr.w	r3, r3, #11
 8001922:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001926:	69fb      	ldr	r3, [r7, #28]
 8001928:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800192c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800192e:	69fa      	ldr	r2, [r7, #28]
 8001930:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001934:	f043 030b 	orr.w	r3, r3, #11
 8001938:	6453      	str	r3, [r2, #68]	; 0x44
 800193a:	e015      	b.n	8001968 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800193c:	69fb      	ldr	r3, [r7, #28]
 800193e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001942:	695b      	ldr	r3, [r3, #20]
 8001944:	69fa      	ldr	r2, [r7, #28]
 8001946:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800194a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800194e:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8001952:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001954:	69fb      	ldr	r3, [r7, #28]
 8001956:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800195a:	691b      	ldr	r3, [r3, #16]
 800195c:	69fa      	ldr	r2, [r7, #28]
 800195e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001962:	f043 030b 	orr.w	r3, r3, #11
 8001966:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001968:	69fb      	ldr	r3, [r7, #28]
 800196a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	69fa      	ldr	r2, [r7, #28]
 8001972:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001976:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800197a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6818      	ldr	r0, [r3, #0]
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	691b      	ldr	r3, [r3, #16]
 8001984:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800198c:	461a      	mov	r2, r3
 800198e:	f002 fc73 	bl	8004278 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	695a      	ldr	r2, [r3, #20]
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80019a0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4618      	mov	r0, r3
 80019a8:	f002 fba1 	bl	80040ee <USB_ReadInterrupts>
 80019ac:	4603      	mov	r3, r0
 80019ae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80019b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80019b6:	d124      	bne.n	8001a02 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4618      	mov	r0, r3
 80019be:	f002 fc37 	bl	8004230 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4618      	mov	r0, r3
 80019c8:	f001 fc9f 	bl	800330a <USB_GetDevSpeed>
 80019cc:	4603      	mov	r3, r0
 80019ce:	461a      	mov	r2, r3
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681c      	ldr	r4, [r3, #0]
 80019d8:	f001 f958 	bl	8002c8c <HAL_RCC_GetHCLKFreq>
 80019dc:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80019e2:	b2db      	uxtb	r3, r3
 80019e4:	461a      	mov	r2, r3
 80019e6:	4620      	mov	r0, r4
 80019e8:	f001 f9be 	bl	8002d68 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80019ec:	6878      	ldr	r0, [r7, #4]
 80019ee:	f004 fbda 	bl	80061a6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	695a      	ldr	r2, [r3, #20]
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001a00:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4618      	mov	r0, r3
 8001a08:	f002 fb71 	bl	80040ee <USB_ReadInterrupts>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	f003 0308 	and.w	r3, r3, #8
 8001a12:	2b08      	cmp	r3, #8
 8001a14:	d10a      	bne.n	8001a2c <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001a16:	6878      	ldr	r0, [r7, #4]
 8001a18:	f004 fbb7 	bl	800618a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	695a      	ldr	r2, [r3, #20]
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f002 0208 	and.w	r2, r2, #8
 8001a2a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4618      	mov	r0, r3
 8001a32:	f002 fb5c 	bl	80040ee <USB_ReadInterrupts>
 8001a36:	4603      	mov	r3, r0
 8001a38:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a3c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001a40:	d10f      	bne.n	8001a62 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001a42:	2300      	movs	r3, #0
 8001a44:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a48:	b2db      	uxtb	r3, r3
 8001a4a:	4619      	mov	r1, r3
 8001a4c:	6878      	ldr	r0, [r7, #4]
 8001a4e:	f004 fc19 	bl	8006284 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	695a      	ldr	r2, [r3, #20]
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001a60:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4618      	mov	r0, r3
 8001a68:	f002 fb41 	bl	80040ee <USB_ReadInterrupts>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a72:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001a76:	d10f      	bne.n	8001a98 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a7e:	b2db      	uxtb	r3, r3
 8001a80:	4619      	mov	r1, r3
 8001a82:	6878      	ldr	r0, [r7, #4]
 8001a84:	f004 fbec 	bl	8006260 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	695a      	ldr	r2, [r3, #20]
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001a96:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f002 fb26 	bl	80040ee <USB_ReadInterrupts>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001aa8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001aac:	d10a      	bne.n	8001ac4 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001aae:	6878      	ldr	r0, [r7, #4]
 8001ab0:	f004 fbfa 	bl	80062a8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	695a      	ldr	r2, [r3, #20]
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001ac2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f002 fb10 	bl	80040ee <USB_ReadInterrupts>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	f003 0304 	and.w	r3, r3, #4
 8001ad4:	2b04      	cmp	r3, #4
 8001ad6:	d115      	bne.n	8001b04 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001ae0:	69bb      	ldr	r3, [r7, #24]
 8001ae2:	f003 0304 	and.w	r3, r3, #4
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d002      	beq.n	8001af0 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001aea:	6878      	ldr	r0, [r7, #4]
 8001aec:	f004 fbea 	bl	80062c4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	6859      	ldr	r1, [r3, #4]
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	69ba      	ldr	r2, [r7, #24]
 8001afc:	430a      	orrs	r2, r1
 8001afe:	605a      	str	r2, [r3, #4]
 8001b00:	e000      	b.n	8001b04 <HAL_PCD_IRQHandler+0x75e>
      return;
 8001b02:	bf00      	nop
    }
  }
}
 8001b04:	3734      	adds	r7, #52	; 0x34
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd90      	pop	{r4, r7, pc}

08001b0a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001b0a:	b580      	push	{r7, lr}
 8001b0c:	b082      	sub	sp, #8
 8001b0e:	af00      	add	r7, sp, #0
 8001b10:	6078      	str	r0, [r7, #4]
 8001b12:	460b      	mov	r3, r1
 8001b14:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001b1c:	2b01      	cmp	r3, #1
 8001b1e:	d101      	bne.n	8001b24 <HAL_PCD_SetAddress+0x1a>
 8001b20:	2302      	movs	r3, #2
 8001b22:	e013      	b.n	8001b4c <HAL_PCD_SetAddress+0x42>
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2201      	movs	r2, #1
 8001b28:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	78fa      	ldrb	r2, [r7, #3]
 8001b30:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	78fa      	ldrb	r2, [r7, #3]
 8001b3a:	4611      	mov	r1, r2
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f002 fa6e 	bl	800401e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	2200      	movs	r2, #0
 8001b46:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001b4a:	2300      	movs	r3, #0
}
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	3708      	adds	r7, #8
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd80      	pop	{r7, pc}

08001b54 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b084      	sub	sp, #16
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
 8001b5c:	4608      	mov	r0, r1
 8001b5e:	4611      	mov	r1, r2
 8001b60:	461a      	mov	r2, r3
 8001b62:	4603      	mov	r3, r0
 8001b64:	70fb      	strb	r3, [r7, #3]
 8001b66:	460b      	mov	r3, r1
 8001b68:	803b      	strh	r3, [r7, #0]
 8001b6a:	4613      	mov	r3, r2
 8001b6c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001b72:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	da0f      	bge.n	8001b9a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b7a:	78fb      	ldrb	r3, [r7, #3]
 8001b7c:	f003 020f 	and.w	r2, r3, #15
 8001b80:	4613      	mov	r3, r2
 8001b82:	00db      	lsls	r3, r3, #3
 8001b84:	1a9b      	subs	r3, r3, r2
 8001b86:	009b      	lsls	r3, r3, #2
 8001b88:	3338      	adds	r3, #56	; 0x38
 8001b8a:	687a      	ldr	r2, [r7, #4]
 8001b8c:	4413      	add	r3, r2
 8001b8e:	3304      	adds	r3, #4
 8001b90:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	2201      	movs	r2, #1
 8001b96:	705a      	strb	r2, [r3, #1]
 8001b98:	e00f      	b.n	8001bba <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001b9a:	78fb      	ldrb	r3, [r7, #3]
 8001b9c:	f003 020f 	and.w	r2, r3, #15
 8001ba0:	4613      	mov	r3, r2
 8001ba2:	00db      	lsls	r3, r3, #3
 8001ba4:	1a9b      	subs	r3, r3, r2
 8001ba6:	009b      	lsls	r3, r3, #2
 8001ba8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001bac:	687a      	ldr	r2, [r7, #4]
 8001bae:	4413      	add	r3, r2
 8001bb0:	3304      	adds	r3, #4
 8001bb2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001bba:	78fb      	ldrb	r3, [r7, #3]
 8001bbc:	f003 030f 	and.w	r3, r3, #15
 8001bc0:	b2da      	uxtb	r2, r3
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001bc6:	883a      	ldrh	r2, [r7, #0]
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	78ba      	ldrb	r2, [r7, #2]
 8001bd0:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	785b      	ldrb	r3, [r3, #1]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d004      	beq.n	8001be4 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	781b      	ldrb	r3, [r3, #0]
 8001bde:	b29a      	uxth	r2, r3
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001be4:	78bb      	ldrb	r3, [r7, #2]
 8001be6:	2b02      	cmp	r3, #2
 8001be8:	d102      	bne.n	8001bf0 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	2200      	movs	r2, #0
 8001bee:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001bf6:	2b01      	cmp	r3, #1
 8001bf8:	d101      	bne.n	8001bfe <HAL_PCD_EP_Open+0xaa>
 8001bfa:	2302      	movs	r3, #2
 8001bfc:	e00e      	b.n	8001c1c <HAL_PCD_EP_Open+0xc8>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2201      	movs	r2, #1
 8001c02:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	68f9      	ldr	r1, [r7, #12]
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f001 fba1 	bl	8003354 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2200      	movs	r2, #0
 8001c16:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8001c1a:	7afb      	ldrb	r3, [r7, #11]
}
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	3710      	adds	r7, #16
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}

08001c24 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b084      	sub	sp, #16
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
 8001c2c:	460b      	mov	r3, r1
 8001c2e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001c30:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	da0f      	bge.n	8001c58 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c38:	78fb      	ldrb	r3, [r7, #3]
 8001c3a:	f003 020f 	and.w	r2, r3, #15
 8001c3e:	4613      	mov	r3, r2
 8001c40:	00db      	lsls	r3, r3, #3
 8001c42:	1a9b      	subs	r3, r3, r2
 8001c44:	009b      	lsls	r3, r3, #2
 8001c46:	3338      	adds	r3, #56	; 0x38
 8001c48:	687a      	ldr	r2, [r7, #4]
 8001c4a:	4413      	add	r3, r2
 8001c4c:	3304      	adds	r3, #4
 8001c4e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	2201      	movs	r2, #1
 8001c54:	705a      	strb	r2, [r3, #1]
 8001c56:	e00f      	b.n	8001c78 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c58:	78fb      	ldrb	r3, [r7, #3]
 8001c5a:	f003 020f 	and.w	r2, r3, #15
 8001c5e:	4613      	mov	r3, r2
 8001c60:	00db      	lsls	r3, r3, #3
 8001c62:	1a9b      	subs	r3, r3, r2
 8001c64:	009b      	lsls	r3, r3, #2
 8001c66:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001c6a:	687a      	ldr	r2, [r7, #4]
 8001c6c:	4413      	add	r3, r2
 8001c6e:	3304      	adds	r3, #4
 8001c70:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	2200      	movs	r2, #0
 8001c76:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001c78:	78fb      	ldrb	r3, [r7, #3]
 8001c7a:	f003 030f 	and.w	r3, r3, #15
 8001c7e:	b2da      	uxtb	r2, r3
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001c8a:	2b01      	cmp	r3, #1
 8001c8c:	d101      	bne.n	8001c92 <HAL_PCD_EP_Close+0x6e>
 8001c8e:	2302      	movs	r3, #2
 8001c90:	e00e      	b.n	8001cb0 <HAL_PCD_EP_Close+0x8c>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2201      	movs	r2, #1
 8001c96:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	68f9      	ldr	r1, [r7, #12]
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f001 fbdf 	bl	8003464 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2200      	movs	r2, #0
 8001caa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8001cae:	2300      	movs	r3, #0
}
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	3710      	adds	r7, #16
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}

08001cb8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b086      	sub	sp, #24
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	60f8      	str	r0, [r7, #12]
 8001cc0:	607a      	str	r2, [r7, #4]
 8001cc2:	603b      	str	r3, [r7, #0]
 8001cc4:	460b      	mov	r3, r1
 8001cc6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001cc8:	7afb      	ldrb	r3, [r7, #11]
 8001cca:	f003 020f 	and.w	r2, r3, #15
 8001cce:	4613      	mov	r3, r2
 8001cd0:	00db      	lsls	r3, r3, #3
 8001cd2:	1a9b      	subs	r3, r3, r2
 8001cd4:	009b      	lsls	r3, r3, #2
 8001cd6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001cda:	68fa      	ldr	r2, [r7, #12]
 8001cdc:	4413      	add	r3, r2
 8001cde:	3304      	adds	r3, #4
 8001ce0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001ce2:	697b      	ldr	r3, [r7, #20]
 8001ce4:	687a      	ldr	r2, [r7, #4]
 8001ce6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001ce8:	697b      	ldr	r3, [r7, #20]
 8001cea:	683a      	ldr	r2, [r7, #0]
 8001cec:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001cee:	697b      	ldr	r3, [r7, #20]
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8001cf4:	697b      	ldr	r3, [r7, #20]
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001cfa:	7afb      	ldrb	r3, [r7, #11]
 8001cfc:	f003 030f 	and.w	r3, r3, #15
 8001d00:	b2da      	uxtb	r2, r3
 8001d02:	697b      	ldr	r3, [r7, #20]
 8001d04:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	691b      	ldr	r3, [r3, #16]
 8001d0a:	2b01      	cmp	r3, #1
 8001d0c:	d102      	bne.n	8001d14 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001d0e:	687a      	ldr	r2, [r7, #4]
 8001d10:	697b      	ldr	r3, [r7, #20]
 8001d12:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001d14:	7afb      	ldrb	r3, [r7, #11]
 8001d16:	f003 030f 	and.w	r3, r3, #15
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d109      	bne.n	8001d32 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	6818      	ldr	r0, [r3, #0]
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	691b      	ldr	r3, [r3, #16]
 8001d26:	b2db      	uxtb	r3, r3
 8001d28:	461a      	mov	r2, r3
 8001d2a:	6979      	ldr	r1, [r7, #20]
 8001d2c:	f001 feba 	bl	8003aa4 <USB_EP0StartXfer>
 8001d30:	e008      	b.n	8001d44 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	6818      	ldr	r0, [r3, #0]
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	691b      	ldr	r3, [r3, #16]
 8001d3a:	b2db      	uxtb	r3, r3
 8001d3c:	461a      	mov	r2, r3
 8001d3e:	6979      	ldr	r1, [r7, #20]
 8001d40:	f001 fc6c 	bl	800361c <USB_EPStartXfer>
  }

  return HAL_OK;
 8001d44:	2300      	movs	r3, #0
}
 8001d46:	4618      	mov	r0, r3
 8001d48:	3718      	adds	r7, #24
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}

08001d4e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001d4e:	b480      	push	{r7}
 8001d50:	b083      	sub	sp, #12
 8001d52:	af00      	add	r7, sp, #0
 8001d54:	6078      	str	r0, [r7, #4]
 8001d56:	460b      	mov	r3, r1
 8001d58:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001d5a:	78fb      	ldrb	r3, [r7, #3]
 8001d5c:	f003 020f 	and.w	r2, r3, #15
 8001d60:	6879      	ldr	r1, [r7, #4]
 8001d62:	4613      	mov	r3, r2
 8001d64:	00db      	lsls	r3, r3, #3
 8001d66:	1a9b      	subs	r3, r3, r2
 8001d68:	009b      	lsls	r3, r3, #2
 8001d6a:	440b      	add	r3, r1
 8001d6c:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8001d70:	681b      	ldr	r3, [r3, #0]
}
 8001d72:	4618      	mov	r0, r3
 8001d74:	370c      	adds	r7, #12
 8001d76:	46bd      	mov	sp, r7
 8001d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7c:	4770      	bx	lr

08001d7e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001d7e:	b580      	push	{r7, lr}
 8001d80:	b086      	sub	sp, #24
 8001d82:	af00      	add	r7, sp, #0
 8001d84:	60f8      	str	r0, [r7, #12]
 8001d86:	607a      	str	r2, [r7, #4]
 8001d88:	603b      	str	r3, [r7, #0]
 8001d8a:	460b      	mov	r3, r1
 8001d8c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d8e:	7afb      	ldrb	r3, [r7, #11]
 8001d90:	f003 020f 	and.w	r2, r3, #15
 8001d94:	4613      	mov	r3, r2
 8001d96:	00db      	lsls	r3, r3, #3
 8001d98:	1a9b      	subs	r3, r3, r2
 8001d9a:	009b      	lsls	r3, r3, #2
 8001d9c:	3338      	adds	r3, #56	; 0x38
 8001d9e:	68fa      	ldr	r2, [r7, #12]
 8001da0:	4413      	add	r3, r2
 8001da2:	3304      	adds	r3, #4
 8001da4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001da6:	697b      	ldr	r3, [r7, #20]
 8001da8:	687a      	ldr	r2, [r7, #4]
 8001daa:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001dac:	697b      	ldr	r3, [r7, #20]
 8001dae:	683a      	ldr	r2, [r7, #0]
 8001db0:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001db2:	697b      	ldr	r3, [r7, #20]
 8001db4:	2200      	movs	r2, #0
 8001db6:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8001db8:	697b      	ldr	r3, [r7, #20]
 8001dba:	2201      	movs	r2, #1
 8001dbc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001dbe:	7afb      	ldrb	r3, [r7, #11]
 8001dc0:	f003 030f 	and.w	r3, r3, #15
 8001dc4:	b2da      	uxtb	r2, r3
 8001dc6:	697b      	ldr	r3, [r7, #20]
 8001dc8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	691b      	ldr	r3, [r3, #16]
 8001dce:	2b01      	cmp	r3, #1
 8001dd0:	d102      	bne.n	8001dd8 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001dd2:	687a      	ldr	r2, [r7, #4]
 8001dd4:	697b      	ldr	r3, [r7, #20]
 8001dd6:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001dd8:	7afb      	ldrb	r3, [r7, #11]
 8001dda:	f003 030f 	and.w	r3, r3, #15
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d109      	bne.n	8001df6 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	6818      	ldr	r0, [r3, #0]
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	691b      	ldr	r3, [r3, #16]
 8001dea:	b2db      	uxtb	r3, r3
 8001dec:	461a      	mov	r2, r3
 8001dee:	6979      	ldr	r1, [r7, #20]
 8001df0:	f001 fe58 	bl	8003aa4 <USB_EP0StartXfer>
 8001df4:	e008      	b.n	8001e08 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	6818      	ldr	r0, [r3, #0]
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	691b      	ldr	r3, [r3, #16]
 8001dfe:	b2db      	uxtb	r3, r3
 8001e00:	461a      	mov	r2, r3
 8001e02:	6979      	ldr	r1, [r7, #20]
 8001e04:	f001 fc0a 	bl	800361c <USB_EPStartXfer>
  }

  return HAL_OK;
 8001e08:	2300      	movs	r3, #0
}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	3718      	adds	r7, #24
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}

08001e12 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001e12:	b580      	push	{r7, lr}
 8001e14:	b084      	sub	sp, #16
 8001e16:	af00      	add	r7, sp, #0
 8001e18:	6078      	str	r0, [r7, #4]
 8001e1a:	460b      	mov	r3, r1
 8001e1c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001e1e:	78fb      	ldrb	r3, [r7, #3]
 8001e20:	f003 020f 	and.w	r2, r3, #15
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	429a      	cmp	r2, r3
 8001e2a:	d901      	bls.n	8001e30 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	e050      	b.n	8001ed2 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001e30:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	da0f      	bge.n	8001e58 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e38:	78fb      	ldrb	r3, [r7, #3]
 8001e3a:	f003 020f 	and.w	r2, r3, #15
 8001e3e:	4613      	mov	r3, r2
 8001e40:	00db      	lsls	r3, r3, #3
 8001e42:	1a9b      	subs	r3, r3, r2
 8001e44:	009b      	lsls	r3, r3, #2
 8001e46:	3338      	adds	r3, #56	; 0x38
 8001e48:	687a      	ldr	r2, [r7, #4]
 8001e4a:	4413      	add	r3, r2
 8001e4c:	3304      	adds	r3, #4
 8001e4e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	2201      	movs	r2, #1
 8001e54:	705a      	strb	r2, [r3, #1]
 8001e56:	e00d      	b.n	8001e74 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001e58:	78fa      	ldrb	r2, [r7, #3]
 8001e5a:	4613      	mov	r3, r2
 8001e5c:	00db      	lsls	r3, r3, #3
 8001e5e:	1a9b      	subs	r3, r3, r2
 8001e60:	009b      	lsls	r3, r3, #2
 8001e62:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001e66:	687a      	ldr	r2, [r7, #4]
 8001e68:	4413      	add	r3, r2
 8001e6a:	3304      	adds	r3, #4
 8001e6c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	2200      	movs	r2, #0
 8001e72:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	2201      	movs	r2, #1
 8001e78:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e7a:	78fb      	ldrb	r3, [r7, #3]
 8001e7c:	f003 030f 	and.w	r3, r3, #15
 8001e80:	b2da      	uxtb	r2, r3
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001e8c:	2b01      	cmp	r3, #1
 8001e8e:	d101      	bne.n	8001e94 <HAL_PCD_EP_SetStall+0x82>
 8001e90:	2302      	movs	r3, #2
 8001e92:	e01e      	b.n	8001ed2 <HAL_PCD_EP_SetStall+0xc0>
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2201      	movs	r2, #1
 8001e98:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	68f9      	ldr	r1, [r7, #12]
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	f001 ffe7 	bl	8003e76 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001ea8:	78fb      	ldrb	r3, [r7, #3]
 8001eaa:	f003 030f 	and.w	r3, r3, #15
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d10a      	bne.n	8001ec8 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6818      	ldr	r0, [r3, #0]
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	691b      	ldr	r3, [r3, #16]
 8001eba:	b2d9      	uxtb	r1, r3
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001ec2:	461a      	mov	r2, r3
 8001ec4:	f002 f9d8 	bl	8004278 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2200      	movs	r2, #0
 8001ecc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001ed0:	2300      	movs	r3, #0
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	3710      	adds	r7, #16
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}

08001eda <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001eda:	b580      	push	{r7, lr}
 8001edc:	b084      	sub	sp, #16
 8001ede:	af00      	add	r7, sp, #0
 8001ee0:	6078      	str	r0, [r7, #4]
 8001ee2:	460b      	mov	r3, r1
 8001ee4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001ee6:	78fb      	ldrb	r3, [r7, #3]
 8001ee8:	f003 020f 	and.w	r2, r3, #15
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	d901      	bls.n	8001ef8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	e042      	b.n	8001f7e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001ef8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	da0f      	bge.n	8001f20 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f00:	78fb      	ldrb	r3, [r7, #3]
 8001f02:	f003 020f 	and.w	r2, r3, #15
 8001f06:	4613      	mov	r3, r2
 8001f08:	00db      	lsls	r3, r3, #3
 8001f0a:	1a9b      	subs	r3, r3, r2
 8001f0c:	009b      	lsls	r3, r3, #2
 8001f0e:	3338      	adds	r3, #56	; 0x38
 8001f10:	687a      	ldr	r2, [r7, #4]
 8001f12:	4413      	add	r3, r2
 8001f14:	3304      	adds	r3, #4
 8001f16:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	705a      	strb	r2, [r3, #1]
 8001f1e:	e00f      	b.n	8001f40 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f20:	78fb      	ldrb	r3, [r7, #3]
 8001f22:	f003 020f 	and.w	r2, r3, #15
 8001f26:	4613      	mov	r3, r2
 8001f28:	00db      	lsls	r3, r3, #3
 8001f2a:	1a9b      	subs	r3, r3, r2
 8001f2c:	009b      	lsls	r3, r3, #2
 8001f2e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001f32:	687a      	ldr	r2, [r7, #4]
 8001f34:	4413      	add	r3, r2
 8001f36:	3304      	adds	r3, #4
 8001f38:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	2200      	movs	r2, #0
 8001f44:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f46:	78fb      	ldrb	r3, [r7, #3]
 8001f48:	f003 030f 	and.w	r3, r3, #15
 8001f4c:	b2da      	uxtb	r2, r3
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001f58:	2b01      	cmp	r3, #1
 8001f5a:	d101      	bne.n	8001f60 <HAL_PCD_EP_ClrStall+0x86>
 8001f5c:	2302      	movs	r3, #2
 8001f5e:	e00e      	b.n	8001f7e <HAL_PCD_EP_ClrStall+0xa4>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2201      	movs	r2, #1
 8001f64:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	68f9      	ldr	r1, [r7, #12]
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f001 ffef 	bl	8003f52 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2200      	movs	r2, #0
 8001f78:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001f7c:	2300      	movs	r3, #0
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	3710      	adds	r7, #16
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}

08001f86 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001f86:	b580      	push	{r7, lr}
 8001f88:	b08a      	sub	sp, #40	; 0x28
 8001f8a:	af02      	add	r7, sp, #8
 8001f8c:	6078      	str	r0, [r7, #4]
 8001f8e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001f96:	697b      	ldr	r3, [r7, #20]
 8001f98:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8001f9a:	683a      	ldr	r2, [r7, #0]
 8001f9c:	4613      	mov	r3, r2
 8001f9e:	00db      	lsls	r3, r3, #3
 8001fa0:	1a9b      	subs	r3, r3, r2
 8001fa2:	009b      	lsls	r3, r3, #2
 8001fa4:	3338      	adds	r3, #56	; 0x38
 8001fa6:	687a      	ldr	r2, [r7, #4]
 8001fa8:	4413      	add	r3, r2
 8001faa:	3304      	adds	r3, #4
 8001fac:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	699a      	ldr	r2, [r3, #24]
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	695b      	ldr	r3, [r3, #20]
 8001fb6:	429a      	cmp	r2, r3
 8001fb8:	d901      	bls.n	8001fbe <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	e06c      	b.n	8002098 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	695a      	ldr	r2, [r3, #20]
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	699b      	ldr	r3, [r3, #24]
 8001fc6:	1ad3      	subs	r3, r2, r3
 8001fc8:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	689b      	ldr	r3, [r3, #8]
 8001fce:	69fa      	ldr	r2, [r7, #28]
 8001fd0:	429a      	cmp	r2, r3
 8001fd2:	d902      	bls.n	8001fda <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	689b      	ldr	r3, [r3, #8]
 8001fd8:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8001fda:	69fb      	ldr	r3, [r7, #28]
 8001fdc:	3303      	adds	r3, #3
 8001fde:	089b      	lsrs	r3, r3, #2
 8001fe0:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001fe2:	e02b      	b.n	800203c <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	695a      	ldr	r2, [r3, #20]
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	699b      	ldr	r3, [r3, #24]
 8001fec:	1ad3      	subs	r3, r2, r3
 8001fee:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	689b      	ldr	r3, [r3, #8]
 8001ff4:	69fa      	ldr	r2, [r7, #28]
 8001ff6:	429a      	cmp	r2, r3
 8001ff8:	d902      	bls.n	8002000 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	689b      	ldr	r3, [r3, #8]
 8001ffe:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002000:	69fb      	ldr	r3, [r7, #28]
 8002002:	3303      	adds	r3, #3
 8002004:	089b      	lsrs	r3, r3, #2
 8002006:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	68d9      	ldr	r1, [r3, #12]
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	b2da      	uxtb	r2, r3
 8002010:	69fb      	ldr	r3, [r7, #28]
 8002012:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002018:	b2db      	uxtb	r3, r3
 800201a:	9300      	str	r3, [sp, #0]
 800201c:	4603      	mov	r3, r0
 800201e:	6978      	ldr	r0, [r7, #20]
 8002020:	f001 fe93 	bl	8003d4a <USB_WritePacket>

    ep->xfer_buff  += len;
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	68da      	ldr	r2, [r3, #12]
 8002028:	69fb      	ldr	r3, [r7, #28]
 800202a:	441a      	add	r2, r3
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	699a      	ldr	r2, [r3, #24]
 8002034:	69fb      	ldr	r3, [r7, #28]
 8002036:	441a      	add	r2, r3
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	015a      	lsls	r2, r3, #5
 8002040:	693b      	ldr	r3, [r7, #16]
 8002042:	4413      	add	r3, r2
 8002044:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002048:	699b      	ldr	r3, [r3, #24]
 800204a:	b29b      	uxth	r3, r3
 800204c:	69ba      	ldr	r2, [r7, #24]
 800204e:	429a      	cmp	r2, r3
 8002050:	d809      	bhi.n	8002066 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	699a      	ldr	r2, [r3, #24]
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800205a:	429a      	cmp	r2, r3
 800205c:	d203      	bcs.n	8002066 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	695b      	ldr	r3, [r3, #20]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d1be      	bne.n	8001fe4 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	695a      	ldr	r2, [r3, #20]
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	699b      	ldr	r3, [r3, #24]
 800206e:	429a      	cmp	r2, r3
 8002070:	d811      	bhi.n	8002096 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	f003 030f 	and.w	r3, r3, #15
 8002078:	2201      	movs	r2, #1
 800207a:	fa02 f303 	lsl.w	r3, r2, r3
 800207e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002080:	693b      	ldr	r3, [r7, #16]
 8002082:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002086:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002088:	68bb      	ldr	r3, [r7, #8]
 800208a:	43db      	mvns	r3, r3
 800208c:	6939      	ldr	r1, [r7, #16]
 800208e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002092:	4013      	ands	r3, r2
 8002094:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002096:	2300      	movs	r3, #0
}
 8002098:	4618      	mov	r0, r3
 800209a:	3720      	adds	r7, #32
 800209c:	46bd      	mov	sp, r7
 800209e:	bd80      	pop	{r7, pc}

080020a0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b086      	sub	sp, #24
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
 80020a8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80020b0:	697b      	ldr	r3, [r7, #20]
 80020b2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80020b4:	697b      	ldr	r3, [r7, #20]
 80020b6:	333c      	adds	r3, #60	; 0x3c
 80020b8:	3304      	adds	r3, #4
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	015a      	lsls	r2, r3, #5
 80020c2:	693b      	ldr	r3, [r7, #16]
 80020c4:	4413      	add	r3, r2
 80020c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80020ca:	689b      	ldr	r3, [r3, #8]
 80020cc:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	691b      	ldr	r3, [r3, #16]
 80020d2:	2b01      	cmp	r3, #1
 80020d4:	f040 80a0 	bne.w	8002218 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80020d8:	68bb      	ldr	r3, [r7, #8]
 80020da:	f003 0308 	and.w	r3, r3, #8
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d015      	beq.n	800210e <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	4a72      	ldr	r2, [pc, #456]	; (80022b0 <PCD_EP_OutXfrComplete_int+0x210>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	f240 80dd 	bls.w	80022a6 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80020ec:	68bb      	ldr	r3, [r7, #8]
 80020ee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	f000 80d7 	beq.w	80022a6 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	015a      	lsls	r2, r3, #5
 80020fc:	693b      	ldr	r3, [r7, #16]
 80020fe:	4413      	add	r3, r2
 8002100:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002104:	461a      	mov	r2, r3
 8002106:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800210a:	6093      	str	r3, [r2, #8]
 800210c:	e0cb      	b.n	80022a6 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800210e:	68bb      	ldr	r3, [r7, #8]
 8002110:	f003 0320 	and.w	r3, r3, #32
 8002114:	2b00      	cmp	r3, #0
 8002116:	d009      	beq.n	800212c <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	015a      	lsls	r2, r3, #5
 800211c:	693b      	ldr	r3, [r7, #16]
 800211e:	4413      	add	r3, r2
 8002120:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002124:	461a      	mov	r2, r3
 8002126:	2320      	movs	r3, #32
 8002128:	6093      	str	r3, [r2, #8]
 800212a:	e0bc      	b.n	80022a6 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800212c:	68bb      	ldr	r3, [r7, #8]
 800212e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002132:	2b00      	cmp	r3, #0
 8002134:	f040 80b7 	bne.w	80022a6 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	4a5d      	ldr	r2, [pc, #372]	; (80022b0 <PCD_EP_OutXfrComplete_int+0x210>)
 800213c:	4293      	cmp	r3, r2
 800213e:	d90f      	bls.n	8002160 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002140:	68bb      	ldr	r3, [r7, #8]
 8002142:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002146:	2b00      	cmp	r3, #0
 8002148:	d00a      	beq.n	8002160 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	015a      	lsls	r2, r3, #5
 800214e:	693b      	ldr	r3, [r7, #16]
 8002150:	4413      	add	r3, r2
 8002152:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002156:	461a      	mov	r2, r3
 8002158:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800215c:	6093      	str	r3, [r2, #8]
 800215e:	e0a2      	b.n	80022a6 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8002160:	6879      	ldr	r1, [r7, #4]
 8002162:	683a      	ldr	r2, [r7, #0]
 8002164:	4613      	mov	r3, r2
 8002166:	00db      	lsls	r3, r3, #3
 8002168:	1a9b      	subs	r3, r3, r2
 800216a:	009b      	lsls	r3, r3, #2
 800216c:	440b      	add	r3, r1
 800216e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002172:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	0159      	lsls	r1, r3, #5
 8002178:	693b      	ldr	r3, [r7, #16]
 800217a:	440b      	add	r3, r1
 800217c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002180:	691b      	ldr	r3, [r3, #16]
 8002182:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8002186:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8002188:	6878      	ldr	r0, [r7, #4]
 800218a:	683a      	ldr	r2, [r7, #0]
 800218c:	4613      	mov	r3, r2
 800218e:	00db      	lsls	r3, r3, #3
 8002190:	1a9b      	subs	r3, r3, r2
 8002192:	009b      	lsls	r3, r3, #2
 8002194:	4403      	add	r3, r0
 8002196:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800219a:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 800219c:	6879      	ldr	r1, [r7, #4]
 800219e:	683a      	ldr	r2, [r7, #0]
 80021a0:	4613      	mov	r3, r2
 80021a2:	00db      	lsls	r3, r3, #3
 80021a4:	1a9b      	subs	r3, r3, r2
 80021a6:	009b      	lsls	r3, r3, #2
 80021a8:	440b      	add	r3, r1
 80021aa:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80021ae:	6819      	ldr	r1, [r3, #0]
 80021b0:	6878      	ldr	r0, [r7, #4]
 80021b2:	683a      	ldr	r2, [r7, #0]
 80021b4:	4613      	mov	r3, r2
 80021b6:	00db      	lsls	r3, r3, #3
 80021b8:	1a9b      	subs	r3, r3, r2
 80021ba:	009b      	lsls	r3, r3, #2
 80021bc:	4403      	add	r3, r0
 80021be:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4419      	add	r1, r3
 80021c6:	6878      	ldr	r0, [r7, #4]
 80021c8:	683a      	ldr	r2, [r7, #0]
 80021ca:	4613      	mov	r3, r2
 80021cc:	00db      	lsls	r3, r3, #3
 80021ce:	1a9b      	subs	r3, r3, r2
 80021d0:	009b      	lsls	r3, r3, #2
 80021d2:	4403      	add	r3, r0
 80021d4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80021d8:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d114      	bne.n	800220a <PCD_EP_OutXfrComplete_int+0x16a>
 80021e0:	6879      	ldr	r1, [r7, #4]
 80021e2:	683a      	ldr	r2, [r7, #0]
 80021e4:	4613      	mov	r3, r2
 80021e6:	00db      	lsls	r3, r3, #3
 80021e8:	1a9b      	subs	r3, r3, r2
 80021ea:	009b      	lsls	r3, r3, #2
 80021ec:	440b      	add	r3, r1
 80021ee:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d108      	bne.n	800220a <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6818      	ldr	r0, [r3, #0]
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002202:	461a      	mov	r2, r3
 8002204:	2101      	movs	r1, #1
 8002206:	f002 f837 	bl	8004278 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	b2db      	uxtb	r3, r3
 800220e:	4619      	mov	r1, r3
 8002210:	6878      	ldr	r0, [r7, #4]
 8002212:	f003 ff85 	bl	8006120 <HAL_PCD_DataOutStageCallback>
 8002216:	e046      	b.n	80022a6 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	4a26      	ldr	r2, [pc, #152]	; (80022b4 <PCD_EP_OutXfrComplete_int+0x214>)
 800221c:	4293      	cmp	r3, r2
 800221e:	d124      	bne.n	800226a <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002220:	68bb      	ldr	r3, [r7, #8]
 8002222:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002226:	2b00      	cmp	r3, #0
 8002228:	d00a      	beq.n	8002240 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	015a      	lsls	r2, r3, #5
 800222e:	693b      	ldr	r3, [r7, #16]
 8002230:	4413      	add	r3, r2
 8002232:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002236:	461a      	mov	r2, r3
 8002238:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800223c:	6093      	str	r3, [r2, #8]
 800223e:	e032      	b.n	80022a6 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002240:	68bb      	ldr	r3, [r7, #8]
 8002242:	f003 0320 	and.w	r3, r3, #32
 8002246:	2b00      	cmp	r3, #0
 8002248:	d008      	beq.n	800225c <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	015a      	lsls	r2, r3, #5
 800224e:	693b      	ldr	r3, [r7, #16]
 8002250:	4413      	add	r3, r2
 8002252:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002256:	461a      	mov	r2, r3
 8002258:	2320      	movs	r3, #32
 800225a:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	b2db      	uxtb	r3, r3
 8002260:	4619      	mov	r1, r3
 8002262:	6878      	ldr	r0, [r7, #4]
 8002264:	f003 ff5c 	bl	8006120 <HAL_PCD_DataOutStageCallback>
 8002268:	e01d      	b.n	80022a6 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d114      	bne.n	800229a <PCD_EP_OutXfrComplete_int+0x1fa>
 8002270:	6879      	ldr	r1, [r7, #4]
 8002272:	683a      	ldr	r2, [r7, #0]
 8002274:	4613      	mov	r3, r2
 8002276:	00db      	lsls	r3, r3, #3
 8002278:	1a9b      	subs	r3, r3, r2
 800227a:	009b      	lsls	r3, r3, #2
 800227c:	440b      	add	r3, r1
 800227e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d108      	bne.n	800229a <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6818      	ldr	r0, [r3, #0]
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002292:	461a      	mov	r2, r3
 8002294:	2100      	movs	r1, #0
 8002296:	f001 ffef 	bl	8004278 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	b2db      	uxtb	r3, r3
 800229e:	4619      	mov	r1, r3
 80022a0:	6878      	ldr	r0, [r7, #4]
 80022a2:	f003 ff3d 	bl	8006120 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80022a6:	2300      	movs	r3, #0
}
 80022a8:	4618      	mov	r0, r3
 80022aa:	3718      	adds	r7, #24
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd80      	pop	{r7, pc}
 80022b0:	4f54300a 	.word	0x4f54300a
 80022b4:	4f54310a 	.word	0x4f54310a

080022b8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b086      	sub	sp, #24
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
 80022c0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80022c8:	697b      	ldr	r3, [r7, #20]
 80022ca:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80022cc:	697b      	ldr	r3, [r7, #20]
 80022ce:	333c      	adds	r3, #60	; 0x3c
 80022d0:	3304      	adds	r3, #4
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	015a      	lsls	r2, r3, #5
 80022da:	693b      	ldr	r3, [r7, #16]
 80022dc:	4413      	add	r3, r2
 80022de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022e2:	689b      	ldr	r3, [r3, #8]
 80022e4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	4a15      	ldr	r2, [pc, #84]	; (8002340 <PCD_EP_OutSetupPacket_int+0x88>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d90e      	bls.n	800230c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80022ee:	68bb      	ldr	r3, [r7, #8]
 80022f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d009      	beq.n	800230c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	015a      	lsls	r2, r3, #5
 80022fc:	693b      	ldr	r3, [r7, #16]
 80022fe:	4413      	add	r3, r2
 8002300:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002304:	461a      	mov	r2, r3
 8002306:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800230a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800230c:	6878      	ldr	r0, [r7, #4]
 800230e:	f003 fef5 	bl	80060fc <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	4a0a      	ldr	r2, [pc, #40]	; (8002340 <PCD_EP_OutSetupPacket_int+0x88>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d90c      	bls.n	8002334 <PCD_EP_OutSetupPacket_int+0x7c>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	691b      	ldr	r3, [r3, #16]
 800231e:	2b01      	cmp	r3, #1
 8002320:	d108      	bne.n	8002334 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6818      	ldr	r0, [r3, #0]
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800232c:	461a      	mov	r2, r3
 800232e:	2101      	movs	r1, #1
 8002330:	f001 ffa2 	bl	8004278 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002334:	2300      	movs	r3, #0
}
 8002336:	4618      	mov	r0, r3
 8002338:	3718      	adds	r7, #24
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}
 800233e:	bf00      	nop
 8002340:	4f54300a 	.word	0x4f54300a

08002344 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002344:	b480      	push	{r7}
 8002346:	b085      	sub	sp, #20
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
 800234c:	460b      	mov	r3, r1
 800234e:	70fb      	strb	r3, [r7, #3]
 8002350:	4613      	mov	r3, r2
 8002352:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800235a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800235c:	78fb      	ldrb	r3, [r7, #3]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d107      	bne.n	8002372 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002362:	883b      	ldrh	r3, [r7, #0]
 8002364:	0419      	lsls	r1, r3, #16
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	68ba      	ldr	r2, [r7, #8]
 800236c:	430a      	orrs	r2, r1
 800236e:	629a      	str	r2, [r3, #40]	; 0x28
 8002370:	e028      	b.n	80023c4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002378:	0c1b      	lsrs	r3, r3, #16
 800237a:	68ba      	ldr	r2, [r7, #8]
 800237c:	4413      	add	r3, r2
 800237e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002380:	2300      	movs	r3, #0
 8002382:	73fb      	strb	r3, [r7, #15]
 8002384:	e00d      	b.n	80023a2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681a      	ldr	r2, [r3, #0]
 800238a:	7bfb      	ldrb	r3, [r7, #15]
 800238c:	3340      	adds	r3, #64	; 0x40
 800238e:	009b      	lsls	r3, r3, #2
 8002390:	4413      	add	r3, r2
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	0c1b      	lsrs	r3, r3, #16
 8002396:	68ba      	ldr	r2, [r7, #8]
 8002398:	4413      	add	r3, r2
 800239a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800239c:	7bfb      	ldrb	r3, [r7, #15]
 800239e:	3301      	adds	r3, #1
 80023a0:	73fb      	strb	r3, [r7, #15]
 80023a2:	7bfa      	ldrb	r2, [r7, #15]
 80023a4:	78fb      	ldrb	r3, [r7, #3]
 80023a6:	3b01      	subs	r3, #1
 80023a8:	429a      	cmp	r2, r3
 80023aa:	d3ec      	bcc.n	8002386 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80023ac:	883b      	ldrh	r3, [r7, #0]
 80023ae:	0418      	lsls	r0, r3, #16
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6819      	ldr	r1, [r3, #0]
 80023b4:	78fb      	ldrb	r3, [r7, #3]
 80023b6:	3b01      	subs	r3, #1
 80023b8:	68ba      	ldr	r2, [r7, #8]
 80023ba:	4302      	orrs	r2, r0
 80023bc:	3340      	adds	r3, #64	; 0x40
 80023be:	009b      	lsls	r3, r3, #2
 80023c0:	440b      	add	r3, r1
 80023c2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80023c4:	2300      	movs	r3, #0
}
 80023c6:	4618      	mov	r0, r3
 80023c8:	3714      	adds	r7, #20
 80023ca:	46bd      	mov	sp, r7
 80023cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d0:	4770      	bx	lr

080023d2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80023d2:	b480      	push	{r7}
 80023d4:	b083      	sub	sp, #12
 80023d6:	af00      	add	r7, sp, #0
 80023d8:	6078      	str	r0, [r7, #4]
 80023da:	460b      	mov	r3, r1
 80023dc:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	887a      	ldrh	r2, [r7, #2]
 80023e4:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80023e6:	2300      	movs	r3, #0
}
 80023e8:	4618      	mov	r0, r3
 80023ea:	370c      	adds	r7, #12
 80023ec:	46bd      	mov	sp, r7
 80023ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f2:	4770      	bx	lr

080023f4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b083      	sub	sp, #12
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
 80023fc:	460b      	mov	r3, r1
 80023fe:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002400:	bf00      	nop
 8002402:	370c      	adds	r7, #12
 8002404:	46bd      	mov	sp, r7
 8002406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240a:	4770      	bx	lr

0800240c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b086      	sub	sp, #24
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d101      	bne.n	800241e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800241a:	2301      	movs	r3, #1
 800241c:	e264      	b.n	80028e8 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f003 0301 	and.w	r3, r3, #1
 8002426:	2b00      	cmp	r3, #0
 8002428:	d075      	beq.n	8002516 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800242a:	4ba3      	ldr	r3, [pc, #652]	; (80026b8 <HAL_RCC_OscConfig+0x2ac>)
 800242c:	689b      	ldr	r3, [r3, #8]
 800242e:	f003 030c 	and.w	r3, r3, #12
 8002432:	2b04      	cmp	r3, #4
 8002434:	d00c      	beq.n	8002450 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002436:	4ba0      	ldr	r3, [pc, #640]	; (80026b8 <HAL_RCC_OscConfig+0x2ac>)
 8002438:	689b      	ldr	r3, [r3, #8]
 800243a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800243e:	2b08      	cmp	r3, #8
 8002440:	d112      	bne.n	8002468 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002442:	4b9d      	ldr	r3, [pc, #628]	; (80026b8 <HAL_RCC_OscConfig+0x2ac>)
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800244a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800244e:	d10b      	bne.n	8002468 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002450:	4b99      	ldr	r3, [pc, #612]	; (80026b8 <HAL_RCC_OscConfig+0x2ac>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002458:	2b00      	cmp	r3, #0
 800245a:	d05b      	beq.n	8002514 <HAL_RCC_OscConfig+0x108>
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d157      	bne.n	8002514 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002464:	2301      	movs	r3, #1
 8002466:	e23f      	b.n	80028e8 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002470:	d106      	bne.n	8002480 <HAL_RCC_OscConfig+0x74>
 8002472:	4b91      	ldr	r3, [pc, #580]	; (80026b8 <HAL_RCC_OscConfig+0x2ac>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4a90      	ldr	r2, [pc, #576]	; (80026b8 <HAL_RCC_OscConfig+0x2ac>)
 8002478:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800247c:	6013      	str	r3, [r2, #0]
 800247e:	e01d      	b.n	80024bc <HAL_RCC_OscConfig+0xb0>
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002488:	d10c      	bne.n	80024a4 <HAL_RCC_OscConfig+0x98>
 800248a:	4b8b      	ldr	r3, [pc, #556]	; (80026b8 <HAL_RCC_OscConfig+0x2ac>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4a8a      	ldr	r2, [pc, #552]	; (80026b8 <HAL_RCC_OscConfig+0x2ac>)
 8002490:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002494:	6013      	str	r3, [r2, #0]
 8002496:	4b88      	ldr	r3, [pc, #544]	; (80026b8 <HAL_RCC_OscConfig+0x2ac>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4a87      	ldr	r2, [pc, #540]	; (80026b8 <HAL_RCC_OscConfig+0x2ac>)
 800249c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024a0:	6013      	str	r3, [r2, #0]
 80024a2:	e00b      	b.n	80024bc <HAL_RCC_OscConfig+0xb0>
 80024a4:	4b84      	ldr	r3, [pc, #528]	; (80026b8 <HAL_RCC_OscConfig+0x2ac>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4a83      	ldr	r2, [pc, #524]	; (80026b8 <HAL_RCC_OscConfig+0x2ac>)
 80024aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024ae:	6013      	str	r3, [r2, #0]
 80024b0:	4b81      	ldr	r3, [pc, #516]	; (80026b8 <HAL_RCC_OscConfig+0x2ac>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a80      	ldr	r2, [pc, #512]	; (80026b8 <HAL_RCC_OscConfig+0x2ac>)
 80024b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d013      	beq.n	80024ec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024c4:	f7fe fb28 	bl	8000b18 <HAL_GetTick>
 80024c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024ca:	e008      	b.n	80024de <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024cc:	f7fe fb24 	bl	8000b18 <HAL_GetTick>
 80024d0:	4602      	mov	r2, r0
 80024d2:	693b      	ldr	r3, [r7, #16]
 80024d4:	1ad3      	subs	r3, r2, r3
 80024d6:	2b64      	cmp	r3, #100	; 0x64
 80024d8:	d901      	bls.n	80024de <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80024da:	2303      	movs	r3, #3
 80024dc:	e204      	b.n	80028e8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024de:	4b76      	ldr	r3, [pc, #472]	; (80026b8 <HAL_RCC_OscConfig+0x2ac>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d0f0      	beq.n	80024cc <HAL_RCC_OscConfig+0xc0>
 80024ea:	e014      	b.n	8002516 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024ec:	f7fe fb14 	bl	8000b18 <HAL_GetTick>
 80024f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024f2:	e008      	b.n	8002506 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024f4:	f7fe fb10 	bl	8000b18 <HAL_GetTick>
 80024f8:	4602      	mov	r2, r0
 80024fa:	693b      	ldr	r3, [r7, #16]
 80024fc:	1ad3      	subs	r3, r2, r3
 80024fe:	2b64      	cmp	r3, #100	; 0x64
 8002500:	d901      	bls.n	8002506 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002502:	2303      	movs	r3, #3
 8002504:	e1f0      	b.n	80028e8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002506:	4b6c      	ldr	r3, [pc, #432]	; (80026b8 <HAL_RCC_OscConfig+0x2ac>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800250e:	2b00      	cmp	r3, #0
 8002510:	d1f0      	bne.n	80024f4 <HAL_RCC_OscConfig+0xe8>
 8002512:	e000      	b.n	8002516 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002514:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f003 0302 	and.w	r3, r3, #2
 800251e:	2b00      	cmp	r3, #0
 8002520:	d063      	beq.n	80025ea <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002522:	4b65      	ldr	r3, [pc, #404]	; (80026b8 <HAL_RCC_OscConfig+0x2ac>)
 8002524:	689b      	ldr	r3, [r3, #8]
 8002526:	f003 030c 	and.w	r3, r3, #12
 800252a:	2b00      	cmp	r3, #0
 800252c:	d00b      	beq.n	8002546 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800252e:	4b62      	ldr	r3, [pc, #392]	; (80026b8 <HAL_RCC_OscConfig+0x2ac>)
 8002530:	689b      	ldr	r3, [r3, #8]
 8002532:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002536:	2b08      	cmp	r3, #8
 8002538:	d11c      	bne.n	8002574 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800253a:	4b5f      	ldr	r3, [pc, #380]	; (80026b8 <HAL_RCC_OscConfig+0x2ac>)
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002542:	2b00      	cmp	r3, #0
 8002544:	d116      	bne.n	8002574 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002546:	4b5c      	ldr	r3, [pc, #368]	; (80026b8 <HAL_RCC_OscConfig+0x2ac>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f003 0302 	and.w	r3, r3, #2
 800254e:	2b00      	cmp	r3, #0
 8002550:	d005      	beq.n	800255e <HAL_RCC_OscConfig+0x152>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	68db      	ldr	r3, [r3, #12]
 8002556:	2b01      	cmp	r3, #1
 8002558:	d001      	beq.n	800255e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800255a:	2301      	movs	r3, #1
 800255c:	e1c4      	b.n	80028e8 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800255e:	4b56      	ldr	r3, [pc, #344]	; (80026b8 <HAL_RCC_OscConfig+0x2ac>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	691b      	ldr	r3, [r3, #16]
 800256a:	00db      	lsls	r3, r3, #3
 800256c:	4952      	ldr	r1, [pc, #328]	; (80026b8 <HAL_RCC_OscConfig+0x2ac>)
 800256e:	4313      	orrs	r3, r2
 8002570:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002572:	e03a      	b.n	80025ea <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	68db      	ldr	r3, [r3, #12]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d020      	beq.n	80025be <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800257c:	4b4f      	ldr	r3, [pc, #316]	; (80026bc <HAL_RCC_OscConfig+0x2b0>)
 800257e:	2201      	movs	r2, #1
 8002580:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002582:	f7fe fac9 	bl	8000b18 <HAL_GetTick>
 8002586:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002588:	e008      	b.n	800259c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800258a:	f7fe fac5 	bl	8000b18 <HAL_GetTick>
 800258e:	4602      	mov	r2, r0
 8002590:	693b      	ldr	r3, [r7, #16]
 8002592:	1ad3      	subs	r3, r2, r3
 8002594:	2b02      	cmp	r3, #2
 8002596:	d901      	bls.n	800259c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002598:	2303      	movs	r3, #3
 800259a:	e1a5      	b.n	80028e8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800259c:	4b46      	ldr	r3, [pc, #280]	; (80026b8 <HAL_RCC_OscConfig+0x2ac>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f003 0302 	and.w	r3, r3, #2
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d0f0      	beq.n	800258a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025a8:	4b43      	ldr	r3, [pc, #268]	; (80026b8 <HAL_RCC_OscConfig+0x2ac>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	691b      	ldr	r3, [r3, #16]
 80025b4:	00db      	lsls	r3, r3, #3
 80025b6:	4940      	ldr	r1, [pc, #256]	; (80026b8 <HAL_RCC_OscConfig+0x2ac>)
 80025b8:	4313      	orrs	r3, r2
 80025ba:	600b      	str	r3, [r1, #0]
 80025bc:	e015      	b.n	80025ea <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025be:	4b3f      	ldr	r3, [pc, #252]	; (80026bc <HAL_RCC_OscConfig+0x2b0>)
 80025c0:	2200      	movs	r2, #0
 80025c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025c4:	f7fe faa8 	bl	8000b18 <HAL_GetTick>
 80025c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025ca:	e008      	b.n	80025de <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025cc:	f7fe faa4 	bl	8000b18 <HAL_GetTick>
 80025d0:	4602      	mov	r2, r0
 80025d2:	693b      	ldr	r3, [r7, #16]
 80025d4:	1ad3      	subs	r3, r2, r3
 80025d6:	2b02      	cmp	r3, #2
 80025d8:	d901      	bls.n	80025de <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80025da:	2303      	movs	r3, #3
 80025dc:	e184      	b.n	80028e8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025de:	4b36      	ldr	r3, [pc, #216]	; (80026b8 <HAL_RCC_OscConfig+0x2ac>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f003 0302 	and.w	r3, r3, #2
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d1f0      	bne.n	80025cc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f003 0308 	and.w	r3, r3, #8
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d030      	beq.n	8002658 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	695b      	ldr	r3, [r3, #20]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d016      	beq.n	800262c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025fe:	4b30      	ldr	r3, [pc, #192]	; (80026c0 <HAL_RCC_OscConfig+0x2b4>)
 8002600:	2201      	movs	r2, #1
 8002602:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002604:	f7fe fa88 	bl	8000b18 <HAL_GetTick>
 8002608:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800260a:	e008      	b.n	800261e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800260c:	f7fe fa84 	bl	8000b18 <HAL_GetTick>
 8002610:	4602      	mov	r2, r0
 8002612:	693b      	ldr	r3, [r7, #16]
 8002614:	1ad3      	subs	r3, r2, r3
 8002616:	2b02      	cmp	r3, #2
 8002618:	d901      	bls.n	800261e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800261a:	2303      	movs	r3, #3
 800261c:	e164      	b.n	80028e8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800261e:	4b26      	ldr	r3, [pc, #152]	; (80026b8 <HAL_RCC_OscConfig+0x2ac>)
 8002620:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002622:	f003 0302 	and.w	r3, r3, #2
 8002626:	2b00      	cmp	r3, #0
 8002628:	d0f0      	beq.n	800260c <HAL_RCC_OscConfig+0x200>
 800262a:	e015      	b.n	8002658 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800262c:	4b24      	ldr	r3, [pc, #144]	; (80026c0 <HAL_RCC_OscConfig+0x2b4>)
 800262e:	2200      	movs	r2, #0
 8002630:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002632:	f7fe fa71 	bl	8000b18 <HAL_GetTick>
 8002636:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002638:	e008      	b.n	800264c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800263a:	f7fe fa6d 	bl	8000b18 <HAL_GetTick>
 800263e:	4602      	mov	r2, r0
 8002640:	693b      	ldr	r3, [r7, #16]
 8002642:	1ad3      	subs	r3, r2, r3
 8002644:	2b02      	cmp	r3, #2
 8002646:	d901      	bls.n	800264c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002648:	2303      	movs	r3, #3
 800264a:	e14d      	b.n	80028e8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800264c:	4b1a      	ldr	r3, [pc, #104]	; (80026b8 <HAL_RCC_OscConfig+0x2ac>)
 800264e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002650:	f003 0302 	and.w	r3, r3, #2
 8002654:	2b00      	cmp	r3, #0
 8002656:	d1f0      	bne.n	800263a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f003 0304 	and.w	r3, r3, #4
 8002660:	2b00      	cmp	r3, #0
 8002662:	f000 80a0 	beq.w	80027a6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002666:	2300      	movs	r3, #0
 8002668:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800266a:	4b13      	ldr	r3, [pc, #76]	; (80026b8 <HAL_RCC_OscConfig+0x2ac>)
 800266c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800266e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002672:	2b00      	cmp	r3, #0
 8002674:	d10f      	bne.n	8002696 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002676:	2300      	movs	r3, #0
 8002678:	60bb      	str	r3, [r7, #8]
 800267a:	4b0f      	ldr	r3, [pc, #60]	; (80026b8 <HAL_RCC_OscConfig+0x2ac>)
 800267c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800267e:	4a0e      	ldr	r2, [pc, #56]	; (80026b8 <HAL_RCC_OscConfig+0x2ac>)
 8002680:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002684:	6413      	str	r3, [r2, #64]	; 0x40
 8002686:	4b0c      	ldr	r3, [pc, #48]	; (80026b8 <HAL_RCC_OscConfig+0x2ac>)
 8002688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800268a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800268e:	60bb      	str	r3, [r7, #8]
 8002690:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002692:	2301      	movs	r3, #1
 8002694:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002696:	4b0b      	ldr	r3, [pc, #44]	; (80026c4 <HAL_RCC_OscConfig+0x2b8>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d121      	bne.n	80026e6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026a2:	4b08      	ldr	r3, [pc, #32]	; (80026c4 <HAL_RCC_OscConfig+0x2b8>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4a07      	ldr	r2, [pc, #28]	; (80026c4 <HAL_RCC_OscConfig+0x2b8>)
 80026a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026ae:	f7fe fa33 	bl	8000b18 <HAL_GetTick>
 80026b2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026b4:	e011      	b.n	80026da <HAL_RCC_OscConfig+0x2ce>
 80026b6:	bf00      	nop
 80026b8:	40023800 	.word	0x40023800
 80026bc:	42470000 	.word	0x42470000
 80026c0:	42470e80 	.word	0x42470e80
 80026c4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026c8:	f7fe fa26 	bl	8000b18 <HAL_GetTick>
 80026cc:	4602      	mov	r2, r0
 80026ce:	693b      	ldr	r3, [r7, #16]
 80026d0:	1ad3      	subs	r3, r2, r3
 80026d2:	2b02      	cmp	r3, #2
 80026d4:	d901      	bls.n	80026da <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80026d6:	2303      	movs	r3, #3
 80026d8:	e106      	b.n	80028e8 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026da:	4b85      	ldr	r3, [pc, #532]	; (80028f0 <HAL_RCC_OscConfig+0x4e4>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d0f0      	beq.n	80026c8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	689b      	ldr	r3, [r3, #8]
 80026ea:	2b01      	cmp	r3, #1
 80026ec:	d106      	bne.n	80026fc <HAL_RCC_OscConfig+0x2f0>
 80026ee:	4b81      	ldr	r3, [pc, #516]	; (80028f4 <HAL_RCC_OscConfig+0x4e8>)
 80026f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026f2:	4a80      	ldr	r2, [pc, #512]	; (80028f4 <HAL_RCC_OscConfig+0x4e8>)
 80026f4:	f043 0301 	orr.w	r3, r3, #1
 80026f8:	6713      	str	r3, [r2, #112]	; 0x70
 80026fa:	e01c      	b.n	8002736 <HAL_RCC_OscConfig+0x32a>
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	689b      	ldr	r3, [r3, #8]
 8002700:	2b05      	cmp	r3, #5
 8002702:	d10c      	bne.n	800271e <HAL_RCC_OscConfig+0x312>
 8002704:	4b7b      	ldr	r3, [pc, #492]	; (80028f4 <HAL_RCC_OscConfig+0x4e8>)
 8002706:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002708:	4a7a      	ldr	r2, [pc, #488]	; (80028f4 <HAL_RCC_OscConfig+0x4e8>)
 800270a:	f043 0304 	orr.w	r3, r3, #4
 800270e:	6713      	str	r3, [r2, #112]	; 0x70
 8002710:	4b78      	ldr	r3, [pc, #480]	; (80028f4 <HAL_RCC_OscConfig+0x4e8>)
 8002712:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002714:	4a77      	ldr	r2, [pc, #476]	; (80028f4 <HAL_RCC_OscConfig+0x4e8>)
 8002716:	f043 0301 	orr.w	r3, r3, #1
 800271a:	6713      	str	r3, [r2, #112]	; 0x70
 800271c:	e00b      	b.n	8002736 <HAL_RCC_OscConfig+0x32a>
 800271e:	4b75      	ldr	r3, [pc, #468]	; (80028f4 <HAL_RCC_OscConfig+0x4e8>)
 8002720:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002722:	4a74      	ldr	r2, [pc, #464]	; (80028f4 <HAL_RCC_OscConfig+0x4e8>)
 8002724:	f023 0301 	bic.w	r3, r3, #1
 8002728:	6713      	str	r3, [r2, #112]	; 0x70
 800272a:	4b72      	ldr	r3, [pc, #456]	; (80028f4 <HAL_RCC_OscConfig+0x4e8>)
 800272c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800272e:	4a71      	ldr	r2, [pc, #452]	; (80028f4 <HAL_RCC_OscConfig+0x4e8>)
 8002730:	f023 0304 	bic.w	r3, r3, #4
 8002734:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	689b      	ldr	r3, [r3, #8]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d015      	beq.n	800276a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800273e:	f7fe f9eb 	bl	8000b18 <HAL_GetTick>
 8002742:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002744:	e00a      	b.n	800275c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002746:	f7fe f9e7 	bl	8000b18 <HAL_GetTick>
 800274a:	4602      	mov	r2, r0
 800274c:	693b      	ldr	r3, [r7, #16]
 800274e:	1ad3      	subs	r3, r2, r3
 8002750:	f241 3288 	movw	r2, #5000	; 0x1388
 8002754:	4293      	cmp	r3, r2
 8002756:	d901      	bls.n	800275c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002758:	2303      	movs	r3, #3
 800275a:	e0c5      	b.n	80028e8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800275c:	4b65      	ldr	r3, [pc, #404]	; (80028f4 <HAL_RCC_OscConfig+0x4e8>)
 800275e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002760:	f003 0302 	and.w	r3, r3, #2
 8002764:	2b00      	cmp	r3, #0
 8002766:	d0ee      	beq.n	8002746 <HAL_RCC_OscConfig+0x33a>
 8002768:	e014      	b.n	8002794 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800276a:	f7fe f9d5 	bl	8000b18 <HAL_GetTick>
 800276e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002770:	e00a      	b.n	8002788 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002772:	f7fe f9d1 	bl	8000b18 <HAL_GetTick>
 8002776:	4602      	mov	r2, r0
 8002778:	693b      	ldr	r3, [r7, #16]
 800277a:	1ad3      	subs	r3, r2, r3
 800277c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002780:	4293      	cmp	r3, r2
 8002782:	d901      	bls.n	8002788 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002784:	2303      	movs	r3, #3
 8002786:	e0af      	b.n	80028e8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002788:	4b5a      	ldr	r3, [pc, #360]	; (80028f4 <HAL_RCC_OscConfig+0x4e8>)
 800278a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800278c:	f003 0302 	and.w	r3, r3, #2
 8002790:	2b00      	cmp	r3, #0
 8002792:	d1ee      	bne.n	8002772 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002794:	7dfb      	ldrb	r3, [r7, #23]
 8002796:	2b01      	cmp	r3, #1
 8002798:	d105      	bne.n	80027a6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800279a:	4b56      	ldr	r3, [pc, #344]	; (80028f4 <HAL_RCC_OscConfig+0x4e8>)
 800279c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800279e:	4a55      	ldr	r2, [pc, #340]	; (80028f4 <HAL_RCC_OscConfig+0x4e8>)
 80027a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027a4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	699b      	ldr	r3, [r3, #24]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	f000 809b 	beq.w	80028e6 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80027b0:	4b50      	ldr	r3, [pc, #320]	; (80028f4 <HAL_RCC_OscConfig+0x4e8>)
 80027b2:	689b      	ldr	r3, [r3, #8]
 80027b4:	f003 030c 	and.w	r3, r3, #12
 80027b8:	2b08      	cmp	r3, #8
 80027ba:	d05c      	beq.n	8002876 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	699b      	ldr	r3, [r3, #24]
 80027c0:	2b02      	cmp	r3, #2
 80027c2:	d141      	bne.n	8002848 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027c4:	4b4c      	ldr	r3, [pc, #304]	; (80028f8 <HAL_RCC_OscConfig+0x4ec>)
 80027c6:	2200      	movs	r2, #0
 80027c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027ca:	f7fe f9a5 	bl	8000b18 <HAL_GetTick>
 80027ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027d0:	e008      	b.n	80027e4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027d2:	f7fe f9a1 	bl	8000b18 <HAL_GetTick>
 80027d6:	4602      	mov	r2, r0
 80027d8:	693b      	ldr	r3, [r7, #16]
 80027da:	1ad3      	subs	r3, r2, r3
 80027dc:	2b02      	cmp	r3, #2
 80027de:	d901      	bls.n	80027e4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80027e0:	2303      	movs	r3, #3
 80027e2:	e081      	b.n	80028e8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027e4:	4b43      	ldr	r3, [pc, #268]	; (80028f4 <HAL_RCC_OscConfig+0x4e8>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d1f0      	bne.n	80027d2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	69da      	ldr	r2, [r3, #28]
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6a1b      	ldr	r3, [r3, #32]
 80027f8:	431a      	orrs	r2, r3
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027fe:	019b      	lsls	r3, r3, #6
 8002800:	431a      	orrs	r2, r3
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002806:	085b      	lsrs	r3, r3, #1
 8002808:	3b01      	subs	r3, #1
 800280a:	041b      	lsls	r3, r3, #16
 800280c:	431a      	orrs	r2, r3
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002812:	061b      	lsls	r3, r3, #24
 8002814:	4937      	ldr	r1, [pc, #220]	; (80028f4 <HAL_RCC_OscConfig+0x4e8>)
 8002816:	4313      	orrs	r3, r2
 8002818:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800281a:	4b37      	ldr	r3, [pc, #220]	; (80028f8 <HAL_RCC_OscConfig+0x4ec>)
 800281c:	2201      	movs	r2, #1
 800281e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002820:	f7fe f97a 	bl	8000b18 <HAL_GetTick>
 8002824:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002826:	e008      	b.n	800283a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002828:	f7fe f976 	bl	8000b18 <HAL_GetTick>
 800282c:	4602      	mov	r2, r0
 800282e:	693b      	ldr	r3, [r7, #16]
 8002830:	1ad3      	subs	r3, r2, r3
 8002832:	2b02      	cmp	r3, #2
 8002834:	d901      	bls.n	800283a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002836:	2303      	movs	r3, #3
 8002838:	e056      	b.n	80028e8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800283a:	4b2e      	ldr	r3, [pc, #184]	; (80028f4 <HAL_RCC_OscConfig+0x4e8>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002842:	2b00      	cmp	r3, #0
 8002844:	d0f0      	beq.n	8002828 <HAL_RCC_OscConfig+0x41c>
 8002846:	e04e      	b.n	80028e6 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002848:	4b2b      	ldr	r3, [pc, #172]	; (80028f8 <HAL_RCC_OscConfig+0x4ec>)
 800284a:	2200      	movs	r2, #0
 800284c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800284e:	f7fe f963 	bl	8000b18 <HAL_GetTick>
 8002852:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002854:	e008      	b.n	8002868 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002856:	f7fe f95f 	bl	8000b18 <HAL_GetTick>
 800285a:	4602      	mov	r2, r0
 800285c:	693b      	ldr	r3, [r7, #16]
 800285e:	1ad3      	subs	r3, r2, r3
 8002860:	2b02      	cmp	r3, #2
 8002862:	d901      	bls.n	8002868 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002864:	2303      	movs	r3, #3
 8002866:	e03f      	b.n	80028e8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002868:	4b22      	ldr	r3, [pc, #136]	; (80028f4 <HAL_RCC_OscConfig+0x4e8>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002870:	2b00      	cmp	r3, #0
 8002872:	d1f0      	bne.n	8002856 <HAL_RCC_OscConfig+0x44a>
 8002874:	e037      	b.n	80028e6 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	699b      	ldr	r3, [r3, #24]
 800287a:	2b01      	cmp	r3, #1
 800287c:	d101      	bne.n	8002882 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800287e:	2301      	movs	r3, #1
 8002880:	e032      	b.n	80028e8 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002882:	4b1c      	ldr	r3, [pc, #112]	; (80028f4 <HAL_RCC_OscConfig+0x4e8>)
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	699b      	ldr	r3, [r3, #24]
 800288c:	2b01      	cmp	r3, #1
 800288e:	d028      	beq.n	80028e2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800289a:	429a      	cmp	r2, r3
 800289c:	d121      	bne.n	80028e2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028a8:	429a      	cmp	r2, r3
 80028aa:	d11a      	bne.n	80028e2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80028ac:	68fa      	ldr	r2, [r7, #12]
 80028ae:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80028b2:	4013      	ands	r3, r2
 80028b4:	687a      	ldr	r2, [r7, #4]
 80028b6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80028b8:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d111      	bne.n	80028e2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028c8:	085b      	lsrs	r3, r3, #1
 80028ca:	3b01      	subs	r3, #1
 80028cc:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80028ce:	429a      	cmp	r2, r3
 80028d0:	d107      	bne.n	80028e2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028dc:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80028de:	429a      	cmp	r2, r3
 80028e0:	d001      	beq.n	80028e6 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80028e2:	2301      	movs	r3, #1
 80028e4:	e000      	b.n	80028e8 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80028e6:	2300      	movs	r3, #0
}
 80028e8:	4618      	mov	r0, r3
 80028ea:	3718      	adds	r7, #24
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bd80      	pop	{r7, pc}
 80028f0:	40007000 	.word	0x40007000
 80028f4:	40023800 	.word	0x40023800
 80028f8:	42470060 	.word	0x42470060

080028fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b084      	sub	sp, #16
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
 8002904:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d101      	bne.n	8002910 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800290c:	2301      	movs	r3, #1
 800290e:	e0cc      	b.n	8002aaa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002910:	4b68      	ldr	r3, [pc, #416]	; (8002ab4 <HAL_RCC_ClockConfig+0x1b8>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f003 0307 	and.w	r3, r3, #7
 8002918:	683a      	ldr	r2, [r7, #0]
 800291a:	429a      	cmp	r2, r3
 800291c:	d90c      	bls.n	8002938 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800291e:	4b65      	ldr	r3, [pc, #404]	; (8002ab4 <HAL_RCC_ClockConfig+0x1b8>)
 8002920:	683a      	ldr	r2, [r7, #0]
 8002922:	b2d2      	uxtb	r2, r2
 8002924:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002926:	4b63      	ldr	r3, [pc, #396]	; (8002ab4 <HAL_RCC_ClockConfig+0x1b8>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f003 0307 	and.w	r3, r3, #7
 800292e:	683a      	ldr	r2, [r7, #0]
 8002930:	429a      	cmp	r2, r3
 8002932:	d001      	beq.n	8002938 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002934:	2301      	movs	r3, #1
 8002936:	e0b8      	b.n	8002aaa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f003 0302 	and.w	r3, r3, #2
 8002940:	2b00      	cmp	r3, #0
 8002942:	d020      	beq.n	8002986 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f003 0304 	and.w	r3, r3, #4
 800294c:	2b00      	cmp	r3, #0
 800294e:	d005      	beq.n	800295c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002950:	4b59      	ldr	r3, [pc, #356]	; (8002ab8 <HAL_RCC_ClockConfig+0x1bc>)
 8002952:	689b      	ldr	r3, [r3, #8]
 8002954:	4a58      	ldr	r2, [pc, #352]	; (8002ab8 <HAL_RCC_ClockConfig+0x1bc>)
 8002956:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800295a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f003 0308 	and.w	r3, r3, #8
 8002964:	2b00      	cmp	r3, #0
 8002966:	d005      	beq.n	8002974 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002968:	4b53      	ldr	r3, [pc, #332]	; (8002ab8 <HAL_RCC_ClockConfig+0x1bc>)
 800296a:	689b      	ldr	r3, [r3, #8]
 800296c:	4a52      	ldr	r2, [pc, #328]	; (8002ab8 <HAL_RCC_ClockConfig+0x1bc>)
 800296e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002972:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002974:	4b50      	ldr	r3, [pc, #320]	; (8002ab8 <HAL_RCC_ClockConfig+0x1bc>)
 8002976:	689b      	ldr	r3, [r3, #8]
 8002978:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	689b      	ldr	r3, [r3, #8]
 8002980:	494d      	ldr	r1, [pc, #308]	; (8002ab8 <HAL_RCC_ClockConfig+0x1bc>)
 8002982:	4313      	orrs	r3, r2
 8002984:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f003 0301 	and.w	r3, r3, #1
 800298e:	2b00      	cmp	r3, #0
 8002990:	d044      	beq.n	8002a1c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	2b01      	cmp	r3, #1
 8002998:	d107      	bne.n	80029aa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800299a:	4b47      	ldr	r3, [pc, #284]	; (8002ab8 <HAL_RCC_ClockConfig+0x1bc>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d119      	bne.n	80029da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029a6:	2301      	movs	r3, #1
 80029a8:	e07f      	b.n	8002aaa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	2b02      	cmp	r3, #2
 80029b0:	d003      	beq.n	80029ba <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029b6:	2b03      	cmp	r3, #3
 80029b8:	d107      	bne.n	80029ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029ba:	4b3f      	ldr	r3, [pc, #252]	; (8002ab8 <HAL_RCC_ClockConfig+0x1bc>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d109      	bne.n	80029da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029c6:	2301      	movs	r3, #1
 80029c8:	e06f      	b.n	8002aaa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029ca:	4b3b      	ldr	r3, [pc, #236]	; (8002ab8 <HAL_RCC_ClockConfig+0x1bc>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f003 0302 	and.w	r3, r3, #2
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d101      	bne.n	80029da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029d6:	2301      	movs	r3, #1
 80029d8:	e067      	b.n	8002aaa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029da:	4b37      	ldr	r3, [pc, #220]	; (8002ab8 <HAL_RCC_ClockConfig+0x1bc>)
 80029dc:	689b      	ldr	r3, [r3, #8]
 80029de:	f023 0203 	bic.w	r2, r3, #3
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	4934      	ldr	r1, [pc, #208]	; (8002ab8 <HAL_RCC_ClockConfig+0x1bc>)
 80029e8:	4313      	orrs	r3, r2
 80029ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80029ec:	f7fe f894 	bl	8000b18 <HAL_GetTick>
 80029f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029f2:	e00a      	b.n	8002a0a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029f4:	f7fe f890 	bl	8000b18 <HAL_GetTick>
 80029f8:	4602      	mov	r2, r0
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	1ad3      	subs	r3, r2, r3
 80029fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d901      	bls.n	8002a0a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a06:	2303      	movs	r3, #3
 8002a08:	e04f      	b.n	8002aaa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a0a:	4b2b      	ldr	r3, [pc, #172]	; (8002ab8 <HAL_RCC_ClockConfig+0x1bc>)
 8002a0c:	689b      	ldr	r3, [r3, #8]
 8002a0e:	f003 020c 	and.w	r2, r3, #12
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	009b      	lsls	r3, r3, #2
 8002a18:	429a      	cmp	r2, r3
 8002a1a:	d1eb      	bne.n	80029f4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a1c:	4b25      	ldr	r3, [pc, #148]	; (8002ab4 <HAL_RCC_ClockConfig+0x1b8>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f003 0307 	and.w	r3, r3, #7
 8002a24:	683a      	ldr	r2, [r7, #0]
 8002a26:	429a      	cmp	r2, r3
 8002a28:	d20c      	bcs.n	8002a44 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a2a:	4b22      	ldr	r3, [pc, #136]	; (8002ab4 <HAL_RCC_ClockConfig+0x1b8>)
 8002a2c:	683a      	ldr	r2, [r7, #0]
 8002a2e:	b2d2      	uxtb	r2, r2
 8002a30:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a32:	4b20      	ldr	r3, [pc, #128]	; (8002ab4 <HAL_RCC_ClockConfig+0x1b8>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f003 0307 	and.w	r3, r3, #7
 8002a3a:	683a      	ldr	r2, [r7, #0]
 8002a3c:	429a      	cmp	r2, r3
 8002a3e:	d001      	beq.n	8002a44 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002a40:	2301      	movs	r3, #1
 8002a42:	e032      	b.n	8002aaa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f003 0304 	and.w	r3, r3, #4
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d008      	beq.n	8002a62 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a50:	4b19      	ldr	r3, [pc, #100]	; (8002ab8 <HAL_RCC_ClockConfig+0x1bc>)
 8002a52:	689b      	ldr	r3, [r3, #8]
 8002a54:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	68db      	ldr	r3, [r3, #12]
 8002a5c:	4916      	ldr	r1, [pc, #88]	; (8002ab8 <HAL_RCC_ClockConfig+0x1bc>)
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f003 0308 	and.w	r3, r3, #8
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d009      	beq.n	8002a82 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a6e:	4b12      	ldr	r3, [pc, #72]	; (8002ab8 <HAL_RCC_ClockConfig+0x1bc>)
 8002a70:	689b      	ldr	r3, [r3, #8]
 8002a72:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	691b      	ldr	r3, [r3, #16]
 8002a7a:	00db      	lsls	r3, r3, #3
 8002a7c:	490e      	ldr	r1, [pc, #56]	; (8002ab8 <HAL_RCC_ClockConfig+0x1bc>)
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002a82:	f000 f821 	bl	8002ac8 <HAL_RCC_GetSysClockFreq>
 8002a86:	4602      	mov	r2, r0
 8002a88:	4b0b      	ldr	r3, [pc, #44]	; (8002ab8 <HAL_RCC_ClockConfig+0x1bc>)
 8002a8a:	689b      	ldr	r3, [r3, #8]
 8002a8c:	091b      	lsrs	r3, r3, #4
 8002a8e:	f003 030f 	and.w	r3, r3, #15
 8002a92:	490a      	ldr	r1, [pc, #40]	; (8002abc <HAL_RCC_ClockConfig+0x1c0>)
 8002a94:	5ccb      	ldrb	r3, [r1, r3]
 8002a96:	fa22 f303 	lsr.w	r3, r2, r3
 8002a9a:	4a09      	ldr	r2, [pc, #36]	; (8002ac0 <HAL_RCC_ClockConfig+0x1c4>)
 8002a9c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002a9e:	4b09      	ldr	r3, [pc, #36]	; (8002ac4 <HAL_RCC_ClockConfig+0x1c8>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	f7fd fff4 	bl	8000a90 <HAL_InitTick>

  return HAL_OK;
 8002aa8:	2300      	movs	r3, #0
}
 8002aaa:	4618      	mov	r0, r3
 8002aac:	3710      	adds	r7, #16
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}
 8002ab2:	bf00      	nop
 8002ab4:	40023c00 	.word	0x40023c00
 8002ab8:	40023800 	.word	0x40023800
 8002abc:	08006734 	.word	0x08006734
 8002ac0:	20000000 	.word	0x20000000
 8002ac4:	20000004 	.word	0x20000004

08002ac8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ac8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002acc:	b084      	sub	sp, #16
 8002ace:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	607b      	str	r3, [r7, #4]
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	60fb      	str	r3, [r7, #12]
 8002ad8:	2300      	movs	r3, #0
 8002ada:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002adc:	2300      	movs	r3, #0
 8002ade:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ae0:	4b67      	ldr	r3, [pc, #412]	; (8002c80 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002ae2:	689b      	ldr	r3, [r3, #8]
 8002ae4:	f003 030c 	and.w	r3, r3, #12
 8002ae8:	2b08      	cmp	r3, #8
 8002aea:	d00d      	beq.n	8002b08 <HAL_RCC_GetSysClockFreq+0x40>
 8002aec:	2b08      	cmp	r3, #8
 8002aee:	f200 80bd 	bhi.w	8002c6c <HAL_RCC_GetSysClockFreq+0x1a4>
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d002      	beq.n	8002afc <HAL_RCC_GetSysClockFreq+0x34>
 8002af6:	2b04      	cmp	r3, #4
 8002af8:	d003      	beq.n	8002b02 <HAL_RCC_GetSysClockFreq+0x3a>
 8002afa:	e0b7      	b.n	8002c6c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002afc:	4b61      	ldr	r3, [pc, #388]	; (8002c84 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002afe:	60bb      	str	r3, [r7, #8]
       break;
 8002b00:	e0b7      	b.n	8002c72 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002b02:	4b61      	ldr	r3, [pc, #388]	; (8002c88 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002b04:	60bb      	str	r3, [r7, #8]
      break;
 8002b06:	e0b4      	b.n	8002c72 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b08:	4b5d      	ldr	r3, [pc, #372]	; (8002c80 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b10:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b12:	4b5b      	ldr	r3, [pc, #364]	; (8002c80 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d04d      	beq.n	8002bba <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b1e:	4b58      	ldr	r3, [pc, #352]	; (8002c80 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	099b      	lsrs	r3, r3, #6
 8002b24:	461a      	mov	r2, r3
 8002b26:	f04f 0300 	mov.w	r3, #0
 8002b2a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002b2e:	f04f 0100 	mov.w	r1, #0
 8002b32:	ea02 0800 	and.w	r8, r2, r0
 8002b36:	ea03 0901 	and.w	r9, r3, r1
 8002b3a:	4640      	mov	r0, r8
 8002b3c:	4649      	mov	r1, r9
 8002b3e:	f04f 0200 	mov.w	r2, #0
 8002b42:	f04f 0300 	mov.w	r3, #0
 8002b46:	014b      	lsls	r3, r1, #5
 8002b48:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002b4c:	0142      	lsls	r2, r0, #5
 8002b4e:	4610      	mov	r0, r2
 8002b50:	4619      	mov	r1, r3
 8002b52:	ebb0 0008 	subs.w	r0, r0, r8
 8002b56:	eb61 0109 	sbc.w	r1, r1, r9
 8002b5a:	f04f 0200 	mov.w	r2, #0
 8002b5e:	f04f 0300 	mov.w	r3, #0
 8002b62:	018b      	lsls	r3, r1, #6
 8002b64:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002b68:	0182      	lsls	r2, r0, #6
 8002b6a:	1a12      	subs	r2, r2, r0
 8002b6c:	eb63 0301 	sbc.w	r3, r3, r1
 8002b70:	f04f 0000 	mov.w	r0, #0
 8002b74:	f04f 0100 	mov.w	r1, #0
 8002b78:	00d9      	lsls	r1, r3, #3
 8002b7a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002b7e:	00d0      	lsls	r0, r2, #3
 8002b80:	4602      	mov	r2, r0
 8002b82:	460b      	mov	r3, r1
 8002b84:	eb12 0208 	adds.w	r2, r2, r8
 8002b88:	eb43 0309 	adc.w	r3, r3, r9
 8002b8c:	f04f 0000 	mov.w	r0, #0
 8002b90:	f04f 0100 	mov.w	r1, #0
 8002b94:	0259      	lsls	r1, r3, #9
 8002b96:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002b9a:	0250      	lsls	r0, r2, #9
 8002b9c:	4602      	mov	r2, r0
 8002b9e:	460b      	mov	r3, r1
 8002ba0:	4610      	mov	r0, r2
 8002ba2:	4619      	mov	r1, r3
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	461a      	mov	r2, r3
 8002ba8:	f04f 0300 	mov.w	r3, #0
 8002bac:	f7fd fb0c 	bl	80001c8 <__aeabi_uldivmod>
 8002bb0:	4602      	mov	r2, r0
 8002bb2:	460b      	mov	r3, r1
 8002bb4:	4613      	mov	r3, r2
 8002bb6:	60fb      	str	r3, [r7, #12]
 8002bb8:	e04a      	b.n	8002c50 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bba:	4b31      	ldr	r3, [pc, #196]	; (8002c80 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	099b      	lsrs	r3, r3, #6
 8002bc0:	461a      	mov	r2, r3
 8002bc2:	f04f 0300 	mov.w	r3, #0
 8002bc6:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002bca:	f04f 0100 	mov.w	r1, #0
 8002bce:	ea02 0400 	and.w	r4, r2, r0
 8002bd2:	ea03 0501 	and.w	r5, r3, r1
 8002bd6:	4620      	mov	r0, r4
 8002bd8:	4629      	mov	r1, r5
 8002bda:	f04f 0200 	mov.w	r2, #0
 8002bde:	f04f 0300 	mov.w	r3, #0
 8002be2:	014b      	lsls	r3, r1, #5
 8002be4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002be8:	0142      	lsls	r2, r0, #5
 8002bea:	4610      	mov	r0, r2
 8002bec:	4619      	mov	r1, r3
 8002bee:	1b00      	subs	r0, r0, r4
 8002bf0:	eb61 0105 	sbc.w	r1, r1, r5
 8002bf4:	f04f 0200 	mov.w	r2, #0
 8002bf8:	f04f 0300 	mov.w	r3, #0
 8002bfc:	018b      	lsls	r3, r1, #6
 8002bfe:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002c02:	0182      	lsls	r2, r0, #6
 8002c04:	1a12      	subs	r2, r2, r0
 8002c06:	eb63 0301 	sbc.w	r3, r3, r1
 8002c0a:	f04f 0000 	mov.w	r0, #0
 8002c0e:	f04f 0100 	mov.w	r1, #0
 8002c12:	00d9      	lsls	r1, r3, #3
 8002c14:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002c18:	00d0      	lsls	r0, r2, #3
 8002c1a:	4602      	mov	r2, r0
 8002c1c:	460b      	mov	r3, r1
 8002c1e:	1912      	adds	r2, r2, r4
 8002c20:	eb45 0303 	adc.w	r3, r5, r3
 8002c24:	f04f 0000 	mov.w	r0, #0
 8002c28:	f04f 0100 	mov.w	r1, #0
 8002c2c:	0299      	lsls	r1, r3, #10
 8002c2e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002c32:	0290      	lsls	r0, r2, #10
 8002c34:	4602      	mov	r2, r0
 8002c36:	460b      	mov	r3, r1
 8002c38:	4610      	mov	r0, r2
 8002c3a:	4619      	mov	r1, r3
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	461a      	mov	r2, r3
 8002c40:	f04f 0300 	mov.w	r3, #0
 8002c44:	f7fd fac0 	bl	80001c8 <__aeabi_uldivmod>
 8002c48:	4602      	mov	r2, r0
 8002c4a:	460b      	mov	r3, r1
 8002c4c:	4613      	mov	r3, r2
 8002c4e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002c50:	4b0b      	ldr	r3, [pc, #44]	; (8002c80 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	0c1b      	lsrs	r3, r3, #16
 8002c56:	f003 0303 	and.w	r3, r3, #3
 8002c5a:	3301      	adds	r3, #1
 8002c5c:	005b      	lsls	r3, r3, #1
 8002c5e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002c60:	68fa      	ldr	r2, [r7, #12]
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c68:	60bb      	str	r3, [r7, #8]
      break;
 8002c6a:	e002      	b.n	8002c72 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002c6c:	4b05      	ldr	r3, [pc, #20]	; (8002c84 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002c6e:	60bb      	str	r3, [r7, #8]
      break;
 8002c70:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c72:	68bb      	ldr	r3, [r7, #8]
}
 8002c74:	4618      	mov	r0, r3
 8002c76:	3710      	adds	r7, #16
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002c7e:	bf00      	nop
 8002c80:	40023800 	.word	0x40023800
 8002c84:	00f42400 	.word	0x00f42400
 8002c88:	007a1200 	.word	0x007a1200

08002c8c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c90:	4b03      	ldr	r3, [pc, #12]	; (8002ca0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002c92:	681b      	ldr	r3, [r3, #0]
}
 8002c94:	4618      	mov	r0, r3
 8002c96:	46bd      	mov	sp, r7
 8002c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9c:	4770      	bx	lr
 8002c9e:	bf00      	nop
 8002ca0:	20000000 	.word	0x20000000

08002ca4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002ca4:	b084      	sub	sp, #16
 8002ca6:	b580      	push	{r7, lr}
 8002ca8:	b084      	sub	sp, #16
 8002caa:	af00      	add	r7, sp, #0
 8002cac:	6078      	str	r0, [r7, #4]
 8002cae:	f107 001c 	add.w	r0, r7, #28
 8002cb2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002cb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cb8:	2b01      	cmp	r3, #1
 8002cba:	d122      	bne.n	8002d02 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cc0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	68db      	ldr	r3, [r3, #12]
 8002ccc:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8002cd0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002cd4:	687a      	ldr	r2, [r7, #4]
 8002cd6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	68db      	ldr	r3, [r3, #12]
 8002cdc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8002ce4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ce6:	2b01      	cmp	r3, #1
 8002ce8:	d105      	bne.n	8002cf6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	68db      	ldr	r3, [r3, #12]
 8002cee:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002cf6:	6878      	ldr	r0, [r7, #4]
 8002cf8:	f001 fb1c 	bl	8004334 <USB_CoreReset>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	73fb      	strb	r3, [r7, #15]
 8002d00:	e01a      	b.n	8002d38 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	68db      	ldr	r3, [r3, #12]
 8002d06:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002d0e:	6878      	ldr	r0, [r7, #4]
 8002d10:	f001 fb10 	bl	8004334 <USB_CoreReset>
 8002d14:	4603      	mov	r3, r0
 8002d16:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8002d18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d106      	bne.n	8002d2c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d22:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	639a      	str	r2, [r3, #56]	; 0x38
 8002d2a:	e005      	b.n	8002d38 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d30:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8002d38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d3a:	2b01      	cmp	r3, #1
 8002d3c:	d10b      	bne.n	8002d56 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	689b      	ldr	r3, [r3, #8]
 8002d42:	f043 0206 	orr.w	r2, r3, #6
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	689b      	ldr	r3, [r3, #8]
 8002d4e:	f043 0220 	orr.w	r2, r3, #32
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8002d56:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d58:	4618      	mov	r0, r3
 8002d5a:	3710      	adds	r7, #16
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002d62:	b004      	add	sp, #16
 8002d64:	4770      	bx	lr
	...

08002d68 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b087      	sub	sp, #28
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	60f8      	str	r0, [r7, #12]
 8002d70:	60b9      	str	r1, [r7, #8]
 8002d72:	4613      	mov	r3, r2
 8002d74:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8002d76:	79fb      	ldrb	r3, [r7, #7]
 8002d78:	2b02      	cmp	r3, #2
 8002d7a:	d165      	bne.n	8002e48 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	4a41      	ldr	r2, [pc, #260]	; (8002e84 <USB_SetTurnaroundTime+0x11c>)
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d906      	bls.n	8002d92 <USB_SetTurnaroundTime+0x2a>
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	4a40      	ldr	r2, [pc, #256]	; (8002e88 <USB_SetTurnaroundTime+0x120>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d202      	bcs.n	8002d92 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8002d8c:	230f      	movs	r3, #15
 8002d8e:	617b      	str	r3, [r7, #20]
 8002d90:	e062      	b.n	8002e58 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8002d92:	68bb      	ldr	r3, [r7, #8]
 8002d94:	4a3c      	ldr	r2, [pc, #240]	; (8002e88 <USB_SetTurnaroundTime+0x120>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d306      	bcc.n	8002da8 <USB_SetTurnaroundTime+0x40>
 8002d9a:	68bb      	ldr	r3, [r7, #8]
 8002d9c:	4a3b      	ldr	r2, [pc, #236]	; (8002e8c <USB_SetTurnaroundTime+0x124>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d202      	bcs.n	8002da8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8002da2:	230e      	movs	r3, #14
 8002da4:	617b      	str	r3, [r7, #20]
 8002da6:	e057      	b.n	8002e58 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8002da8:	68bb      	ldr	r3, [r7, #8]
 8002daa:	4a38      	ldr	r2, [pc, #224]	; (8002e8c <USB_SetTurnaroundTime+0x124>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d306      	bcc.n	8002dbe <USB_SetTurnaroundTime+0x56>
 8002db0:	68bb      	ldr	r3, [r7, #8]
 8002db2:	4a37      	ldr	r2, [pc, #220]	; (8002e90 <USB_SetTurnaroundTime+0x128>)
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d202      	bcs.n	8002dbe <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8002db8:	230d      	movs	r3, #13
 8002dba:	617b      	str	r3, [r7, #20]
 8002dbc:	e04c      	b.n	8002e58 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8002dbe:	68bb      	ldr	r3, [r7, #8]
 8002dc0:	4a33      	ldr	r2, [pc, #204]	; (8002e90 <USB_SetTurnaroundTime+0x128>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d306      	bcc.n	8002dd4 <USB_SetTurnaroundTime+0x6c>
 8002dc6:	68bb      	ldr	r3, [r7, #8]
 8002dc8:	4a32      	ldr	r2, [pc, #200]	; (8002e94 <USB_SetTurnaroundTime+0x12c>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d802      	bhi.n	8002dd4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8002dce:	230c      	movs	r3, #12
 8002dd0:	617b      	str	r3, [r7, #20]
 8002dd2:	e041      	b.n	8002e58 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8002dd4:	68bb      	ldr	r3, [r7, #8]
 8002dd6:	4a2f      	ldr	r2, [pc, #188]	; (8002e94 <USB_SetTurnaroundTime+0x12c>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d906      	bls.n	8002dea <USB_SetTurnaroundTime+0x82>
 8002ddc:	68bb      	ldr	r3, [r7, #8]
 8002dde:	4a2e      	ldr	r2, [pc, #184]	; (8002e98 <USB_SetTurnaroundTime+0x130>)
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d802      	bhi.n	8002dea <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8002de4:	230b      	movs	r3, #11
 8002de6:	617b      	str	r3, [r7, #20]
 8002de8:	e036      	b.n	8002e58 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8002dea:	68bb      	ldr	r3, [r7, #8]
 8002dec:	4a2a      	ldr	r2, [pc, #168]	; (8002e98 <USB_SetTurnaroundTime+0x130>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d906      	bls.n	8002e00 <USB_SetTurnaroundTime+0x98>
 8002df2:	68bb      	ldr	r3, [r7, #8]
 8002df4:	4a29      	ldr	r2, [pc, #164]	; (8002e9c <USB_SetTurnaroundTime+0x134>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d802      	bhi.n	8002e00 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8002dfa:	230a      	movs	r3, #10
 8002dfc:	617b      	str	r3, [r7, #20]
 8002dfe:	e02b      	b.n	8002e58 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8002e00:	68bb      	ldr	r3, [r7, #8]
 8002e02:	4a26      	ldr	r2, [pc, #152]	; (8002e9c <USB_SetTurnaroundTime+0x134>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d906      	bls.n	8002e16 <USB_SetTurnaroundTime+0xae>
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	4a25      	ldr	r2, [pc, #148]	; (8002ea0 <USB_SetTurnaroundTime+0x138>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d202      	bcs.n	8002e16 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8002e10:	2309      	movs	r3, #9
 8002e12:	617b      	str	r3, [r7, #20]
 8002e14:	e020      	b.n	8002e58 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8002e16:	68bb      	ldr	r3, [r7, #8]
 8002e18:	4a21      	ldr	r2, [pc, #132]	; (8002ea0 <USB_SetTurnaroundTime+0x138>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d306      	bcc.n	8002e2c <USB_SetTurnaroundTime+0xc4>
 8002e1e:	68bb      	ldr	r3, [r7, #8]
 8002e20:	4a20      	ldr	r2, [pc, #128]	; (8002ea4 <USB_SetTurnaroundTime+0x13c>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d802      	bhi.n	8002e2c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8002e26:	2308      	movs	r3, #8
 8002e28:	617b      	str	r3, [r7, #20]
 8002e2a:	e015      	b.n	8002e58 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8002e2c:	68bb      	ldr	r3, [r7, #8]
 8002e2e:	4a1d      	ldr	r2, [pc, #116]	; (8002ea4 <USB_SetTurnaroundTime+0x13c>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d906      	bls.n	8002e42 <USB_SetTurnaroundTime+0xda>
 8002e34:	68bb      	ldr	r3, [r7, #8]
 8002e36:	4a1c      	ldr	r2, [pc, #112]	; (8002ea8 <USB_SetTurnaroundTime+0x140>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d202      	bcs.n	8002e42 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8002e3c:	2307      	movs	r3, #7
 8002e3e:	617b      	str	r3, [r7, #20]
 8002e40:	e00a      	b.n	8002e58 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8002e42:	2306      	movs	r3, #6
 8002e44:	617b      	str	r3, [r7, #20]
 8002e46:	e007      	b.n	8002e58 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8002e48:	79fb      	ldrb	r3, [r7, #7]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d102      	bne.n	8002e54 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8002e4e:	2309      	movs	r3, #9
 8002e50:	617b      	str	r3, [r7, #20]
 8002e52:	e001      	b.n	8002e58 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8002e54:	2309      	movs	r3, #9
 8002e56:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	68db      	ldr	r3, [r3, #12]
 8002e5c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	68da      	ldr	r2, [r3, #12]
 8002e68:	697b      	ldr	r3, [r7, #20]
 8002e6a:	029b      	lsls	r3, r3, #10
 8002e6c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8002e70:	431a      	orrs	r2, r3
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002e76:	2300      	movs	r3, #0
}
 8002e78:	4618      	mov	r0, r3
 8002e7a:	371c      	adds	r7, #28
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e82:	4770      	bx	lr
 8002e84:	00d8acbf 	.word	0x00d8acbf
 8002e88:	00e4e1c0 	.word	0x00e4e1c0
 8002e8c:	00f42400 	.word	0x00f42400
 8002e90:	01067380 	.word	0x01067380
 8002e94:	011a499f 	.word	0x011a499f
 8002e98:	01312cff 	.word	0x01312cff
 8002e9c:	014ca43f 	.word	0x014ca43f
 8002ea0:	016e3600 	.word	0x016e3600
 8002ea4:	01a6ab1f 	.word	0x01a6ab1f
 8002ea8:	01e84800 	.word	0x01e84800

08002eac <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002eac:	b480      	push	{r7}
 8002eae:	b083      	sub	sp, #12
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	689b      	ldr	r3, [r3, #8]
 8002eb8:	f043 0201 	orr.w	r2, r3, #1
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002ec0:	2300      	movs	r3, #0
}
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	370c      	adds	r7, #12
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ecc:	4770      	bx	lr

08002ece <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002ece:	b480      	push	{r7}
 8002ed0:	b083      	sub	sp, #12
 8002ed2:	af00      	add	r7, sp, #0
 8002ed4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	689b      	ldr	r3, [r3, #8]
 8002eda:	f023 0201 	bic.w	r2, r3, #1
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002ee2:	2300      	movs	r3, #0
}
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	370c      	adds	r7, #12
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eee:	4770      	bx	lr

08002ef0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b084      	sub	sp, #16
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
 8002ef8:	460b      	mov	r3, r1
 8002efa:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8002efc:	2300      	movs	r3, #0
 8002efe:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	68db      	ldr	r3, [r3, #12]
 8002f04:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8002f0c:	78fb      	ldrb	r3, [r7, #3]
 8002f0e:	2b01      	cmp	r3, #1
 8002f10:	d115      	bne.n	8002f3e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	68db      	ldr	r3, [r3, #12]
 8002f16:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8002f1e:	2001      	movs	r0, #1
 8002f20:	f7fd fe06 	bl	8000b30 <HAL_Delay>
      ms++;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	3301      	adds	r3, #1
 8002f28:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8002f2a:	6878      	ldr	r0, [r7, #4]
 8002f2c:	f001 f972 	bl	8004214 <USB_GetMode>
 8002f30:	4603      	mov	r3, r0
 8002f32:	2b01      	cmp	r3, #1
 8002f34:	d01e      	beq.n	8002f74 <USB_SetCurrentMode+0x84>
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	2b31      	cmp	r3, #49	; 0x31
 8002f3a:	d9f0      	bls.n	8002f1e <USB_SetCurrentMode+0x2e>
 8002f3c:	e01a      	b.n	8002f74 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8002f3e:	78fb      	ldrb	r3, [r7, #3]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d115      	bne.n	8002f70 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	68db      	ldr	r3, [r3, #12]
 8002f48:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8002f50:	2001      	movs	r0, #1
 8002f52:	f7fd fded 	bl	8000b30 <HAL_Delay>
      ms++;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	3301      	adds	r3, #1
 8002f5a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8002f5c:	6878      	ldr	r0, [r7, #4]
 8002f5e:	f001 f959 	bl	8004214 <USB_GetMode>
 8002f62:	4603      	mov	r3, r0
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d005      	beq.n	8002f74 <USB_SetCurrentMode+0x84>
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	2b31      	cmp	r3, #49	; 0x31
 8002f6c:	d9f0      	bls.n	8002f50 <USB_SetCurrentMode+0x60>
 8002f6e:	e001      	b.n	8002f74 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8002f70:	2301      	movs	r3, #1
 8002f72:	e005      	b.n	8002f80 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	2b32      	cmp	r3, #50	; 0x32
 8002f78:	d101      	bne.n	8002f7e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	e000      	b.n	8002f80 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8002f7e:	2300      	movs	r3, #0
}
 8002f80:	4618      	mov	r0, r3
 8002f82:	3710      	adds	r7, #16
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bd80      	pop	{r7, pc}

08002f88 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002f88:	b084      	sub	sp, #16
 8002f8a:	b580      	push	{r7, lr}
 8002f8c:	b086      	sub	sp, #24
 8002f8e:	af00      	add	r7, sp, #0
 8002f90:	6078      	str	r0, [r7, #4]
 8002f92:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8002f96:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	613b      	str	r3, [r7, #16]
 8002fa6:	e009      	b.n	8002fbc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8002fa8:	687a      	ldr	r2, [r7, #4]
 8002faa:	693b      	ldr	r3, [r7, #16]
 8002fac:	3340      	adds	r3, #64	; 0x40
 8002fae:	009b      	lsls	r3, r3, #2
 8002fb0:	4413      	add	r3, r2
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8002fb6:	693b      	ldr	r3, [r7, #16]
 8002fb8:	3301      	adds	r3, #1
 8002fba:	613b      	str	r3, [r7, #16]
 8002fbc:	693b      	ldr	r3, [r7, #16]
 8002fbe:	2b0e      	cmp	r3, #14
 8002fc0:	d9f2      	bls.n	8002fa8 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8002fc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d11c      	bne.n	8003002 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	68fa      	ldr	r2, [r7, #12]
 8002fd2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002fd6:	f043 0302 	orr.w	r3, r3, #2
 8002fda:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fe0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fec:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ff8:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	639a      	str	r2, [r3, #56]	; 0x38
 8003000:	e00b      	b.n	800301a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003006:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003012:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003020:	461a      	mov	r2, r3
 8003022:	2300      	movs	r3, #0
 8003024:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800302c:	4619      	mov	r1, r3
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003034:	461a      	mov	r2, r3
 8003036:	680b      	ldr	r3, [r1, #0]
 8003038:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800303a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800303c:	2b01      	cmp	r3, #1
 800303e:	d10c      	bne.n	800305a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003040:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003042:	2b00      	cmp	r3, #0
 8003044:	d104      	bne.n	8003050 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003046:	2100      	movs	r1, #0
 8003048:	6878      	ldr	r0, [r7, #4]
 800304a:	f000 f945 	bl	80032d8 <USB_SetDevSpeed>
 800304e:	e008      	b.n	8003062 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003050:	2101      	movs	r1, #1
 8003052:	6878      	ldr	r0, [r7, #4]
 8003054:	f000 f940 	bl	80032d8 <USB_SetDevSpeed>
 8003058:	e003      	b.n	8003062 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800305a:	2103      	movs	r1, #3
 800305c:	6878      	ldr	r0, [r7, #4]
 800305e:	f000 f93b 	bl	80032d8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003062:	2110      	movs	r1, #16
 8003064:	6878      	ldr	r0, [r7, #4]
 8003066:	f000 f8f3 	bl	8003250 <USB_FlushTxFifo>
 800306a:	4603      	mov	r3, r0
 800306c:	2b00      	cmp	r3, #0
 800306e:	d001      	beq.n	8003074 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8003070:	2301      	movs	r3, #1
 8003072:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003074:	6878      	ldr	r0, [r7, #4]
 8003076:	f000 f90f 	bl	8003298 <USB_FlushRxFifo>
 800307a:	4603      	mov	r3, r0
 800307c:	2b00      	cmp	r3, #0
 800307e:	d001      	beq.n	8003084 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8003080:	2301      	movs	r3, #1
 8003082:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800308a:	461a      	mov	r2, r3
 800308c:	2300      	movs	r3, #0
 800308e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003096:	461a      	mov	r2, r3
 8003098:	2300      	movs	r3, #0
 800309a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030a2:	461a      	mov	r2, r3
 80030a4:	2300      	movs	r3, #0
 80030a6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80030a8:	2300      	movs	r3, #0
 80030aa:	613b      	str	r3, [r7, #16]
 80030ac:	e043      	b.n	8003136 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80030ae:	693b      	ldr	r3, [r7, #16]
 80030b0:	015a      	lsls	r2, r3, #5
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	4413      	add	r3, r2
 80030b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80030c0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80030c4:	d118      	bne.n	80030f8 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80030c6:	693b      	ldr	r3, [r7, #16]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d10a      	bne.n	80030e2 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80030cc:	693b      	ldr	r3, [r7, #16]
 80030ce:	015a      	lsls	r2, r3, #5
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	4413      	add	r3, r2
 80030d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030d8:	461a      	mov	r2, r3
 80030da:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80030de:	6013      	str	r3, [r2, #0]
 80030e0:	e013      	b.n	800310a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80030e2:	693b      	ldr	r3, [r7, #16]
 80030e4:	015a      	lsls	r2, r3, #5
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	4413      	add	r3, r2
 80030ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030ee:	461a      	mov	r2, r3
 80030f0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80030f4:	6013      	str	r3, [r2, #0]
 80030f6:	e008      	b.n	800310a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80030f8:	693b      	ldr	r3, [r7, #16]
 80030fa:	015a      	lsls	r2, r3, #5
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	4413      	add	r3, r2
 8003100:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003104:	461a      	mov	r2, r3
 8003106:	2300      	movs	r3, #0
 8003108:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800310a:	693b      	ldr	r3, [r7, #16]
 800310c:	015a      	lsls	r2, r3, #5
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	4413      	add	r3, r2
 8003112:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003116:	461a      	mov	r2, r3
 8003118:	2300      	movs	r3, #0
 800311a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800311c:	693b      	ldr	r3, [r7, #16]
 800311e:	015a      	lsls	r2, r3, #5
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	4413      	add	r3, r2
 8003124:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003128:	461a      	mov	r2, r3
 800312a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800312e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003130:	693b      	ldr	r3, [r7, #16]
 8003132:	3301      	adds	r3, #1
 8003134:	613b      	str	r3, [r7, #16]
 8003136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003138:	693a      	ldr	r2, [r7, #16]
 800313a:	429a      	cmp	r2, r3
 800313c:	d3b7      	bcc.n	80030ae <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800313e:	2300      	movs	r3, #0
 8003140:	613b      	str	r3, [r7, #16]
 8003142:	e043      	b.n	80031cc <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003144:	693b      	ldr	r3, [r7, #16]
 8003146:	015a      	lsls	r2, r3, #5
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	4413      	add	r3, r2
 800314c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003156:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800315a:	d118      	bne.n	800318e <USB_DevInit+0x206>
    {
      if (i == 0U)
 800315c:	693b      	ldr	r3, [r7, #16]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d10a      	bne.n	8003178 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003162:	693b      	ldr	r3, [r7, #16]
 8003164:	015a      	lsls	r2, r3, #5
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	4413      	add	r3, r2
 800316a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800316e:	461a      	mov	r2, r3
 8003170:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003174:	6013      	str	r3, [r2, #0]
 8003176:	e013      	b.n	80031a0 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003178:	693b      	ldr	r3, [r7, #16]
 800317a:	015a      	lsls	r2, r3, #5
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	4413      	add	r3, r2
 8003180:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003184:	461a      	mov	r2, r3
 8003186:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800318a:	6013      	str	r3, [r2, #0]
 800318c:	e008      	b.n	80031a0 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800318e:	693b      	ldr	r3, [r7, #16]
 8003190:	015a      	lsls	r2, r3, #5
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	4413      	add	r3, r2
 8003196:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800319a:	461a      	mov	r2, r3
 800319c:	2300      	movs	r3, #0
 800319e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80031a0:	693b      	ldr	r3, [r7, #16]
 80031a2:	015a      	lsls	r2, r3, #5
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	4413      	add	r3, r2
 80031a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031ac:	461a      	mov	r2, r3
 80031ae:	2300      	movs	r3, #0
 80031b0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80031b2:	693b      	ldr	r3, [r7, #16]
 80031b4:	015a      	lsls	r2, r3, #5
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	4413      	add	r3, r2
 80031ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031be:	461a      	mov	r2, r3
 80031c0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80031c4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80031c6:	693b      	ldr	r3, [r7, #16]
 80031c8:	3301      	adds	r3, #1
 80031ca:	613b      	str	r3, [r7, #16]
 80031cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ce:	693a      	ldr	r2, [r7, #16]
 80031d0:	429a      	cmp	r2, r3
 80031d2:	d3b7      	bcc.n	8003144 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031da:	691b      	ldr	r3, [r3, #16]
 80031dc:	68fa      	ldr	r2, [r7, #12]
 80031de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80031e2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80031e6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2200      	movs	r2, #0
 80031ec:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80031f4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80031f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d105      	bne.n	8003208 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	699b      	ldr	r3, [r3, #24]
 8003200:	f043 0210 	orr.w	r2, r3, #16
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	699a      	ldr	r2, [r3, #24]
 800320c:	4b0f      	ldr	r3, [pc, #60]	; (800324c <USB_DevInit+0x2c4>)
 800320e:	4313      	orrs	r3, r2
 8003210:	687a      	ldr	r2, [r7, #4]
 8003212:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003214:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003216:	2b00      	cmp	r3, #0
 8003218:	d005      	beq.n	8003226 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	699b      	ldr	r3, [r3, #24]
 800321e:	f043 0208 	orr.w	r2, r3, #8
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003226:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003228:	2b01      	cmp	r3, #1
 800322a:	d107      	bne.n	800323c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	699b      	ldr	r3, [r3, #24]
 8003230:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003234:	f043 0304 	orr.w	r3, r3, #4
 8003238:	687a      	ldr	r2, [r7, #4]
 800323a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800323c:	7dfb      	ldrb	r3, [r7, #23]
}
 800323e:	4618      	mov	r0, r3
 8003240:	3718      	adds	r7, #24
 8003242:	46bd      	mov	sp, r7
 8003244:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003248:	b004      	add	sp, #16
 800324a:	4770      	bx	lr
 800324c:	803c3800 	.word	0x803c3800

08003250 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003250:	b480      	push	{r7}
 8003252:	b085      	sub	sp, #20
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
 8003258:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800325a:	2300      	movs	r3, #0
 800325c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	019b      	lsls	r3, r3, #6
 8003262:	f043 0220 	orr.w	r2, r3, #32
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	3301      	adds	r3, #1
 800326e:	60fb      	str	r3, [r7, #12]
 8003270:	4a08      	ldr	r2, [pc, #32]	; (8003294 <USB_FlushTxFifo+0x44>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d901      	bls.n	800327a <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8003276:	2303      	movs	r3, #3
 8003278:	e006      	b.n	8003288 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	691b      	ldr	r3, [r3, #16]
 800327e:	f003 0320 	and.w	r3, r3, #32
 8003282:	2b20      	cmp	r3, #32
 8003284:	d0f1      	beq.n	800326a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8003286:	2300      	movs	r3, #0
}
 8003288:	4618      	mov	r0, r3
 800328a:	3714      	adds	r7, #20
 800328c:	46bd      	mov	sp, r7
 800328e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003292:	4770      	bx	lr
 8003294:	00030d40 	.word	0x00030d40

08003298 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003298:	b480      	push	{r7}
 800329a:	b085      	sub	sp, #20
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80032a0:	2300      	movs	r3, #0
 80032a2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2210      	movs	r2, #16
 80032a8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	3301      	adds	r3, #1
 80032ae:	60fb      	str	r3, [r7, #12]
 80032b0:	4a08      	ldr	r2, [pc, #32]	; (80032d4 <USB_FlushRxFifo+0x3c>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d901      	bls.n	80032ba <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 80032b6:	2303      	movs	r3, #3
 80032b8:	e006      	b.n	80032c8 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	691b      	ldr	r3, [r3, #16]
 80032be:	f003 0310 	and.w	r3, r3, #16
 80032c2:	2b10      	cmp	r3, #16
 80032c4:	d0f1      	beq.n	80032aa <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80032c6:	2300      	movs	r3, #0
}
 80032c8:	4618      	mov	r0, r3
 80032ca:	3714      	adds	r7, #20
 80032cc:	46bd      	mov	sp, r7
 80032ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d2:	4770      	bx	lr
 80032d4:	00030d40 	.word	0x00030d40

080032d8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80032d8:	b480      	push	{r7}
 80032da:	b085      	sub	sp, #20
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
 80032e0:	460b      	mov	r3, r1
 80032e2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032ee:	681a      	ldr	r2, [r3, #0]
 80032f0:	78fb      	ldrb	r3, [r7, #3]
 80032f2:	68f9      	ldr	r1, [r7, #12]
 80032f4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80032f8:	4313      	orrs	r3, r2
 80032fa:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80032fc:	2300      	movs	r3, #0
}
 80032fe:	4618      	mov	r0, r3
 8003300:	3714      	adds	r7, #20
 8003302:	46bd      	mov	sp, r7
 8003304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003308:	4770      	bx	lr

0800330a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800330a:	b480      	push	{r7}
 800330c:	b087      	sub	sp, #28
 800330e:	af00      	add	r7, sp, #0
 8003310:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8003316:	693b      	ldr	r3, [r7, #16]
 8003318:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800331c:	689b      	ldr	r3, [r3, #8]
 800331e:	f003 0306 	and.w	r3, r3, #6
 8003322:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d102      	bne.n	8003330 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800332a:	2300      	movs	r3, #0
 800332c:	75fb      	strb	r3, [r7, #23]
 800332e:	e00a      	b.n	8003346 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	2b02      	cmp	r3, #2
 8003334:	d002      	beq.n	800333c <USB_GetDevSpeed+0x32>
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	2b06      	cmp	r3, #6
 800333a:	d102      	bne.n	8003342 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800333c:	2302      	movs	r3, #2
 800333e:	75fb      	strb	r3, [r7, #23]
 8003340:	e001      	b.n	8003346 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8003342:	230f      	movs	r3, #15
 8003344:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8003346:	7dfb      	ldrb	r3, [r7, #23]
}
 8003348:	4618      	mov	r0, r3
 800334a:	371c      	adds	r7, #28
 800334c:	46bd      	mov	sp, r7
 800334e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003352:	4770      	bx	lr

08003354 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003354:	b480      	push	{r7}
 8003356:	b085      	sub	sp, #20
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
 800335c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	781b      	ldrb	r3, [r3, #0]
 8003366:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	785b      	ldrb	r3, [r3, #1]
 800336c:	2b01      	cmp	r3, #1
 800336e:	d13a      	bne.n	80033e6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003376:	69da      	ldr	r2, [r3, #28]
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	781b      	ldrb	r3, [r3, #0]
 800337c:	f003 030f 	and.w	r3, r3, #15
 8003380:	2101      	movs	r1, #1
 8003382:	fa01 f303 	lsl.w	r3, r1, r3
 8003386:	b29b      	uxth	r3, r3
 8003388:	68f9      	ldr	r1, [r7, #12]
 800338a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800338e:	4313      	orrs	r3, r2
 8003390:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003392:	68bb      	ldr	r3, [r7, #8]
 8003394:	015a      	lsls	r2, r3, #5
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	4413      	add	r3, r2
 800339a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d155      	bne.n	8003454 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80033a8:	68bb      	ldr	r3, [r7, #8]
 80033aa:	015a      	lsls	r2, r3, #5
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	4413      	add	r3, r2
 80033b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033b4:	681a      	ldr	r2, [r3, #0]
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	689b      	ldr	r3, [r3, #8]
 80033ba:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	78db      	ldrb	r3, [r3, #3]
 80033c2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80033c4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80033c6:	68bb      	ldr	r3, [r7, #8]
 80033c8:	059b      	lsls	r3, r3, #22
 80033ca:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80033cc:	4313      	orrs	r3, r2
 80033ce:	68ba      	ldr	r2, [r7, #8]
 80033d0:	0151      	lsls	r1, r2, #5
 80033d2:	68fa      	ldr	r2, [r7, #12]
 80033d4:	440a      	add	r2, r1
 80033d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80033da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80033e2:	6013      	str	r3, [r2, #0]
 80033e4:	e036      	b.n	8003454 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033ec:	69da      	ldr	r2, [r3, #28]
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	781b      	ldrb	r3, [r3, #0]
 80033f2:	f003 030f 	and.w	r3, r3, #15
 80033f6:	2101      	movs	r1, #1
 80033f8:	fa01 f303 	lsl.w	r3, r1, r3
 80033fc:	041b      	lsls	r3, r3, #16
 80033fe:	68f9      	ldr	r1, [r7, #12]
 8003400:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003404:	4313      	orrs	r3, r2
 8003406:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003408:	68bb      	ldr	r3, [r7, #8]
 800340a:	015a      	lsls	r2, r3, #5
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	4413      	add	r3, r2
 8003410:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800341a:	2b00      	cmp	r3, #0
 800341c:	d11a      	bne.n	8003454 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800341e:	68bb      	ldr	r3, [r7, #8]
 8003420:	015a      	lsls	r2, r3, #5
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	4413      	add	r3, r2
 8003426:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800342a:	681a      	ldr	r2, [r3, #0]
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	689b      	ldr	r3, [r3, #8]
 8003430:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	78db      	ldrb	r3, [r3, #3]
 8003438:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800343a:	430b      	orrs	r3, r1
 800343c:	4313      	orrs	r3, r2
 800343e:	68ba      	ldr	r2, [r7, #8]
 8003440:	0151      	lsls	r1, r2, #5
 8003442:	68fa      	ldr	r2, [r7, #12]
 8003444:	440a      	add	r2, r1
 8003446:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800344a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800344e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003452:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003454:	2300      	movs	r3, #0
}
 8003456:	4618      	mov	r0, r3
 8003458:	3714      	adds	r7, #20
 800345a:	46bd      	mov	sp, r7
 800345c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003460:	4770      	bx	lr
	...

08003464 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003464:	b480      	push	{r7}
 8003466:	b085      	sub	sp, #20
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
 800346c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	781b      	ldrb	r3, [r3, #0]
 8003476:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	785b      	ldrb	r3, [r3, #1]
 800347c:	2b01      	cmp	r3, #1
 800347e:	d161      	bne.n	8003544 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003480:	68bb      	ldr	r3, [r7, #8]
 8003482:	015a      	lsls	r2, r3, #5
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	4413      	add	r3, r2
 8003488:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003492:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003496:	d11f      	bne.n	80034d8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003498:	68bb      	ldr	r3, [r7, #8]
 800349a:	015a      	lsls	r2, r3, #5
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	4413      	add	r3, r2
 80034a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	68ba      	ldr	r2, [r7, #8]
 80034a8:	0151      	lsls	r1, r2, #5
 80034aa:	68fa      	ldr	r2, [r7, #12]
 80034ac:	440a      	add	r2, r1
 80034ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80034b2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80034b6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	015a      	lsls	r2, r3, #5
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	4413      	add	r3, r2
 80034c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	68ba      	ldr	r2, [r7, #8]
 80034c8:	0151      	lsls	r1, r2, #5
 80034ca:	68fa      	ldr	r2, [r7, #12]
 80034cc:	440a      	add	r2, r1
 80034ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80034d2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80034d6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034de:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	781b      	ldrb	r3, [r3, #0]
 80034e4:	f003 030f 	and.w	r3, r3, #15
 80034e8:	2101      	movs	r1, #1
 80034ea:	fa01 f303 	lsl.w	r3, r1, r3
 80034ee:	b29b      	uxth	r3, r3
 80034f0:	43db      	mvns	r3, r3
 80034f2:	68f9      	ldr	r1, [r7, #12]
 80034f4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80034f8:	4013      	ands	r3, r2
 80034fa:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003502:	69da      	ldr	r2, [r3, #28]
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	781b      	ldrb	r3, [r3, #0]
 8003508:	f003 030f 	and.w	r3, r3, #15
 800350c:	2101      	movs	r1, #1
 800350e:	fa01 f303 	lsl.w	r3, r1, r3
 8003512:	b29b      	uxth	r3, r3
 8003514:	43db      	mvns	r3, r3
 8003516:	68f9      	ldr	r1, [r7, #12]
 8003518:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800351c:	4013      	ands	r3, r2
 800351e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003520:	68bb      	ldr	r3, [r7, #8]
 8003522:	015a      	lsls	r2, r3, #5
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	4413      	add	r3, r2
 8003528:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800352c:	681a      	ldr	r2, [r3, #0]
 800352e:	68bb      	ldr	r3, [r7, #8]
 8003530:	0159      	lsls	r1, r3, #5
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	440b      	add	r3, r1
 8003536:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800353a:	4619      	mov	r1, r3
 800353c:	4b35      	ldr	r3, [pc, #212]	; (8003614 <USB_DeactivateEndpoint+0x1b0>)
 800353e:	4013      	ands	r3, r2
 8003540:	600b      	str	r3, [r1, #0]
 8003542:	e060      	b.n	8003606 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003544:	68bb      	ldr	r3, [r7, #8]
 8003546:	015a      	lsls	r2, r3, #5
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	4413      	add	r3, r2
 800354c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003556:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800355a:	d11f      	bne.n	800359c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800355c:	68bb      	ldr	r3, [r7, #8]
 800355e:	015a      	lsls	r2, r3, #5
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	4413      	add	r3, r2
 8003564:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	68ba      	ldr	r2, [r7, #8]
 800356c:	0151      	lsls	r1, r2, #5
 800356e:	68fa      	ldr	r2, [r7, #12]
 8003570:	440a      	add	r2, r1
 8003572:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003576:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800357a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800357c:	68bb      	ldr	r3, [r7, #8]
 800357e:	015a      	lsls	r2, r3, #5
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	4413      	add	r3, r2
 8003584:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	68ba      	ldr	r2, [r7, #8]
 800358c:	0151      	lsls	r1, r2, #5
 800358e:	68fa      	ldr	r2, [r7, #12]
 8003590:	440a      	add	r2, r1
 8003592:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003596:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800359a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	781b      	ldrb	r3, [r3, #0]
 80035a8:	f003 030f 	and.w	r3, r3, #15
 80035ac:	2101      	movs	r1, #1
 80035ae:	fa01 f303 	lsl.w	r3, r1, r3
 80035b2:	041b      	lsls	r3, r3, #16
 80035b4:	43db      	mvns	r3, r3
 80035b6:	68f9      	ldr	r1, [r7, #12]
 80035b8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80035bc:	4013      	ands	r3, r2
 80035be:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035c6:	69da      	ldr	r2, [r3, #28]
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	781b      	ldrb	r3, [r3, #0]
 80035cc:	f003 030f 	and.w	r3, r3, #15
 80035d0:	2101      	movs	r1, #1
 80035d2:	fa01 f303 	lsl.w	r3, r1, r3
 80035d6:	041b      	lsls	r3, r3, #16
 80035d8:	43db      	mvns	r3, r3
 80035da:	68f9      	ldr	r1, [r7, #12]
 80035dc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80035e0:	4013      	ands	r3, r2
 80035e2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80035e4:	68bb      	ldr	r3, [r7, #8]
 80035e6:	015a      	lsls	r2, r3, #5
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	4413      	add	r3, r2
 80035ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035f0:	681a      	ldr	r2, [r3, #0]
 80035f2:	68bb      	ldr	r3, [r7, #8]
 80035f4:	0159      	lsls	r1, r3, #5
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	440b      	add	r3, r1
 80035fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035fe:	4619      	mov	r1, r3
 8003600:	4b05      	ldr	r3, [pc, #20]	; (8003618 <USB_DeactivateEndpoint+0x1b4>)
 8003602:	4013      	ands	r3, r2
 8003604:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8003606:	2300      	movs	r3, #0
}
 8003608:	4618      	mov	r0, r3
 800360a:	3714      	adds	r7, #20
 800360c:	46bd      	mov	sp, r7
 800360e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003612:	4770      	bx	lr
 8003614:	ec337800 	.word	0xec337800
 8003618:	eff37800 	.word	0xeff37800

0800361c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b08a      	sub	sp, #40	; 0x28
 8003620:	af02      	add	r7, sp, #8
 8003622:	60f8      	str	r0, [r7, #12]
 8003624:	60b9      	str	r1, [r7, #8]
 8003626:	4613      	mov	r3, r2
 8003628:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800362e:	68bb      	ldr	r3, [r7, #8]
 8003630:	781b      	ldrb	r3, [r3, #0]
 8003632:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	785b      	ldrb	r3, [r3, #1]
 8003638:	2b01      	cmp	r3, #1
 800363a:	f040 815c 	bne.w	80038f6 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800363e:	68bb      	ldr	r3, [r7, #8]
 8003640:	695b      	ldr	r3, [r3, #20]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d132      	bne.n	80036ac <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003646:	69bb      	ldr	r3, [r7, #24]
 8003648:	015a      	lsls	r2, r3, #5
 800364a:	69fb      	ldr	r3, [r7, #28]
 800364c:	4413      	add	r3, r2
 800364e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003652:	691b      	ldr	r3, [r3, #16]
 8003654:	69ba      	ldr	r2, [r7, #24]
 8003656:	0151      	lsls	r1, r2, #5
 8003658:	69fa      	ldr	r2, [r7, #28]
 800365a:	440a      	add	r2, r1
 800365c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003660:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003664:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003668:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800366a:	69bb      	ldr	r3, [r7, #24]
 800366c:	015a      	lsls	r2, r3, #5
 800366e:	69fb      	ldr	r3, [r7, #28]
 8003670:	4413      	add	r3, r2
 8003672:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003676:	691b      	ldr	r3, [r3, #16]
 8003678:	69ba      	ldr	r2, [r7, #24]
 800367a:	0151      	lsls	r1, r2, #5
 800367c:	69fa      	ldr	r2, [r7, #28]
 800367e:	440a      	add	r2, r1
 8003680:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003684:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003688:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800368a:	69bb      	ldr	r3, [r7, #24]
 800368c:	015a      	lsls	r2, r3, #5
 800368e:	69fb      	ldr	r3, [r7, #28]
 8003690:	4413      	add	r3, r2
 8003692:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003696:	691b      	ldr	r3, [r3, #16]
 8003698:	69ba      	ldr	r2, [r7, #24]
 800369a:	0151      	lsls	r1, r2, #5
 800369c:	69fa      	ldr	r2, [r7, #28]
 800369e:	440a      	add	r2, r1
 80036a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80036a4:	0cdb      	lsrs	r3, r3, #19
 80036a6:	04db      	lsls	r3, r3, #19
 80036a8:	6113      	str	r3, [r2, #16]
 80036aa:	e074      	b.n	8003796 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80036ac:	69bb      	ldr	r3, [r7, #24]
 80036ae:	015a      	lsls	r2, r3, #5
 80036b0:	69fb      	ldr	r3, [r7, #28]
 80036b2:	4413      	add	r3, r2
 80036b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036b8:	691b      	ldr	r3, [r3, #16]
 80036ba:	69ba      	ldr	r2, [r7, #24]
 80036bc:	0151      	lsls	r1, r2, #5
 80036be:	69fa      	ldr	r2, [r7, #28]
 80036c0:	440a      	add	r2, r1
 80036c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80036c6:	0cdb      	lsrs	r3, r3, #19
 80036c8:	04db      	lsls	r3, r3, #19
 80036ca:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80036cc:	69bb      	ldr	r3, [r7, #24]
 80036ce:	015a      	lsls	r2, r3, #5
 80036d0:	69fb      	ldr	r3, [r7, #28]
 80036d2:	4413      	add	r3, r2
 80036d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036d8:	691b      	ldr	r3, [r3, #16]
 80036da:	69ba      	ldr	r2, [r7, #24]
 80036dc:	0151      	lsls	r1, r2, #5
 80036de:	69fa      	ldr	r2, [r7, #28]
 80036e0:	440a      	add	r2, r1
 80036e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80036e6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80036ea:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80036ee:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80036f0:	69bb      	ldr	r3, [r7, #24]
 80036f2:	015a      	lsls	r2, r3, #5
 80036f4:	69fb      	ldr	r3, [r7, #28]
 80036f6:	4413      	add	r3, r2
 80036f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036fc:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80036fe:	68bb      	ldr	r3, [r7, #8]
 8003700:	6959      	ldr	r1, [r3, #20]
 8003702:	68bb      	ldr	r3, [r7, #8]
 8003704:	689b      	ldr	r3, [r3, #8]
 8003706:	440b      	add	r3, r1
 8003708:	1e59      	subs	r1, r3, #1
 800370a:	68bb      	ldr	r3, [r7, #8]
 800370c:	689b      	ldr	r3, [r3, #8]
 800370e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003712:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8003714:	4b9d      	ldr	r3, [pc, #628]	; (800398c <USB_EPStartXfer+0x370>)
 8003716:	400b      	ands	r3, r1
 8003718:	69b9      	ldr	r1, [r7, #24]
 800371a:	0148      	lsls	r0, r1, #5
 800371c:	69f9      	ldr	r1, [r7, #28]
 800371e:	4401      	add	r1, r0
 8003720:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003724:	4313      	orrs	r3, r2
 8003726:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003728:	69bb      	ldr	r3, [r7, #24]
 800372a:	015a      	lsls	r2, r3, #5
 800372c:	69fb      	ldr	r3, [r7, #28]
 800372e:	4413      	add	r3, r2
 8003730:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003734:	691a      	ldr	r2, [r3, #16]
 8003736:	68bb      	ldr	r3, [r7, #8]
 8003738:	695b      	ldr	r3, [r3, #20]
 800373a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800373e:	69b9      	ldr	r1, [r7, #24]
 8003740:	0148      	lsls	r0, r1, #5
 8003742:	69f9      	ldr	r1, [r7, #28]
 8003744:	4401      	add	r1, r0
 8003746:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800374a:	4313      	orrs	r3, r2
 800374c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800374e:	68bb      	ldr	r3, [r7, #8]
 8003750:	78db      	ldrb	r3, [r3, #3]
 8003752:	2b01      	cmp	r3, #1
 8003754:	d11f      	bne.n	8003796 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8003756:	69bb      	ldr	r3, [r7, #24]
 8003758:	015a      	lsls	r2, r3, #5
 800375a:	69fb      	ldr	r3, [r7, #28]
 800375c:	4413      	add	r3, r2
 800375e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003762:	691b      	ldr	r3, [r3, #16]
 8003764:	69ba      	ldr	r2, [r7, #24]
 8003766:	0151      	lsls	r1, r2, #5
 8003768:	69fa      	ldr	r2, [r7, #28]
 800376a:	440a      	add	r2, r1
 800376c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003770:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8003774:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8003776:	69bb      	ldr	r3, [r7, #24]
 8003778:	015a      	lsls	r2, r3, #5
 800377a:	69fb      	ldr	r3, [r7, #28]
 800377c:	4413      	add	r3, r2
 800377e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003782:	691b      	ldr	r3, [r3, #16]
 8003784:	69ba      	ldr	r2, [r7, #24]
 8003786:	0151      	lsls	r1, r2, #5
 8003788:	69fa      	ldr	r2, [r7, #28]
 800378a:	440a      	add	r2, r1
 800378c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003790:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003794:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8003796:	79fb      	ldrb	r3, [r7, #7]
 8003798:	2b01      	cmp	r3, #1
 800379a:	d14b      	bne.n	8003834 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	691b      	ldr	r3, [r3, #16]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d009      	beq.n	80037b8 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80037a4:	69bb      	ldr	r3, [r7, #24]
 80037a6:	015a      	lsls	r2, r3, #5
 80037a8:	69fb      	ldr	r3, [r7, #28]
 80037aa:	4413      	add	r3, r2
 80037ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037b0:	461a      	mov	r2, r3
 80037b2:	68bb      	ldr	r3, [r7, #8]
 80037b4:	691b      	ldr	r3, [r3, #16]
 80037b6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80037b8:	68bb      	ldr	r3, [r7, #8]
 80037ba:	78db      	ldrb	r3, [r3, #3]
 80037bc:	2b01      	cmp	r3, #1
 80037be:	d128      	bne.n	8003812 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80037c0:	69fb      	ldr	r3, [r7, #28]
 80037c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037c6:	689b      	ldr	r3, [r3, #8]
 80037c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d110      	bne.n	80037f2 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80037d0:	69bb      	ldr	r3, [r7, #24]
 80037d2:	015a      	lsls	r2, r3, #5
 80037d4:	69fb      	ldr	r3, [r7, #28]
 80037d6:	4413      	add	r3, r2
 80037d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	69ba      	ldr	r2, [r7, #24]
 80037e0:	0151      	lsls	r1, r2, #5
 80037e2:	69fa      	ldr	r2, [r7, #28]
 80037e4:	440a      	add	r2, r1
 80037e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80037ea:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80037ee:	6013      	str	r3, [r2, #0]
 80037f0:	e00f      	b.n	8003812 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80037f2:	69bb      	ldr	r3, [r7, #24]
 80037f4:	015a      	lsls	r2, r3, #5
 80037f6:	69fb      	ldr	r3, [r7, #28]
 80037f8:	4413      	add	r3, r2
 80037fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	69ba      	ldr	r2, [r7, #24]
 8003802:	0151      	lsls	r1, r2, #5
 8003804:	69fa      	ldr	r2, [r7, #28]
 8003806:	440a      	add	r2, r1
 8003808:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800380c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003810:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003812:	69bb      	ldr	r3, [r7, #24]
 8003814:	015a      	lsls	r2, r3, #5
 8003816:	69fb      	ldr	r3, [r7, #28]
 8003818:	4413      	add	r3, r2
 800381a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	69ba      	ldr	r2, [r7, #24]
 8003822:	0151      	lsls	r1, r2, #5
 8003824:	69fa      	ldr	r2, [r7, #28]
 8003826:	440a      	add	r2, r1
 8003828:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800382c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003830:	6013      	str	r3, [r2, #0]
 8003832:	e12f      	b.n	8003a94 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003834:	69bb      	ldr	r3, [r7, #24]
 8003836:	015a      	lsls	r2, r3, #5
 8003838:	69fb      	ldr	r3, [r7, #28]
 800383a:	4413      	add	r3, r2
 800383c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	69ba      	ldr	r2, [r7, #24]
 8003844:	0151      	lsls	r1, r2, #5
 8003846:	69fa      	ldr	r2, [r7, #28]
 8003848:	440a      	add	r2, r1
 800384a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800384e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003852:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003854:	68bb      	ldr	r3, [r7, #8]
 8003856:	78db      	ldrb	r3, [r3, #3]
 8003858:	2b01      	cmp	r3, #1
 800385a:	d015      	beq.n	8003888 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800385c:	68bb      	ldr	r3, [r7, #8]
 800385e:	695b      	ldr	r3, [r3, #20]
 8003860:	2b00      	cmp	r3, #0
 8003862:	f000 8117 	beq.w	8003a94 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003866:	69fb      	ldr	r3, [r7, #28]
 8003868:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800386c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800386e:	68bb      	ldr	r3, [r7, #8]
 8003870:	781b      	ldrb	r3, [r3, #0]
 8003872:	f003 030f 	and.w	r3, r3, #15
 8003876:	2101      	movs	r1, #1
 8003878:	fa01 f303 	lsl.w	r3, r1, r3
 800387c:	69f9      	ldr	r1, [r7, #28]
 800387e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003882:	4313      	orrs	r3, r2
 8003884:	634b      	str	r3, [r1, #52]	; 0x34
 8003886:	e105      	b.n	8003a94 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003888:	69fb      	ldr	r3, [r7, #28]
 800388a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800388e:	689b      	ldr	r3, [r3, #8]
 8003890:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003894:	2b00      	cmp	r3, #0
 8003896:	d110      	bne.n	80038ba <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003898:	69bb      	ldr	r3, [r7, #24]
 800389a:	015a      	lsls	r2, r3, #5
 800389c:	69fb      	ldr	r3, [r7, #28]
 800389e:	4413      	add	r3, r2
 80038a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	69ba      	ldr	r2, [r7, #24]
 80038a8:	0151      	lsls	r1, r2, #5
 80038aa:	69fa      	ldr	r2, [r7, #28]
 80038ac:	440a      	add	r2, r1
 80038ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80038b2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80038b6:	6013      	str	r3, [r2, #0]
 80038b8:	e00f      	b.n	80038da <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80038ba:	69bb      	ldr	r3, [r7, #24]
 80038bc:	015a      	lsls	r2, r3, #5
 80038be:	69fb      	ldr	r3, [r7, #28]
 80038c0:	4413      	add	r3, r2
 80038c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	69ba      	ldr	r2, [r7, #24]
 80038ca:	0151      	lsls	r1, r2, #5
 80038cc:	69fa      	ldr	r2, [r7, #28]
 80038ce:	440a      	add	r2, r1
 80038d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80038d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038d8:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80038da:	68bb      	ldr	r3, [r7, #8]
 80038dc:	68d9      	ldr	r1, [r3, #12]
 80038de:	68bb      	ldr	r3, [r7, #8]
 80038e0:	781a      	ldrb	r2, [r3, #0]
 80038e2:	68bb      	ldr	r3, [r7, #8]
 80038e4:	695b      	ldr	r3, [r3, #20]
 80038e6:	b298      	uxth	r0, r3
 80038e8:	79fb      	ldrb	r3, [r7, #7]
 80038ea:	9300      	str	r3, [sp, #0]
 80038ec:	4603      	mov	r3, r0
 80038ee:	68f8      	ldr	r0, [r7, #12]
 80038f0:	f000 fa2b 	bl	8003d4a <USB_WritePacket>
 80038f4:	e0ce      	b.n	8003a94 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80038f6:	69bb      	ldr	r3, [r7, #24]
 80038f8:	015a      	lsls	r2, r3, #5
 80038fa:	69fb      	ldr	r3, [r7, #28]
 80038fc:	4413      	add	r3, r2
 80038fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003902:	691b      	ldr	r3, [r3, #16]
 8003904:	69ba      	ldr	r2, [r7, #24]
 8003906:	0151      	lsls	r1, r2, #5
 8003908:	69fa      	ldr	r2, [r7, #28]
 800390a:	440a      	add	r2, r1
 800390c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003910:	0cdb      	lsrs	r3, r3, #19
 8003912:	04db      	lsls	r3, r3, #19
 8003914:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003916:	69bb      	ldr	r3, [r7, #24]
 8003918:	015a      	lsls	r2, r3, #5
 800391a:	69fb      	ldr	r3, [r7, #28]
 800391c:	4413      	add	r3, r2
 800391e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003922:	691b      	ldr	r3, [r3, #16]
 8003924:	69ba      	ldr	r2, [r7, #24]
 8003926:	0151      	lsls	r1, r2, #5
 8003928:	69fa      	ldr	r2, [r7, #28]
 800392a:	440a      	add	r2, r1
 800392c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003930:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003934:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003938:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800393a:	68bb      	ldr	r3, [r7, #8]
 800393c:	695b      	ldr	r3, [r3, #20]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d126      	bne.n	8003990 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8003942:	69bb      	ldr	r3, [r7, #24]
 8003944:	015a      	lsls	r2, r3, #5
 8003946:	69fb      	ldr	r3, [r7, #28]
 8003948:	4413      	add	r3, r2
 800394a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800394e:	691a      	ldr	r2, [r3, #16]
 8003950:	68bb      	ldr	r3, [r7, #8]
 8003952:	689b      	ldr	r3, [r3, #8]
 8003954:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003958:	69b9      	ldr	r1, [r7, #24]
 800395a:	0148      	lsls	r0, r1, #5
 800395c:	69f9      	ldr	r1, [r7, #28]
 800395e:	4401      	add	r1, r0
 8003960:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003964:	4313      	orrs	r3, r2
 8003966:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003968:	69bb      	ldr	r3, [r7, #24]
 800396a:	015a      	lsls	r2, r3, #5
 800396c:	69fb      	ldr	r3, [r7, #28]
 800396e:	4413      	add	r3, r2
 8003970:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003974:	691b      	ldr	r3, [r3, #16]
 8003976:	69ba      	ldr	r2, [r7, #24]
 8003978:	0151      	lsls	r1, r2, #5
 800397a:	69fa      	ldr	r2, [r7, #28]
 800397c:	440a      	add	r2, r1
 800397e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003982:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003986:	6113      	str	r3, [r2, #16]
 8003988:	e036      	b.n	80039f8 <USB_EPStartXfer+0x3dc>
 800398a:	bf00      	nop
 800398c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8003990:	68bb      	ldr	r3, [r7, #8]
 8003992:	695a      	ldr	r2, [r3, #20]
 8003994:	68bb      	ldr	r3, [r7, #8]
 8003996:	689b      	ldr	r3, [r3, #8]
 8003998:	4413      	add	r3, r2
 800399a:	1e5a      	subs	r2, r3, #1
 800399c:	68bb      	ldr	r3, [r7, #8]
 800399e:	689b      	ldr	r3, [r3, #8]
 80039a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80039a4:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80039a6:	69bb      	ldr	r3, [r7, #24]
 80039a8:	015a      	lsls	r2, r3, #5
 80039aa:	69fb      	ldr	r3, [r7, #28]
 80039ac:	4413      	add	r3, r2
 80039ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039b2:	691a      	ldr	r2, [r3, #16]
 80039b4:	8afb      	ldrh	r3, [r7, #22]
 80039b6:	04d9      	lsls	r1, r3, #19
 80039b8:	4b39      	ldr	r3, [pc, #228]	; (8003aa0 <USB_EPStartXfer+0x484>)
 80039ba:	400b      	ands	r3, r1
 80039bc:	69b9      	ldr	r1, [r7, #24]
 80039be:	0148      	lsls	r0, r1, #5
 80039c0:	69f9      	ldr	r1, [r7, #28]
 80039c2:	4401      	add	r1, r0
 80039c4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80039c8:	4313      	orrs	r3, r2
 80039ca:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80039cc:	69bb      	ldr	r3, [r7, #24]
 80039ce:	015a      	lsls	r2, r3, #5
 80039d0:	69fb      	ldr	r3, [r7, #28]
 80039d2:	4413      	add	r3, r2
 80039d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039d8:	691a      	ldr	r2, [r3, #16]
 80039da:	68bb      	ldr	r3, [r7, #8]
 80039dc:	689b      	ldr	r3, [r3, #8]
 80039de:	8af9      	ldrh	r1, [r7, #22]
 80039e0:	fb01 f303 	mul.w	r3, r1, r3
 80039e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039e8:	69b9      	ldr	r1, [r7, #24]
 80039ea:	0148      	lsls	r0, r1, #5
 80039ec:	69f9      	ldr	r1, [r7, #28]
 80039ee:	4401      	add	r1, r0
 80039f0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80039f4:	4313      	orrs	r3, r2
 80039f6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80039f8:	79fb      	ldrb	r3, [r7, #7]
 80039fa:	2b01      	cmp	r3, #1
 80039fc:	d10d      	bne.n	8003a1a <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80039fe:	68bb      	ldr	r3, [r7, #8]
 8003a00:	68db      	ldr	r3, [r3, #12]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d009      	beq.n	8003a1a <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8003a06:	68bb      	ldr	r3, [r7, #8]
 8003a08:	68d9      	ldr	r1, [r3, #12]
 8003a0a:	69bb      	ldr	r3, [r7, #24]
 8003a0c:	015a      	lsls	r2, r3, #5
 8003a0e:	69fb      	ldr	r3, [r7, #28]
 8003a10:	4413      	add	r3, r2
 8003a12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a16:	460a      	mov	r2, r1
 8003a18:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8003a1a:	68bb      	ldr	r3, [r7, #8]
 8003a1c:	78db      	ldrb	r3, [r3, #3]
 8003a1e:	2b01      	cmp	r3, #1
 8003a20:	d128      	bne.n	8003a74 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003a22:	69fb      	ldr	r3, [r7, #28]
 8003a24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a28:	689b      	ldr	r3, [r3, #8]
 8003a2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d110      	bne.n	8003a54 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8003a32:	69bb      	ldr	r3, [r7, #24]
 8003a34:	015a      	lsls	r2, r3, #5
 8003a36:	69fb      	ldr	r3, [r7, #28]
 8003a38:	4413      	add	r3, r2
 8003a3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	69ba      	ldr	r2, [r7, #24]
 8003a42:	0151      	lsls	r1, r2, #5
 8003a44:	69fa      	ldr	r2, [r7, #28]
 8003a46:	440a      	add	r2, r1
 8003a48:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003a4c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003a50:	6013      	str	r3, [r2, #0]
 8003a52:	e00f      	b.n	8003a74 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8003a54:	69bb      	ldr	r3, [r7, #24]
 8003a56:	015a      	lsls	r2, r3, #5
 8003a58:	69fb      	ldr	r3, [r7, #28]
 8003a5a:	4413      	add	r3, r2
 8003a5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	69ba      	ldr	r2, [r7, #24]
 8003a64:	0151      	lsls	r1, r2, #5
 8003a66:	69fa      	ldr	r2, [r7, #28]
 8003a68:	440a      	add	r2, r1
 8003a6a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003a6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a72:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003a74:	69bb      	ldr	r3, [r7, #24]
 8003a76:	015a      	lsls	r2, r3, #5
 8003a78:	69fb      	ldr	r3, [r7, #28]
 8003a7a:	4413      	add	r3, r2
 8003a7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	69ba      	ldr	r2, [r7, #24]
 8003a84:	0151      	lsls	r1, r2, #5
 8003a86:	69fa      	ldr	r2, [r7, #28]
 8003a88:	440a      	add	r2, r1
 8003a8a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003a8e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003a92:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003a94:	2300      	movs	r3, #0
}
 8003a96:	4618      	mov	r0, r3
 8003a98:	3720      	adds	r7, #32
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	bd80      	pop	{r7, pc}
 8003a9e:	bf00      	nop
 8003aa0:	1ff80000 	.word	0x1ff80000

08003aa4 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	b087      	sub	sp, #28
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	60f8      	str	r0, [r7, #12]
 8003aac:	60b9      	str	r1, [r7, #8]
 8003aae:	4613      	mov	r3, r2
 8003ab0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8003ab6:	68bb      	ldr	r3, [r7, #8]
 8003ab8:	781b      	ldrb	r3, [r3, #0]
 8003aba:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003abc:	68bb      	ldr	r3, [r7, #8]
 8003abe:	785b      	ldrb	r3, [r3, #1]
 8003ac0:	2b01      	cmp	r3, #1
 8003ac2:	f040 80cd 	bne.w	8003c60 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003ac6:	68bb      	ldr	r3, [r7, #8]
 8003ac8:	695b      	ldr	r3, [r3, #20]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d132      	bne.n	8003b34 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003ace:	693b      	ldr	r3, [r7, #16]
 8003ad0:	015a      	lsls	r2, r3, #5
 8003ad2:	697b      	ldr	r3, [r7, #20]
 8003ad4:	4413      	add	r3, r2
 8003ad6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ada:	691b      	ldr	r3, [r3, #16]
 8003adc:	693a      	ldr	r2, [r7, #16]
 8003ade:	0151      	lsls	r1, r2, #5
 8003ae0:	697a      	ldr	r2, [r7, #20]
 8003ae2:	440a      	add	r2, r1
 8003ae4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ae8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003aec:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003af0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003af2:	693b      	ldr	r3, [r7, #16]
 8003af4:	015a      	lsls	r2, r3, #5
 8003af6:	697b      	ldr	r3, [r7, #20]
 8003af8:	4413      	add	r3, r2
 8003afa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003afe:	691b      	ldr	r3, [r3, #16]
 8003b00:	693a      	ldr	r2, [r7, #16]
 8003b02:	0151      	lsls	r1, r2, #5
 8003b04:	697a      	ldr	r2, [r7, #20]
 8003b06:	440a      	add	r2, r1
 8003b08:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b0c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003b10:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003b12:	693b      	ldr	r3, [r7, #16]
 8003b14:	015a      	lsls	r2, r3, #5
 8003b16:	697b      	ldr	r3, [r7, #20]
 8003b18:	4413      	add	r3, r2
 8003b1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b1e:	691b      	ldr	r3, [r3, #16]
 8003b20:	693a      	ldr	r2, [r7, #16]
 8003b22:	0151      	lsls	r1, r2, #5
 8003b24:	697a      	ldr	r2, [r7, #20]
 8003b26:	440a      	add	r2, r1
 8003b28:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b2c:	0cdb      	lsrs	r3, r3, #19
 8003b2e:	04db      	lsls	r3, r3, #19
 8003b30:	6113      	str	r3, [r2, #16]
 8003b32:	e04e      	b.n	8003bd2 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003b34:	693b      	ldr	r3, [r7, #16]
 8003b36:	015a      	lsls	r2, r3, #5
 8003b38:	697b      	ldr	r3, [r7, #20]
 8003b3a:	4413      	add	r3, r2
 8003b3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b40:	691b      	ldr	r3, [r3, #16]
 8003b42:	693a      	ldr	r2, [r7, #16]
 8003b44:	0151      	lsls	r1, r2, #5
 8003b46:	697a      	ldr	r2, [r7, #20]
 8003b48:	440a      	add	r2, r1
 8003b4a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b4e:	0cdb      	lsrs	r3, r3, #19
 8003b50:	04db      	lsls	r3, r3, #19
 8003b52:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003b54:	693b      	ldr	r3, [r7, #16]
 8003b56:	015a      	lsls	r2, r3, #5
 8003b58:	697b      	ldr	r3, [r7, #20]
 8003b5a:	4413      	add	r3, r2
 8003b5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b60:	691b      	ldr	r3, [r3, #16]
 8003b62:	693a      	ldr	r2, [r7, #16]
 8003b64:	0151      	lsls	r1, r2, #5
 8003b66:	697a      	ldr	r2, [r7, #20]
 8003b68:	440a      	add	r2, r1
 8003b6a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b6e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003b72:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003b76:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8003b78:	68bb      	ldr	r3, [r7, #8]
 8003b7a:	695a      	ldr	r2, [r3, #20]
 8003b7c:	68bb      	ldr	r3, [r7, #8]
 8003b7e:	689b      	ldr	r3, [r3, #8]
 8003b80:	429a      	cmp	r2, r3
 8003b82:	d903      	bls.n	8003b8c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8003b84:	68bb      	ldr	r3, [r7, #8]
 8003b86:	689a      	ldr	r2, [r3, #8]
 8003b88:	68bb      	ldr	r3, [r7, #8]
 8003b8a:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003b8c:	693b      	ldr	r3, [r7, #16]
 8003b8e:	015a      	lsls	r2, r3, #5
 8003b90:	697b      	ldr	r3, [r7, #20]
 8003b92:	4413      	add	r3, r2
 8003b94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b98:	691b      	ldr	r3, [r3, #16]
 8003b9a:	693a      	ldr	r2, [r7, #16]
 8003b9c:	0151      	lsls	r1, r2, #5
 8003b9e:	697a      	ldr	r2, [r7, #20]
 8003ba0:	440a      	add	r2, r1
 8003ba2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ba6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003baa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003bac:	693b      	ldr	r3, [r7, #16]
 8003bae:	015a      	lsls	r2, r3, #5
 8003bb0:	697b      	ldr	r3, [r7, #20]
 8003bb2:	4413      	add	r3, r2
 8003bb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bb8:	691a      	ldr	r2, [r3, #16]
 8003bba:	68bb      	ldr	r3, [r7, #8]
 8003bbc:	695b      	ldr	r3, [r3, #20]
 8003bbe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003bc2:	6939      	ldr	r1, [r7, #16]
 8003bc4:	0148      	lsls	r0, r1, #5
 8003bc6:	6979      	ldr	r1, [r7, #20]
 8003bc8:	4401      	add	r1, r0
 8003bca:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003bce:	4313      	orrs	r3, r2
 8003bd0:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8003bd2:	79fb      	ldrb	r3, [r7, #7]
 8003bd4:	2b01      	cmp	r3, #1
 8003bd6:	d11e      	bne.n	8003c16 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8003bd8:	68bb      	ldr	r3, [r7, #8]
 8003bda:	691b      	ldr	r3, [r3, #16]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d009      	beq.n	8003bf4 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003be0:	693b      	ldr	r3, [r7, #16]
 8003be2:	015a      	lsls	r2, r3, #5
 8003be4:	697b      	ldr	r3, [r7, #20]
 8003be6:	4413      	add	r3, r2
 8003be8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bec:	461a      	mov	r2, r3
 8003bee:	68bb      	ldr	r3, [r7, #8]
 8003bf0:	691b      	ldr	r3, [r3, #16]
 8003bf2:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003bf4:	693b      	ldr	r3, [r7, #16]
 8003bf6:	015a      	lsls	r2, r3, #5
 8003bf8:	697b      	ldr	r3, [r7, #20]
 8003bfa:	4413      	add	r3, r2
 8003bfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	693a      	ldr	r2, [r7, #16]
 8003c04:	0151      	lsls	r1, r2, #5
 8003c06:	697a      	ldr	r2, [r7, #20]
 8003c08:	440a      	add	r2, r1
 8003c0a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c0e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003c12:	6013      	str	r3, [r2, #0]
 8003c14:	e092      	b.n	8003d3c <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003c16:	693b      	ldr	r3, [r7, #16]
 8003c18:	015a      	lsls	r2, r3, #5
 8003c1a:	697b      	ldr	r3, [r7, #20]
 8003c1c:	4413      	add	r3, r2
 8003c1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	693a      	ldr	r2, [r7, #16]
 8003c26:	0151      	lsls	r1, r2, #5
 8003c28:	697a      	ldr	r2, [r7, #20]
 8003c2a:	440a      	add	r2, r1
 8003c2c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c30:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003c34:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8003c36:	68bb      	ldr	r3, [r7, #8]
 8003c38:	695b      	ldr	r3, [r3, #20]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d07e      	beq.n	8003d3c <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003c3e:	697b      	ldr	r3, [r7, #20]
 8003c40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c44:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c46:	68bb      	ldr	r3, [r7, #8]
 8003c48:	781b      	ldrb	r3, [r3, #0]
 8003c4a:	f003 030f 	and.w	r3, r3, #15
 8003c4e:	2101      	movs	r1, #1
 8003c50:	fa01 f303 	lsl.w	r3, r1, r3
 8003c54:	6979      	ldr	r1, [r7, #20]
 8003c56:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	634b      	str	r3, [r1, #52]	; 0x34
 8003c5e:	e06d      	b.n	8003d3c <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003c60:	693b      	ldr	r3, [r7, #16]
 8003c62:	015a      	lsls	r2, r3, #5
 8003c64:	697b      	ldr	r3, [r7, #20]
 8003c66:	4413      	add	r3, r2
 8003c68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c6c:	691b      	ldr	r3, [r3, #16]
 8003c6e:	693a      	ldr	r2, [r7, #16]
 8003c70:	0151      	lsls	r1, r2, #5
 8003c72:	697a      	ldr	r2, [r7, #20]
 8003c74:	440a      	add	r2, r1
 8003c76:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003c7a:	0cdb      	lsrs	r3, r3, #19
 8003c7c:	04db      	lsls	r3, r3, #19
 8003c7e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003c80:	693b      	ldr	r3, [r7, #16]
 8003c82:	015a      	lsls	r2, r3, #5
 8003c84:	697b      	ldr	r3, [r7, #20]
 8003c86:	4413      	add	r3, r2
 8003c88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c8c:	691b      	ldr	r3, [r3, #16]
 8003c8e:	693a      	ldr	r2, [r7, #16]
 8003c90:	0151      	lsls	r1, r2, #5
 8003c92:	697a      	ldr	r2, [r7, #20]
 8003c94:	440a      	add	r2, r1
 8003c96:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003c9a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003c9e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003ca2:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8003ca4:	68bb      	ldr	r3, [r7, #8]
 8003ca6:	695b      	ldr	r3, [r3, #20]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d003      	beq.n	8003cb4 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8003cac:	68bb      	ldr	r3, [r7, #8]
 8003cae:	689a      	ldr	r2, [r3, #8]
 8003cb0:	68bb      	ldr	r3, [r7, #8]
 8003cb2:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003cb4:	693b      	ldr	r3, [r7, #16]
 8003cb6:	015a      	lsls	r2, r3, #5
 8003cb8:	697b      	ldr	r3, [r7, #20]
 8003cba:	4413      	add	r3, r2
 8003cbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cc0:	691b      	ldr	r3, [r3, #16]
 8003cc2:	693a      	ldr	r2, [r7, #16]
 8003cc4:	0151      	lsls	r1, r2, #5
 8003cc6:	697a      	ldr	r2, [r7, #20]
 8003cc8:	440a      	add	r2, r1
 8003cca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003cce:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003cd2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8003cd4:	693b      	ldr	r3, [r7, #16]
 8003cd6:	015a      	lsls	r2, r3, #5
 8003cd8:	697b      	ldr	r3, [r7, #20]
 8003cda:	4413      	add	r3, r2
 8003cdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ce0:	691a      	ldr	r2, [r3, #16]
 8003ce2:	68bb      	ldr	r3, [r7, #8]
 8003ce4:	689b      	ldr	r3, [r3, #8]
 8003ce6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003cea:	6939      	ldr	r1, [r7, #16]
 8003cec:	0148      	lsls	r0, r1, #5
 8003cee:	6979      	ldr	r1, [r7, #20]
 8003cf0:	4401      	add	r1, r0
 8003cf2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8003cfa:	79fb      	ldrb	r3, [r7, #7]
 8003cfc:	2b01      	cmp	r3, #1
 8003cfe:	d10d      	bne.n	8003d1c <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8003d00:	68bb      	ldr	r3, [r7, #8]
 8003d02:	68db      	ldr	r3, [r3, #12]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d009      	beq.n	8003d1c <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8003d08:	68bb      	ldr	r3, [r7, #8]
 8003d0a:	68d9      	ldr	r1, [r3, #12]
 8003d0c:	693b      	ldr	r3, [r7, #16]
 8003d0e:	015a      	lsls	r2, r3, #5
 8003d10:	697b      	ldr	r3, [r7, #20]
 8003d12:	4413      	add	r3, r2
 8003d14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d18:	460a      	mov	r2, r1
 8003d1a:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003d1c:	693b      	ldr	r3, [r7, #16]
 8003d1e:	015a      	lsls	r2, r3, #5
 8003d20:	697b      	ldr	r3, [r7, #20]
 8003d22:	4413      	add	r3, r2
 8003d24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	693a      	ldr	r2, [r7, #16]
 8003d2c:	0151      	lsls	r1, r2, #5
 8003d2e:	697a      	ldr	r2, [r7, #20]
 8003d30:	440a      	add	r2, r1
 8003d32:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003d36:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003d3a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003d3c:	2300      	movs	r3, #0
}
 8003d3e:	4618      	mov	r0, r3
 8003d40:	371c      	adds	r7, #28
 8003d42:	46bd      	mov	sp, r7
 8003d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d48:	4770      	bx	lr

08003d4a <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8003d4a:	b480      	push	{r7}
 8003d4c:	b089      	sub	sp, #36	; 0x24
 8003d4e:	af00      	add	r7, sp, #0
 8003d50:	60f8      	str	r0, [r7, #12]
 8003d52:	60b9      	str	r1, [r7, #8]
 8003d54:	4611      	mov	r1, r2
 8003d56:	461a      	mov	r2, r3
 8003d58:	460b      	mov	r3, r1
 8003d5a:	71fb      	strb	r3, [r7, #7]
 8003d5c:	4613      	mov	r3, r2
 8003d5e:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8003d64:	68bb      	ldr	r3, [r7, #8]
 8003d66:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8003d68:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d123      	bne.n	8003db8 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8003d70:	88bb      	ldrh	r3, [r7, #4]
 8003d72:	3303      	adds	r3, #3
 8003d74:	089b      	lsrs	r3, r3, #2
 8003d76:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8003d78:	2300      	movs	r3, #0
 8003d7a:	61bb      	str	r3, [r7, #24]
 8003d7c:	e018      	b.n	8003db0 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8003d7e:	79fb      	ldrb	r3, [r7, #7]
 8003d80:	031a      	lsls	r2, r3, #12
 8003d82:	697b      	ldr	r3, [r7, #20]
 8003d84:	4413      	add	r3, r2
 8003d86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d8a:	461a      	mov	r2, r3
 8003d8c:	69fb      	ldr	r3, [r7, #28]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	6013      	str	r3, [r2, #0]
      pSrc++;
 8003d92:	69fb      	ldr	r3, [r7, #28]
 8003d94:	3301      	adds	r3, #1
 8003d96:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003d98:	69fb      	ldr	r3, [r7, #28]
 8003d9a:	3301      	adds	r3, #1
 8003d9c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003d9e:	69fb      	ldr	r3, [r7, #28]
 8003da0:	3301      	adds	r3, #1
 8003da2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003da4:	69fb      	ldr	r3, [r7, #28]
 8003da6:	3301      	adds	r3, #1
 8003da8:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8003daa:	69bb      	ldr	r3, [r7, #24]
 8003dac:	3301      	adds	r3, #1
 8003dae:	61bb      	str	r3, [r7, #24]
 8003db0:	69ba      	ldr	r2, [r7, #24]
 8003db2:	693b      	ldr	r3, [r7, #16]
 8003db4:	429a      	cmp	r2, r3
 8003db6:	d3e2      	bcc.n	8003d7e <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8003db8:	2300      	movs	r3, #0
}
 8003dba:	4618      	mov	r0, r3
 8003dbc:	3724      	adds	r7, #36	; 0x24
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc4:	4770      	bx	lr

08003dc6 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8003dc6:	b480      	push	{r7}
 8003dc8:	b08b      	sub	sp, #44	; 0x2c
 8003dca:	af00      	add	r7, sp, #0
 8003dcc:	60f8      	str	r0, [r7, #12]
 8003dce:	60b9      	str	r1, [r7, #8]
 8003dd0:	4613      	mov	r3, r2
 8003dd2:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8003dd8:	68bb      	ldr	r3, [r7, #8]
 8003dda:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8003ddc:	88fb      	ldrh	r3, [r7, #6]
 8003dde:	089b      	lsrs	r3, r3, #2
 8003de0:	b29b      	uxth	r3, r3
 8003de2:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8003de4:	88fb      	ldrh	r3, [r7, #6]
 8003de6:	f003 0303 	and.w	r3, r3, #3
 8003dea:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8003dec:	2300      	movs	r3, #0
 8003dee:	623b      	str	r3, [r7, #32]
 8003df0:	e014      	b.n	8003e1c <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8003df2:	69bb      	ldr	r3, [r7, #24]
 8003df4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003df8:	681a      	ldr	r2, [r3, #0]
 8003dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dfc:	601a      	str	r2, [r3, #0]
    pDest++;
 8003dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e00:	3301      	adds	r3, #1
 8003e02:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8003e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e06:	3301      	adds	r3, #1
 8003e08:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8003e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e0c:	3301      	adds	r3, #1
 8003e0e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8003e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e12:	3301      	adds	r3, #1
 8003e14:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8003e16:	6a3b      	ldr	r3, [r7, #32]
 8003e18:	3301      	adds	r3, #1
 8003e1a:	623b      	str	r3, [r7, #32]
 8003e1c:	6a3a      	ldr	r2, [r7, #32]
 8003e1e:	697b      	ldr	r3, [r7, #20]
 8003e20:	429a      	cmp	r2, r3
 8003e22:	d3e6      	bcc.n	8003df2 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8003e24:	8bfb      	ldrh	r3, [r7, #30]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d01e      	beq.n	8003e68 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8003e2e:	69bb      	ldr	r3, [r7, #24]
 8003e30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e34:	461a      	mov	r2, r3
 8003e36:	f107 0310 	add.w	r3, r7, #16
 8003e3a:	6812      	ldr	r2, [r2, #0]
 8003e3c:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8003e3e:	693a      	ldr	r2, [r7, #16]
 8003e40:	6a3b      	ldr	r3, [r7, #32]
 8003e42:	b2db      	uxtb	r3, r3
 8003e44:	00db      	lsls	r3, r3, #3
 8003e46:	fa22 f303 	lsr.w	r3, r2, r3
 8003e4a:	b2da      	uxtb	r2, r3
 8003e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e4e:	701a      	strb	r2, [r3, #0]
      i++;
 8003e50:	6a3b      	ldr	r3, [r7, #32]
 8003e52:	3301      	adds	r3, #1
 8003e54:	623b      	str	r3, [r7, #32]
      pDest++;
 8003e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e58:	3301      	adds	r3, #1
 8003e5a:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8003e5c:	8bfb      	ldrh	r3, [r7, #30]
 8003e5e:	3b01      	subs	r3, #1
 8003e60:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8003e62:	8bfb      	ldrh	r3, [r7, #30]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d1ea      	bne.n	8003e3e <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8003e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	372c      	adds	r7, #44	; 0x2c
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e74:	4770      	bx	lr

08003e76 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003e76:	b480      	push	{r7}
 8003e78:	b085      	sub	sp, #20
 8003e7a:	af00      	add	r7, sp, #0
 8003e7c:	6078      	str	r0, [r7, #4]
 8003e7e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	781b      	ldrb	r3, [r3, #0]
 8003e88:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	785b      	ldrb	r3, [r3, #1]
 8003e8e:	2b01      	cmp	r3, #1
 8003e90:	d12c      	bne.n	8003eec <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8003e92:	68bb      	ldr	r3, [r7, #8]
 8003e94:	015a      	lsls	r2, r3, #5
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	4413      	add	r3, r2
 8003e9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	db12      	blt.n	8003eca <USB_EPSetStall+0x54>
 8003ea4:	68bb      	ldr	r3, [r7, #8]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d00f      	beq.n	8003eca <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8003eaa:	68bb      	ldr	r3, [r7, #8]
 8003eac:	015a      	lsls	r2, r3, #5
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	4413      	add	r3, r2
 8003eb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	68ba      	ldr	r2, [r7, #8]
 8003eba:	0151      	lsls	r1, r2, #5
 8003ebc:	68fa      	ldr	r2, [r7, #12]
 8003ebe:	440a      	add	r2, r1
 8003ec0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ec4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003ec8:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8003eca:	68bb      	ldr	r3, [r7, #8]
 8003ecc:	015a      	lsls	r2, r3, #5
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	4413      	add	r3, r2
 8003ed2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	68ba      	ldr	r2, [r7, #8]
 8003eda:	0151      	lsls	r1, r2, #5
 8003edc:	68fa      	ldr	r2, [r7, #12]
 8003ede:	440a      	add	r2, r1
 8003ee0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ee4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003ee8:	6013      	str	r3, [r2, #0]
 8003eea:	e02b      	b.n	8003f44 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8003eec:	68bb      	ldr	r3, [r7, #8]
 8003eee:	015a      	lsls	r2, r3, #5
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	4413      	add	r3, r2
 8003ef4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	db12      	blt.n	8003f24 <USB_EPSetStall+0xae>
 8003efe:	68bb      	ldr	r3, [r7, #8]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d00f      	beq.n	8003f24 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8003f04:	68bb      	ldr	r3, [r7, #8]
 8003f06:	015a      	lsls	r2, r3, #5
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	4413      	add	r3, r2
 8003f0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	68ba      	ldr	r2, [r7, #8]
 8003f14:	0151      	lsls	r1, r2, #5
 8003f16:	68fa      	ldr	r2, [r7, #12]
 8003f18:	440a      	add	r2, r1
 8003f1a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003f1e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003f22:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8003f24:	68bb      	ldr	r3, [r7, #8]
 8003f26:	015a      	lsls	r2, r3, #5
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	4413      	add	r3, r2
 8003f2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	68ba      	ldr	r2, [r7, #8]
 8003f34:	0151      	lsls	r1, r2, #5
 8003f36:	68fa      	ldr	r2, [r7, #12]
 8003f38:	440a      	add	r2, r1
 8003f3a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003f3e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003f42:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003f44:	2300      	movs	r3, #0
}
 8003f46:	4618      	mov	r0, r3
 8003f48:	3714      	adds	r7, #20
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f50:	4770      	bx	lr

08003f52 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003f52:	b480      	push	{r7}
 8003f54:	b085      	sub	sp, #20
 8003f56:	af00      	add	r7, sp, #0
 8003f58:	6078      	str	r0, [r7, #4]
 8003f5a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	781b      	ldrb	r3, [r3, #0]
 8003f64:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	785b      	ldrb	r3, [r3, #1]
 8003f6a:	2b01      	cmp	r3, #1
 8003f6c:	d128      	bne.n	8003fc0 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003f6e:	68bb      	ldr	r3, [r7, #8]
 8003f70:	015a      	lsls	r2, r3, #5
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	4413      	add	r3, r2
 8003f76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	68ba      	ldr	r2, [r7, #8]
 8003f7e:	0151      	lsls	r1, r2, #5
 8003f80:	68fa      	ldr	r2, [r7, #12]
 8003f82:	440a      	add	r2, r1
 8003f84:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f88:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003f8c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	78db      	ldrb	r3, [r3, #3]
 8003f92:	2b03      	cmp	r3, #3
 8003f94:	d003      	beq.n	8003f9e <USB_EPClearStall+0x4c>
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	78db      	ldrb	r3, [r3, #3]
 8003f9a:	2b02      	cmp	r3, #2
 8003f9c:	d138      	bne.n	8004010 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8003f9e:	68bb      	ldr	r3, [r7, #8]
 8003fa0:	015a      	lsls	r2, r3, #5
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	4413      	add	r3, r2
 8003fa6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	68ba      	ldr	r2, [r7, #8]
 8003fae:	0151      	lsls	r1, r2, #5
 8003fb0:	68fa      	ldr	r2, [r7, #12]
 8003fb2:	440a      	add	r2, r1
 8003fb4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003fb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fbc:	6013      	str	r3, [r2, #0]
 8003fbe:	e027      	b.n	8004010 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003fc0:	68bb      	ldr	r3, [r7, #8]
 8003fc2:	015a      	lsls	r2, r3, #5
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	4413      	add	r3, r2
 8003fc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	68ba      	ldr	r2, [r7, #8]
 8003fd0:	0151      	lsls	r1, r2, #5
 8003fd2:	68fa      	ldr	r2, [r7, #12]
 8003fd4:	440a      	add	r2, r1
 8003fd6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003fda:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003fde:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	78db      	ldrb	r3, [r3, #3]
 8003fe4:	2b03      	cmp	r3, #3
 8003fe6:	d003      	beq.n	8003ff0 <USB_EPClearStall+0x9e>
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	78db      	ldrb	r3, [r3, #3]
 8003fec:	2b02      	cmp	r3, #2
 8003fee:	d10f      	bne.n	8004010 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8003ff0:	68bb      	ldr	r3, [r7, #8]
 8003ff2:	015a      	lsls	r2, r3, #5
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	4413      	add	r3, r2
 8003ff8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	68ba      	ldr	r2, [r7, #8]
 8004000:	0151      	lsls	r1, r2, #5
 8004002:	68fa      	ldr	r2, [r7, #12]
 8004004:	440a      	add	r2, r1
 8004006:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800400a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800400e:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8004010:	2300      	movs	r3, #0
}
 8004012:	4618      	mov	r0, r3
 8004014:	3714      	adds	r7, #20
 8004016:	46bd      	mov	sp, r7
 8004018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401c:	4770      	bx	lr

0800401e <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800401e:	b480      	push	{r7}
 8004020:	b085      	sub	sp, #20
 8004022:	af00      	add	r7, sp, #0
 8004024:	6078      	str	r0, [r7, #4]
 8004026:	460b      	mov	r3, r1
 8004028:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	68fa      	ldr	r2, [r7, #12]
 8004038:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800403c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004040:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004048:	681a      	ldr	r2, [r3, #0]
 800404a:	78fb      	ldrb	r3, [r7, #3]
 800404c:	011b      	lsls	r3, r3, #4
 800404e:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8004052:	68f9      	ldr	r1, [r7, #12]
 8004054:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004058:	4313      	orrs	r3, r2
 800405a:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800405c:	2300      	movs	r3, #0
}
 800405e:	4618      	mov	r0, r3
 8004060:	3714      	adds	r7, #20
 8004062:	46bd      	mov	sp, r7
 8004064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004068:	4770      	bx	lr

0800406a <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800406a:	b480      	push	{r7}
 800406c:	b085      	sub	sp, #20
 800406e:	af00      	add	r7, sp, #0
 8004070:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	68fa      	ldr	r2, [r7, #12]
 8004080:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004084:	f023 0303 	bic.w	r3, r3, #3
 8004088:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004090:	685b      	ldr	r3, [r3, #4]
 8004092:	68fa      	ldr	r2, [r7, #12]
 8004094:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004098:	f023 0302 	bic.w	r3, r3, #2
 800409c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800409e:	2300      	movs	r3, #0
}
 80040a0:	4618      	mov	r0, r3
 80040a2:	3714      	adds	r7, #20
 80040a4:	46bd      	mov	sp, r7
 80040a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040aa:	4770      	bx	lr

080040ac <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80040ac:	b480      	push	{r7}
 80040ae:	b085      	sub	sp, #20
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	68fa      	ldr	r2, [r7, #12]
 80040c2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80040c6:	f023 0303 	bic.w	r3, r3, #3
 80040ca:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	68fa      	ldr	r2, [r7, #12]
 80040d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80040da:	f043 0302 	orr.w	r3, r3, #2
 80040de:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80040e0:	2300      	movs	r3, #0
}
 80040e2:	4618      	mov	r0, r3
 80040e4:	3714      	adds	r7, #20
 80040e6:	46bd      	mov	sp, r7
 80040e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ec:	4770      	bx	lr

080040ee <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80040ee:	b480      	push	{r7}
 80040f0:	b085      	sub	sp, #20
 80040f2:	af00      	add	r7, sp, #0
 80040f4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	695b      	ldr	r3, [r3, #20]
 80040fa:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	699b      	ldr	r3, [r3, #24]
 8004100:	68fa      	ldr	r2, [r7, #12]
 8004102:	4013      	ands	r3, r2
 8004104:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004106:	68fb      	ldr	r3, [r7, #12]
}
 8004108:	4618      	mov	r0, r3
 800410a:	3714      	adds	r7, #20
 800410c:	46bd      	mov	sp, r7
 800410e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004112:	4770      	bx	lr

08004114 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004114:	b480      	push	{r7}
 8004116:	b085      	sub	sp, #20
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004126:	699b      	ldr	r3, [r3, #24]
 8004128:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004130:	69db      	ldr	r3, [r3, #28]
 8004132:	68ba      	ldr	r2, [r7, #8]
 8004134:	4013      	ands	r3, r2
 8004136:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8004138:	68bb      	ldr	r3, [r7, #8]
 800413a:	0c1b      	lsrs	r3, r3, #16
}
 800413c:	4618      	mov	r0, r3
 800413e:	3714      	adds	r7, #20
 8004140:	46bd      	mov	sp, r7
 8004142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004146:	4770      	bx	lr

08004148 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004148:	b480      	push	{r7}
 800414a:	b085      	sub	sp, #20
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800415a:	699b      	ldr	r3, [r3, #24]
 800415c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004164:	69db      	ldr	r3, [r3, #28]
 8004166:	68ba      	ldr	r2, [r7, #8]
 8004168:	4013      	ands	r3, r2
 800416a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800416c:	68bb      	ldr	r3, [r7, #8]
 800416e:	b29b      	uxth	r3, r3
}
 8004170:	4618      	mov	r0, r3
 8004172:	3714      	adds	r7, #20
 8004174:	46bd      	mov	sp, r7
 8004176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417a:	4770      	bx	lr

0800417c <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800417c:	b480      	push	{r7}
 800417e:	b085      	sub	sp, #20
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
 8004184:	460b      	mov	r3, r1
 8004186:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800418c:	78fb      	ldrb	r3, [r7, #3]
 800418e:	015a      	lsls	r2, r3, #5
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	4413      	add	r3, r2
 8004194:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004198:	689b      	ldr	r3, [r3, #8]
 800419a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041a2:	695b      	ldr	r3, [r3, #20]
 80041a4:	68ba      	ldr	r2, [r7, #8]
 80041a6:	4013      	ands	r3, r2
 80041a8:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80041aa:	68bb      	ldr	r3, [r7, #8]
}
 80041ac:	4618      	mov	r0, r3
 80041ae:	3714      	adds	r7, #20
 80041b0:	46bd      	mov	sp, r7
 80041b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b6:	4770      	bx	lr

080041b8 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80041b8:	b480      	push	{r7}
 80041ba:	b087      	sub	sp, #28
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
 80041c0:	460b      	mov	r3, r1
 80041c2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80041c8:	697b      	ldr	r3, [r7, #20]
 80041ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041ce:	691b      	ldr	r3, [r3, #16]
 80041d0:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80041d2:	697b      	ldr	r3, [r7, #20]
 80041d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041da:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80041dc:	78fb      	ldrb	r3, [r7, #3]
 80041de:	f003 030f 	and.w	r3, r3, #15
 80041e2:	68fa      	ldr	r2, [r7, #12]
 80041e4:	fa22 f303 	lsr.w	r3, r2, r3
 80041e8:	01db      	lsls	r3, r3, #7
 80041ea:	b2db      	uxtb	r3, r3
 80041ec:	693a      	ldr	r2, [r7, #16]
 80041ee:	4313      	orrs	r3, r2
 80041f0:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80041f2:	78fb      	ldrb	r3, [r7, #3]
 80041f4:	015a      	lsls	r2, r3, #5
 80041f6:	697b      	ldr	r3, [r7, #20]
 80041f8:	4413      	add	r3, r2
 80041fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041fe:	689b      	ldr	r3, [r3, #8]
 8004200:	693a      	ldr	r2, [r7, #16]
 8004202:	4013      	ands	r3, r2
 8004204:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004206:	68bb      	ldr	r3, [r7, #8]
}
 8004208:	4618      	mov	r0, r3
 800420a:	371c      	adds	r7, #28
 800420c:	46bd      	mov	sp, r7
 800420e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004212:	4770      	bx	lr

08004214 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004214:	b480      	push	{r7}
 8004216:	b083      	sub	sp, #12
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	695b      	ldr	r3, [r3, #20]
 8004220:	f003 0301 	and.w	r3, r3, #1
}
 8004224:	4618      	mov	r0, r3
 8004226:	370c      	adds	r7, #12
 8004228:	46bd      	mov	sp, r7
 800422a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422e:	4770      	bx	lr

08004230 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8004230:	b480      	push	{r7}
 8004232:	b085      	sub	sp, #20
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	68fa      	ldr	r2, [r7, #12]
 8004246:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800424a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800424e:	f023 0307 	bic.w	r3, r3, #7
 8004252:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	68fa      	ldr	r2, [r7, #12]
 800425e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004262:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004266:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004268:	2300      	movs	r3, #0
}
 800426a:	4618      	mov	r0, r3
 800426c:	3714      	adds	r7, #20
 800426e:	46bd      	mov	sp, r7
 8004270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004274:	4770      	bx	lr
	...

08004278 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8004278:	b480      	push	{r7}
 800427a:	b087      	sub	sp, #28
 800427c:	af00      	add	r7, sp, #0
 800427e:	60f8      	str	r0, [r7, #12]
 8004280:	460b      	mov	r3, r1
 8004282:	607a      	str	r2, [r7, #4]
 8004284:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	333c      	adds	r3, #60	; 0x3c
 800428e:	3304      	adds	r3, #4
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004294:	693b      	ldr	r3, [r7, #16]
 8004296:	4a26      	ldr	r2, [pc, #152]	; (8004330 <USB_EP0_OutStart+0xb8>)
 8004298:	4293      	cmp	r3, r2
 800429a:	d90a      	bls.n	80042b2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800429c:	697b      	ldr	r3, [r7, #20]
 800429e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80042a8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80042ac:	d101      	bne.n	80042b2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80042ae:	2300      	movs	r3, #0
 80042b0:	e037      	b.n	8004322 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80042b2:	697b      	ldr	r3, [r7, #20]
 80042b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042b8:	461a      	mov	r2, r3
 80042ba:	2300      	movs	r3, #0
 80042bc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80042be:	697b      	ldr	r3, [r7, #20]
 80042c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042c4:	691b      	ldr	r3, [r3, #16]
 80042c6:	697a      	ldr	r2, [r7, #20]
 80042c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80042cc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80042d0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80042d2:	697b      	ldr	r3, [r7, #20]
 80042d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042d8:	691b      	ldr	r3, [r3, #16]
 80042da:	697a      	ldr	r2, [r7, #20]
 80042dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80042e0:	f043 0318 	orr.w	r3, r3, #24
 80042e4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80042e6:	697b      	ldr	r3, [r7, #20]
 80042e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042ec:	691b      	ldr	r3, [r3, #16]
 80042ee:	697a      	ldr	r2, [r7, #20]
 80042f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80042f4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80042f8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80042fa:	7afb      	ldrb	r3, [r7, #11]
 80042fc:	2b01      	cmp	r3, #1
 80042fe:	d10f      	bne.n	8004320 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8004300:	697b      	ldr	r3, [r7, #20]
 8004302:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004306:	461a      	mov	r2, r3
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800430c:	697b      	ldr	r3, [r7, #20]
 800430e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	697a      	ldr	r2, [r7, #20]
 8004316:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800431a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800431e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004320:	2300      	movs	r3, #0
}
 8004322:	4618      	mov	r0, r3
 8004324:	371c      	adds	r7, #28
 8004326:	46bd      	mov	sp, r7
 8004328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432c:	4770      	bx	lr
 800432e:	bf00      	nop
 8004330:	4f54300a 	.word	0x4f54300a

08004334 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004334:	b480      	push	{r7}
 8004336:	b085      	sub	sp, #20
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800433c:	2300      	movs	r3, #0
 800433e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	3301      	adds	r3, #1
 8004344:	60fb      	str	r3, [r7, #12]
 8004346:	4a13      	ldr	r2, [pc, #76]	; (8004394 <USB_CoreReset+0x60>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d901      	bls.n	8004350 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 800434c:	2303      	movs	r3, #3
 800434e:	e01a      	b.n	8004386 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	691b      	ldr	r3, [r3, #16]
 8004354:	2b00      	cmp	r3, #0
 8004356:	daf3      	bge.n	8004340 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004358:	2300      	movs	r3, #0
 800435a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	691b      	ldr	r3, [r3, #16]
 8004360:	f043 0201 	orr.w	r2, r3, #1
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	3301      	adds	r3, #1
 800436c:	60fb      	str	r3, [r7, #12]
 800436e:	4a09      	ldr	r2, [pc, #36]	; (8004394 <USB_CoreReset+0x60>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d901      	bls.n	8004378 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8004374:	2303      	movs	r3, #3
 8004376:	e006      	b.n	8004386 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	691b      	ldr	r3, [r3, #16]
 800437c:	f003 0301 	and.w	r3, r3, #1
 8004380:	2b01      	cmp	r3, #1
 8004382:	d0f1      	beq.n	8004368 <USB_CoreReset+0x34>

  return HAL_OK;
 8004384:	2300      	movs	r3, #0
}
 8004386:	4618      	mov	r0, r3
 8004388:	3714      	adds	r7, #20
 800438a:	46bd      	mov	sp, r7
 800438c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004390:	4770      	bx	lr
 8004392:	bf00      	nop
 8004394:	00030d40 	.word	0x00030d40

08004398 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b084      	sub	sp, #16
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
 80043a0:	460b      	mov	r3, r1
 80043a2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80043a4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80043a8:	f002 f924 	bl	80065f4 <USBD_static_malloc>
 80043ac:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d105      	bne.n	80043c0 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2200      	movs	r2, #0
 80043b8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 80043bc:	2302      	movs	r3, #2
 80043be:	e066      	b.n	800448e <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	68fa      	ldr	r2, [r7, #12]
 80043c4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	7c1b      	ldrb	r3, [r3, #16]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d119      	bne.n	8004404 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80043d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80043d4:	2202      	movs	r2, #2
 80043d6:	2181      	movs	r1, #129	; 0x81
 80043d8:	6878      	ldr	r0, [r7, #4]
 80043da:	f001 ffe8 	bl	80063ae <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2201      	movs	r2, #1
 80043e2:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80043e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80043e8:	2202      	movs	r2, #2
 80043ea:	2101      	movs	r1, #1
 80043ec:	6878      	ldr	r0, [r7, #4]
 80043ee:	f001 ffde 	bl	80063ae <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2201      	movs	r2, #1
 80043f6:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2210      	movs	r2, #16
 80043fe:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8004402:	e016      	b.n	8004432 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004404:	2340      	movs	r3, #64	; 0x40
 8004406:	2202      	movs	r2, #2
 8004408:	2181      	movs	r1, #129	; 0x81
 800440a:	6878      	ldr	r0, [r7, #4]
 800440c:	f001 ffcf 	bl	80063ae <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2201      	movs	r2, #1
 8004414:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004416:	2340      	movs	r3, #64	; 0x40
 8004418:	2202      	movs	r2, #2
 800441a:	2101      	movs	r1, #1
 800441c:	6878      	ldr	r0, [r7, #4]
 800441e:	f001 ffc6 	bl	80063ae <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2201      	movs	r2, #1
 8004426:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2210      	movs	r2, #16
 800442e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8004432:	2308      	movs	r3, #8
 8004434:	2203      	movs	r2, #3
 8004436:	2182      	movs	r1, #130	; 0x82
 8004438:	6878      	ldr	r0, [r7, #4]
 800443a:	f001 ffb8 	bl	80063ae <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2201      	movs	r2, #1
 8004442:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	2200      	movs	r2, #0
 8004454:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	2200      	movs	r2, #0
 800445c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	7c1b      	ldrb	r3, [r3, #16]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d109      	bne.n	800447c <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800446e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004472:	2101      	movs	r1, #1
 8004474:	6878      	ldr	r0, [r7, #4]
 8004476:	f002 f889 	bl	800658c <USBD_LL_PrepareReceive>
 800447a:	e007      	b.n	800448c <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004482:	2340      	movs	r3, #64	; 0x40
 8004484:	2101      	movs	r1, #1
 8004486:	6878      	ldr	r0, [r7, #4]
 8004488:	f002 f880 	bl	800658c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800448c:	2300      	movs	r3, #0
}
 800448e:	4618      	mov	r0, r3
 8004490:	3710      	adds	r7, #16
 8004492:	46bd      	mov	sp, r7
 8004494:	bd80      	pop	{r7, pc}

08004496 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004496:	b580      	push	{r7, lr}
 8004498:	b082      	sub	sp, #8
 800449a:	af00      	add	r7, sp, #0
 800449c:	6078      	str	r0, [r7, #4]
 800449e:	460b      	mov	r3, r1
 80044a0:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80044a2:	2181      	movs	r1, #129	; 0x81
 80044a4:	6878      	ldr	r0, [r7, #4]
 80044a6:	f001 ffa8 	bl	80063fa <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2200      	movs	r2, #0
 80044ae:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80044b0:	2101      	movs	r1, #1
 80044b2:	6878      	ldr	r0, [r7, #4]
 80044b4:	f001 ffa1 	bl	80063fa <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2200      	movs	r2, #0
 80044bc:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80044c0:	2182      	movs	r1, #130	; 0x82
 80044c2:	6878      	ldr	r0, [r7, #4]
 80044c4:	f001 ff99 	bl	80063fa <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2200      	movs	r2, #0
 80044cc:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2200      	movs	r2, #0
 80044d4:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d00e      	beq.n	8004500 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80044e8:	685b      	ldr	r3, [r3, #4]
 80044ea:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80044f2:	4618      	mov	r0, r3
 80044f4:	f002 f88c 	bl	8006610 <USBD_static_free>
    pdev->pClassData = NULL;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2200      	movs	r2, #0
 80044fc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8004500:	2300      	movs	r3, #0
}
 8004502:	4618      	mov	r0, r3
 8004504:	3708      	adds	r7, #8
 8004506:	46bd      	mov	sp, r7
 8004508:	bd80      	pop	{r7, pc}
	...

0800450c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b086      	sub	sp, #24
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
 8004514:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800451c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800451e:	2300      	movs	r3, #0
 8004520:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8004522:	2300      	movs	r3, #0
 8004524:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8004526:	2300      	movs	r3, #0
 8004528:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800452a:	693b      	ldr	r3, [r7, #16]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d101      	bne.n	8004534 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8004530:	2303      	movs	r3, #3
 8004532:	e0af      	b.n	8004694 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	781b      	ldrb	r3, [r3, #0]
 8004538:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800453c:	2b00      	cmp	r3, #0
 800453e:	d03f      	beq.n	80045c0 <USBD_CDC_Setup+0xb4>
 8004540:	2b20      	cmp	r3, #32
 8004542:	f040 809f 	bne.w	8004684 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	88db      	ldrh	r3, [r3, #6]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d02e      	beq.n	80045ac <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	781b      	ldrb	r3, [r3, #0]
 8004552:	b25b      	sxtb	r3, r3
 8004554:	2b00      	cmp	r3, #0
 8004556:	da16      	bge.n	8004586 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800455e:	689b      	ldr	r3, [r3, #8]
 8004560:	683a      	ldr	r2, [r7, #0]
 8004562:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8004564:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004566:	683a      	ldr	r2, [r7, #0]
 8004568:	88d2      	ldrh	r2, [r2, #6]
 800456a:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	88db      	ldrh	r3, [r3, #6]
 8004570:	2b07      	cmp	r3, #7
 8004572:	bf28      	it	cs
 8004574:	2307      	movcs	r3, #7
 8004576:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8004578:	693b      	ldr	r3, [r7, #16]
 800457a:	89fa      	ldrh	r2, [r7, #14]
 800457c:	4619      	mov	r1, r3
 800457e:	6878      	ldr	r0, [r7, #4]
 8004580:	f001 fae9 	bl	8005b56 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8004584:	e085      	b.n	8004692 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	785a      	ldrb	r2, [r3, #1]
 800458a:	693b      	ldr	r3, [r7, #16]
 800458c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	88db      	ldrh	r3, [r3, #6]
 8004594:	b2da      	uxtb	r2, r3
 8004596:	693b      	ldr	r3, [r7, #16]
 8004598:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800459c:	6939      	ldr	r1, [r7, #16]
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	88db      	ldrh	r3, [r3, #6]
 80045a2:	461a      	mov	r2, r3
 80045a4:	6878      	ldr	r0, [r7, #4]
 80045a6:	f001 fb02 	bl	8005bae <USBD_CtlPrepareRx>
      break;
 80045aa:	e072      	b.n	8004692 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80045b2:	689b      	ldr	r3, [r3, #8]
 80045b4:	683a      	ldr	r2, [r7, #0]
 80045b6:	7850      	ldrb	r0, [r2, #1]
 80045b8:	2200      	movs	r2, #0
 80045ba:	6839      	ldr	r1, [r7, #0]
 80045bc:	4798      	blx	r3
      break;
 80045be:	e068      	b.n	8004692 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	785b      	ldrb	r3, [r3, #1]
 80045c4:	2b0b      	cmp	r3, #11
 80045c6:	d852      	bhi.n	800466e <USBD_CDC_Setup+0x162>
 80045c8:	a201      	add	r2, pc, #4	; (adr r2, 80045d0 <USBD_CDC_Setup+0xc4>)
 80045ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045ce:	bf00      	nop
 80045d0:	08004601 	.word	0x08004601
 80045d4:	0800467d 	.word	0x0800467d
 80045d8:	0800466f 	.word	0x0800466f
 80045dc:	0800466f 	.word	0x0800466f
 80045e0:	0800466f 	.word	0x0800466f
 80045e4:	0800466f 	.word	0x0800466f
 80045e8:	0800466f 	.word	0x0800466f
 80045ec:	0800466f 	.word	0x0800466f
 80045f0:	0800466f 	.word	0x0800466f
 80045f4:	0800466f 	.word	0x0800466f
 80045f8:	0800462b 	.word	0x0800462b
 80045fc:	08004655 	.word	0x08004655
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004606:	b2db      	uxtb	r3, r3
 8004608:	2b03      	cmp	r3, #3
 800460a:	d107      	bne.n	800461c <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800460c:	f107 030a 	add.w	r3, r7, #10
 8004610:	2202      	movs	r2, #2
 8004612:	4619      	mov	r1, r3
 8004614:	6878      	ldr	r0, [r7, #4]
 8004616:	f001 fa9e 	bl	8005b56 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800461a:	e032      	b.n	8004682 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800461c:	6839      	ldr	r1, [r7, #0]
 800461e:	6878      	ldr	r0, [r7, #4]
 8004620:	f001 fa28 	bl	8005a74 <USBD_CtlError>
            ret = USBD_FAIL;
 8004624:	2303      	movs	r3, #3
 8004626:	75fb      	strb	r3, [r7, #23]
          break;
 8004628:	e02b      	b.n	8004682 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004630:	b2db      	uxtb	r3, r3
 8004632:	2b03      	cmp	r3, #3
 8004634:	d107      	bne.n	8004646 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8004636:	f107 030d 	add.w	r3, r7, #13
 800463a:	2201      	movs	r2, #1
 800463c:	4619      	mov	r1, r3
 800463e:	6878      	ldr	r0, [r7, #4]
 8004640:	f001 fa89 	bl	8005b56 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004644:	e01d      	b.n	8004682 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8004646:	6839      	ldr	r1, [r7, #0]
 8004648:	6878      	ldr	r0, [r7, #4]
 800464a:	f001 fa13 	bl	8005a74 <USBD_CtlError>
            ret = USBD_FAIL;
 800464e:	2303      	movs	r3, #3
 8004650:	75fb      	strb	r3, [r7, #23]
          break;
 8004652:	e016      	b.n	8004682 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800465a:	b2db      	uxtb	r3, r3
 800465c:	2b03      	cmp	r3, #3
 800465e:	d00f      	beq.n	8004680 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8004660:	6839      	ldr	r1, [r7, #0]
 8004662:	6878      	ldr	r0, [r7, #4]
 8004664:	f001 fa06 	bl	8005a74 <USBD_CtlError>
            ret = USBD_FAIL;
 8004668:	2303      	movs	r3, #3
 800466a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800466c:	e008      	b.n	8004680 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800466e:	6839      	ldr	r1, [r7, #0]
 8004670:	6878      	ldr	r0, [r7, #4]
 8004672:	f001 f9ff 	bl	8005a74 <USBD_CtlError>
          ret = USBD_FAIL;
 8004676:	2303      	movs	r3, #3
 8004678:	75fb      	strb	r3, [r7, #23]
          break;
 800467a:	e002      	b.n	8004682 <USBD_CDC_Setup+0x176>
          break;
 800467c:	bf00      	nop
 800467e:	e008      	b.n	8004692 <USBD_CDC_Setup+0x186>
          break;
 8004680:	bf00      	nop
      }
      break;
 8004682:	e006      	b.n	8004692 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8004684:	6839      	ldr	r1, [r7, #0]
 8004686:	6878      	ldr	r0, [r7, #4]
 8004688:	f001 f9f4 	bl	8005a74 <USBD_CtlError>
      ret = USBD_FAIL;
 800468c:	2303      	movs	r3, #3
 800468e:	75fb      	strb	r3, [r7, #23]
      break;
 8004690:	bf00      	nop
  }

  return (uint8_t)ret;
 8004692:	7dfb      	ldrb	r3, [r7, #23]
}
 8004694:	4618      	mov	r0, r3
 8004696:	3718      	adds	r7, #24
 8004698:	46bd      	mov	sp, r7
 800469a:	bd80      	pop	{r7, pc}

0800469c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b084      	sub	sp, #16
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
 80046a4:	460b      	mov	r3, r1
 80046a6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80046ae:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d101      	bne.n	80046be <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80046ba:	2303      	movs	r3, #3
 80046bc:	e04f      	b.n	800475e <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80046c4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80046c6:	78fa      	ldrb	r2, [r7, #3]
 80046c8:	6879      	ldr	r1, [r7, #4]
 80046ca:	4613      	mov	r3, r2
 80046cc:	009b      	lsls	r3, r3, #2
 80046ce:	4413      	add	r3, r2
 80046d0:	009b      	lsls	r3, r3, #2
 80046d2:	440b      	add	r3, r1
 80046d4:	3318      	adds	r3, #24
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d029      	beq.n	8004730 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80046dc:	78fa      	ldrb	r2, [r7, #3]
 80046de:	6879      	ldr	r1, [r7, #4]
 80046e0:	4613      	mov	r3, r2
 80046e2:	009b      	lsls	r3, r3, #2
 80046e4:	4413      	add	r3, r2
 80046e6:	009b      	lsls	r3, r3, #2
 80046e8:	440b      	add	r3, r1
 80046ea:	3318      	adds	r3, #24
 80046ec:	681a      	ldr	r2, [r3, #0]
 80046ee:	78f9      	ldrb	r1, [r7, #3]
 80046f0:	68f8      	ldr	r0, [r7, #12]
 80046f2:	460b      	mov	r3, r1
 80046f4:	00db      	lsls	r3, r3, #3
 80046f6:	1a5b      	subs	r3, r3, r1
 80046f8:	009b      	lsls	r3, r3, #2
 80046fa:	4403      	add	r3, r0
 80046fc:	3344      	adds	r3, #68	; 0x44
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	fbb2 f1f3 	udiv	r1, r2, r3
 8004704:	fb03 f301 	mul.w	r3, r3, r1
 8004708:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800470a:	2b00      	cmp	r3, #0
 800470c:	d110      	bne.n	8004730 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800470e:	78fa      	ldrb	r2, [r7, #3]
 8004710:	6879      	ldr	r1, [r7, #4]
 8004712:	4613      	mov	r3, r2
 8004714:	009b      	lsls	r3, r3, #2
 8004716:	4413      	add	r3, r2
 8004718:	009b      	lsls	r3, r3, #2
 800471a:	440b      	add	r3, r1
 800471c:	3318      	adds	r3, #24
 800471e:	2200      	movs	r2, #0
 8004720:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8004722:	78f9      	ldrb	r1, [r7, #3]
 8004724:	2300      	movs	r3, #0
 8004726:	2200      	movs	r2, #0
 8004728:	6878      	ldr	r0, [r7, #4]
 800472a:	f001 ff0e 	bl	800654a <USBD_LL_Transmit>
 800472e:	e015      	b.n	800475c <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8004730:	68bb      	ldr	r3, [r7, #8]
 8004732:	2200      	movs	r2, #0
 8004734:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800473e:	691b      	ldr	r3, [r3, #16]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d00b      	beq.n	800475c <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800474a:	691b      	ldr	r3, [r3, #16]
 800474c:	68ba      	ldr	r2, [r7, #8]
 800474e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8004752:	68ba      	ldr	r2, [r7, #8]
 8004754:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8004758:	78fa      	ldrb	r2, [r7, #3]
 800475a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800475c:	2300      	movs	r3, #0
}
 800475e:	4618      	mov	r0, r3
 8004760:	3710      	adds	r7, #16
 8004762:	46bd      	mov	sp, r7
 8004764:	bd80      	pop	{r7, pc}

08004766 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004766:	b580      	push	{r7, lr}
 8004768:	b084      	sub	sp, #16
 800476a:	af00      	add	r7, sp, #0
 800476c:	6078      	str	r0, [r7, #4]
 800476e:	460b      	mov	r3, r1
 8004770:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004778:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004780:	2b00      	cmp	r3, #0
 8004782:	d101      	bne.n	8004788 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8004784:	2303      	movs	r3, #3
 8004786:	e015      	b.n	80047b4 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8004788:	78fb      	ldrb	r3, [r7, #3]
 800478a:	4619      	mov	r1, r3
 800478c:	6878      	ldr	r0, [r7, #4]
 800478e:	f001 ff1e 	bl	80065ce <USBD_LL_GetRxDataSize>
 8004792:	4602      	mov	r2, r0
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80047a0:	68db      	ldr	r3, [r3, #12]
 80047a2:	68fa      	ldr	r2, [r7, #12]
 80047a4:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80047a8:	68fa      	ldr	r2, [r7, #12]
 80047aa:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80047ae:	4611      	mov	r1, r2
 80047b0:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80047b2:	2300      	movs	r3, #0
}
 80047b4:	4618      	mov	r0, r3
 80047b6:	3710      	adds	r7, #16
 80047b8:	46bd      	mov	sp, r7
 80047ba:	bd80      	pop	{r7, pc}

080047bc <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b084      	sub	sp, #16
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80047ca:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d101      	bne.n	80047d6 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 80047d2:	2303      	movs	r3, #3
 80047d4:	e01b      	b.n	800480e <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d015      	beq.n	800480c <USBD_CDC_EP0_RxReady+0x50>
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80047e6:	2bff      	cmp	r3, #255	; 0xff
 80047e8:	d010      	beq.n	800480c <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80047f0:	689b      	ldr	r3, [r3, #8]
 80047f2:	68fa      	ldr	r2, [r7, #12]
 80047f4:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 80047f8:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80047fa:	68fa      	ldr	r2, [r7, #12]
 80047fc:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8004800:	b292      	uxth	r2, r2
 8004802:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	22ff      	movs	r2, #255	; 0xff
 8004808:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800480c:	2300      	movs	r3, #0
}
 800480e:	4618      	mov	r0, r3
 8004810:	3710      	adds	r7, #16
 8004812:	46bd      	mov	sp, r7
 8004814:	bd80      	pop	{r7, pc}
	...

08004818 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8004818:	b480      	push	{r7}
 800481a:	b083      	sub	sp, #12
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2243      	movs	r2, #67	; 0x43
 8004824:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8004826:	4b03      	ldr	r3, [pc, #12]	; (8004834 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8004828:	4618      	mov	r0, r3
 800482a:	370c      	adds	r7, #12
 800482c:	46bd      	mov	sp, r7
 800482e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004832:	4770      	bx	lr
 8004834:	20000094 	.word	0x20000094

08004838 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8004838:	b480      	push	{r7}
 800483a:	b083      	sub	sp, #12
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2243      	movs	r2, #67	; 0x43
 8004844:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8004846:	4b03      	ldr	r3, [pc, #12]	; (8004854 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8004848:	4618      	mov	r0, r3
 800484a:	370c      	adds	r7, #12
 800484c:	46bd      	mov	sp, r7
 800484e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004852:	4770      	bx	lr
 8004854:	20000050 	.word	0x20000050

08004858 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8004858:	b480      	push	{r7}
 800485a:	b083      	sub	sp, #12
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2243      	movs	r2, #67	; 0x43
 8004864:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8004866:	4b03      	ldr	r3, [pc, #12]	; (8004874 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8004868:	4618      	mov	r0, r3
 800486a:	370c      	adds	r7, #12
 800486c:	46bd      	mov	sp, r7
 800486e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004872:	4770      	bx	lr
 8004874:	200000d8 	.word	0x200000d8

08004878 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8004878:	b480      	push	{r7}
 800487a:	b083      	sub	sp, #12
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	220a      	movs	r2, #10
 8004884:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8004886:	4b03      	ldr	r3, [pc, #12]	; (8004894 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8004888:	4618      	mov	r0, r3
 800488a:	370c      	adds	r7, #12
 800488c:	46bd      	mov	sp, r7
 800488e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004892:	4770      	bx	lr
 8004894:	2000000c 	.word	0x2000000c

08004898 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8004898:	b480      	push	{r7}
 800489a:	b083      	sub	sp, #12
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
 80048a0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d101      	bne.n	80048ac <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80048a8:	2303      	movs	r3, #3
 80048aa:	e004      	b.n	80048b6 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	683a      	ldr	r2, [r7, #0]
 80048b0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80048b4:	2300      	movs	r3, #0
}
 80048b6:	4618      	mov	r0, r3
 80048b8:	370c      	adds	r7, #12
 80048ba:	46bd      	mov	sp, r7
 80048bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c0:	4770      	bx	lr

080048c2 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80048c2:	b480      	push	{r7}
 80048c4:	b087      	sub	sp, #28
 80048c6:	af00      	add	r7, sp, #0
 80048c8:	60f8      	str	r0, [r7, #12]
 80048ca:	60b9      	str	r1, [r7, #8]
 80048cc:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80048d4:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80048d6:	697b      	ldr	r3, [r7, #20]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d101      	bne.n	80048e0 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80048dc:	2303      	movs	r3, #3
 80048de:	e008      	b.n	80048f2 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 80048e0:	697b      	ldr	r3, [r7, #20]
 80048e2:	68ba      	ldr	r2, [r7, #8]
 80048e4:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80048e8:	697b      	ldr	r3, [r7, #20]
 80048ea:	687a      	ldr	r2, [r7, #4]
 80048ec:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80048f0:	2300      	movs	r3, #0
}
 80048f2:	4618      	mov	r0, r3
 80048f4:	371c      	adds	r7, #28
 80048f6:	46bd      	mov	sp, r7
 80048f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fc:	4770      	bx	lr

080048fe <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80048fe:	b480      	push	{r7}
 8004900:	b085      	sub	sp, #20
 8004902:	af00      	add	r7, sp, #0
 8004904:	6078      	str	r0, [r7, #4]
 8004906:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800490e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d101      	bne.n	800491a <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8004916:	2303      	movs	r3, #3
 8004918:	e004      	b.n	8004924 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	683a      	ldr	r2, [r7, #0]
 800491e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8004922:	2300      	movs	r3, #0
}
 8004924:	4618      	mov	r0, r3
 8004926:	3714      	adds	r7, #20
 8004928:	46bd      	mov	sp, r7
 800492a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492e:	4770      	bx	lr

08004930 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b084      	sub	sp, #16
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800493e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004946:	2b00      	cmp	r3, #0
 8004948:	d101      	bne.n	800494e <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800494a:	2303      	movs	r3, #3
 800494c:	e016      	b.n	800497c <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	7c1b      	ldrb	r3, [r3, #16]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d109      	bne.n	800496a <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800495c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004960:	2101      	movs	r1, #1
 8004962:	6878      	ldr	r0, [r7, #4]
 8004964:	f001 fe12 	bl	800658c <USBD_LL_PrepareReceive>
 8004968:	e007      	b.n	800497a <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004970:	2340      	movs	r3, #64	; 0x40
 8004972:	2101      	movs	r1, #1
 8004974:	6878      	ldr	r0, [r7, #4]
 8004976:	f001 fe09 	bl	800658c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800497a:	2300      	movs	r3, #0
}
 800497c:	4618      	mov	r0, r3
 800497e:	3710      	adds	r7, #16
 8004980:	46bd      	mov	sp, r7
 8004982:	bd80      	pop	{r7, pc}

08004984 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b086      	sub	sp, #24
 8004988:	af00      	add	r7, sp, #0
 800498a:	60f8      	str	r0, [r7, #12]
 800498c:	60b9      	str	r1, [r7, #8]
 800498e:	4613      	mov	r3, r2
 8004990:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	2b00      	cmp	r3, #0
 8004996:	d101      	bne.n	800499c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8004998:	2303      	movs	r3, #3
 800499a:	e01f      	b.n	80049dc <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	2200      	movs	r2, #0
 80049a0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	2200      	movs	r2, #0
 80049a8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	2200      	movs	r2, #0
 80049b0:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80049b4:	68bb      	ldr	r3, [r7, #8]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d003      	beq.n	80049c2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	68ba      	ldr	r2, [r7, #8]
 80049be:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	2201      	movs	r2, #1
 80049c6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	79fa      	ldrb	r2, [r7, #7]
 80049ce:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80049d0:	68f8      	ldr	r0, [r7, #12]
 80049d2:	f001 fc85 	bl	80062e0 <USBD_LL_Init>
 80049d6:	4603      	mov	r3, r0
 80049d8:	75fb      	strb	r3, [r7, #23]

  return ret;
 80049da:	7dfb      	ldrb	r3, [r7, #23]
}
 80049dc:	4618      	mov	r0, r3
 80049de:	3718      	adds	r7, #24
 80049e0:	46bd      	mov	sp, r7
 80049e2:	bd80      	pop	{r7, pc}

080049e4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b084      	sub	sp, #16
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
 80049ec:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80049ee:	2300      	movs	r3, #0
 80049f0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d101      	bne.n	80049fc <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80049f8:	2303      	movs	r3, #3
 80049fa:	e016      	b.n	8004a2a <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	683a      	ldr	r2, [r7, #0]
 8004a00:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004a0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d00b      	beq.n	8004a28 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a18:	f107 020e 	add.w	r2, r7, #14
 8004a1c:	4610      	mov	r0, r2
 8004a1e:	4798      	blx	r3
 8004a20:	4602      	mov	r2, r0
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8004a28:	2300      	movs	r3, #0
}
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	3710      	adds	r7, #16
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	bd80      	pop	{r7, pc}

08004a32 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8004a32:	b580      	push	{r7, lr}
 8004a34:	b082      	sub	sp, #8
 8004a36:	af00      	add	r7, sp, #0
 8004a38:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8004a3a:	6878      	ldr	r0, [r7, #4]
 8004a3c:	f001 fc9c 	bl	8006378 <USBD_LL_Start>
 8004a40:	4603      	mov	r3, r0
}
 8004a42:	4618      	mov	r0, r3
 8004a44:	3708      	adds	r7, #8
 8004a46:	46bd      	mov	sp, r7
 8004a48:	bd80      	pop	{r7, pc}

08004a4a <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8004a4a:	b480      	push	{r7}
 8004a4c:	b083      	sub	sp, #12
 8004a4e:	af00      	add	r7, sp, #0
 8004a50:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8004a52:	2300      	movs	r3, #0
}
 8004a54:	4618      	mov	r0, r3
 8004a56:	370c      	adds	r7, #12
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5e:	4770      	bx	lr

08004a60 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b084      	sub	sp, #16
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
 8004a68:	460b      	mov	r3, r1
 8004a6a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8004a6c:	2303      	movs	r3, #3
 8004a6e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d009      	beq.n	8004a8e <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	78fa      	ldrb	r2, [r7, #3]
 8004a84:	4611      	mov	r1, r2
 8004a86:	6878      	ldr	r0, [r7, #4]
 8004a88:	4798      	blx	r3
 8004a8a:	4603      	mov	r3, r0
 8004a8c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8004a8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a90:	4618      	mov	r0, r3
 8004a92:	3710      	adds	r7, #16
 8004a94:	46bd      	mov	sp, r7
 8004a96:	bd80      	pop	{r7, pc}

08004a98 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b082      	sub	sp, #8
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
 8004aa0:	460b      	mov	r3, r1
 8004aa2:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d007      	beq.n	8004abe <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004ab4:	685b      	ldr	r3, [r3, #4]
 8004ab6:	78fa      	ldrb	r2, [r7, #3]
 8004ab8:	4611      	mov	r1, r2
 8004aba:	6878      	ldr	r0, [r7, #4]
 8004abc:	4798      	blx	r3
  }

  return USBD_OK;
 8004abe:	2300      	movs	r3, #0
}
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	3708      	adds	r7, #8
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	bd80      	pop	{r7, pc}

08004ac8 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b084      	sub	sp, #16
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
 8004ad0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004ad8:	6839      	ldr	r1, [r7, #0]
 8004ada:	4618      	mov	r0, r3
 8004adc:	f000 ff90 	bl	8005a00 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2201      	movs	r2, #1
 8004ae4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8004aee:	461a      	mov	r2, r3
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8004afc:	f003 031f 	and.w	r3, r3, #31
 8004b00:	2b02      	cmp	r3, #2
 8004b02:	d01a      	beq.n	8004b3a <USBD_LL_SetupStage+0x72>
 8004b04:	2b02      	cmp	r3, #2
 8004b06:	d822      	bhi.n	8004b4e <USBD_LL_SetupStage+0x86>
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d002      	beq.n	8004b12 <USBD_LL_SetupStage+0x4a>
 8004b0c:	2b01      	cmp	r3, #1
 8004b0e:	d00a      	beq.n	8004b26 <USBD_LL_SetupStage+0x5e>
 8004b10:	e01d      	b.n	8004b4e <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004b18:	4619      	mov	r1, r3
 8004b1a:	6878      	ldr	r0, [r7, #4]
 8004b1c:	f000 fa62 	bl	8004fe4 <USBD_StdDevReq>
 8004b20:	4603      	mov	r3, r0
 8004b22:	73fb      	strb	r3, [r7, #15]
      break;
 8004b24:	e020      	b.n	8004b68 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004b2c:	4619      	mov	r1, r3
 8004b2e:	6878      	ldr	r0, [r7, #4]
 8004b30:	f000 fac6 	bl	80050c0 <USBD_StdItfReq>
 8004b34:	4603      	mov	r3, r0
 8004b36:	73fb      	strb	r3, [r7, #15]
      break;
 8004b38:	e016      	b.n	8004b68 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004b40:	4619      	mov	r1, r3
 8004b42:	6878      	ldr	r0, [r7, #4]
 8004b44:	f000 fb05 	bl	8005152 <USBD_StdEPReq>
 8004b48:	4603      	mov	r3, r0
 8004b4a:	73fb      	strb	r3, [r7, #15]
      break;
 8004b4c:	e00c      	b.n	8004b68 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8004b54:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004b58:	b2db      	uxtb	r3, r3
 8004b5a:	4619      	mov	r1, r3
 8004b5c:	6878      	ldr	r0, [r7, #4]
 8004b5e:	f001 fc6b 	bl	8006438 <USBD_LL_StallEP>
 8004b62:	4603      	mov	r3, r0
 8004b64:	73fb      	strb	r3, [r7, #15]
      break;
 8004b66:	bf00      	nop
  }

  return ret;
 8004b68:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	3710      	adds	r7, #16
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	bd80      	pop	{r7, pc}

08004b72 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8004b72:	b580      	push	{r7, lr}
 8004b74:	b086      	sub	sp, #24
 8004b76:	af00      	add	r7, sp, #0
 8004b78:	60f8      	str	r0, [r7, #12]
 8004b7a:	460b      	mov	r3, r1
 8004b7c:	607a      	str	r2, [r7, #4]
 8004b7e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8004b80:	7afb      	ldrb	r3, [r7, #11]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d138      	bne.n	8004bf8 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8004b8c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8004b94:	2b03      	cmp	r3, #3
 8004b96:	d14a      	bne.n	8004c2e <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8004b98:	693b      	ldr	r3, [r7, #16]
 8004b9a:	689a      	ldr	r2, [r3, #8]
 8004b9c:	693b      	ldr	r3, [r7, #16]
 8004b9e:	68db      	ldr	r3, [r3, #12]
 8004ba0:	429a      	cmp	r2, r3
 8004ba2:	d913      	bls.n	8004bcc <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8004ba4:	693b      	ldr	r3, [r7, #16]
 8004ba6:	689a      	ldr	r2, [r3, #8]
 8004ba8:	693b      	ldr	r3, [r7, #16]
 8004baa:	68db      	ldr	r3, [r3, #12]
 8004bac:	1ad2      	subs	r2, r2, r3
 8004bae:	693b      	ldr	r3, [r7, #16]
 8004bb0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8004bb2:	693b      	ldr	r3, [r7, #16]
 8004bb4:	68da      	ldr	r2, [r3, #12]
 8004bb6:	693b      	ldr	r3, [r7, #16]
 8004bb8:	689b      	ldr	r3, [r3, #8]
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	bf28      	it	cs
 8004bbe:	4613      	movcs	r3, r2
 8004bc0:	461a      	mov	r2, r3
 8004bc2:	6879      	ldr	r1, [r7, #4]
 8004bc4:	68f8      	ldr	r0, [r7, #12]
 8004bc6:	f001 f80f 	bl	8005be8 <USBD_CtlContinueRx>
 8004bca:	e030      	b.n	8004c2e <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004bd2:	b2db      	uxtb	r3, r3
 8004bd4:	2b03      	cmp	r3, #3
 8004bd6:	d10b      	bne.n	8004bf0 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004bde:	691b      	ldr	r3, [r3, #16]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d005      	beq.n	8004bf0 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004bea:	691b      	ldr	r3, [r3, #16]
 8004bec:	68f8      	ldr	r0, [r7, #12]
 8004bee:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8004bf0:	68f8      	ldr	r0, [r7, #12]
 8004bf2:	f001 f80a 	bl	8005c0a <USBD_CtlSendStatus>
 8004bf6:	e01a      	b.n	8004c2e <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004bfe:	b2db      	uxtb	r3, r3
 8004c00:	2b03      	cmp	r3, #3
 8004c02:	d114      	bne.n	8004c2e <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004c0a:	699b      	ldr	r3, [r3, #24]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d00e      	beq.n	8004c2e <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004c16:	699b      	ldr	r3, [r3, #24]
 8004c18:	7afa      	ldrb	r2, [r7, #11]
 8004c1a:	4611      	mov	r1, r2
 8004c1c:	68f8      	ldr	r0, [r7, #12]
 8004c1e:	4798      	blx	r3
 8004c20:	4603      	mov	r3, r0
 8004c22:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8004c24:	7dfb      	ldrb	r3, [r7, #23]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d001      	beq.n	8004c2e <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8004c2a:	7dfb      	ldrb	r3, [r7, #23]
 8004c2c:	e000      	b.n	8004c30 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8004c2e:	2300      	movs	r3, #0
}
 8004c30:	4618      	mov	r0, r3
 8004c32:	3718      	adds	r7, #24
 8004c34:	46bd      	mov	sp, r7
 8004c36:	bd80      	pop	{r7, pc}

08004c38 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b086      	sub	sp, #24
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	60f8      	str	r0, [r7, #12]
 8004c40:	460b      	mov	r3, r1
 8004c42:	607a      	str	r2, [r7, #4]
 8004c44:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8004c46:	7afb      	ldrb	r3, [r7, #11]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d16b      	bne.n	8004d24 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	3314      	adds	r3, #20
 8004c50:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8004c58:	2b02      	cmp	r3, #2
 8004c5a:	d156      	bne.n	8004d0a <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8004c5c:	693b      	ldr	r3, [r7, #16]
 8004c5e:	689a      	ldr	r2, [r3, #8]
 8004c60:	693b      	ldr	r3, [r7, #16]
 8004c62:	68db      	ldr	r3, [r3, #12]
 8004c64:	429a      	cmp	r2, r3
 8004c66:	d914      	bls.n	8004c92 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8004c68:	693b      	ldr	r3, [r7, #16]
 8004c6a:	689a      	ldr	r2, [r3, #8]
 8004c6c:	693b      	ldr	r3, [r7, #16]
 8004c6e:	68db      	ldr	r3, [r3, #12]
 8004c70:	1ad2      	subs	r2, r2, r3
 8004c72:	693b      	ldr	r3, [r7, #16]
 8004c74:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8004c76:	693b      	ldr	r3, [r7, #16]
 8004c78:	689b      	ldr	r3, [r3, #8]
 8004c7a:	461a      	mov	r2, r3
 8004c7c:	6879      	ldr	r1, [r7, #4]
 8004c7e:	68f8      	ldr	r0, [r7, #12]
 8004c80:	f000 ff84 	bl	8005b8c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004c84:	2300      	movs	r3, #0
 8004c86:	2200      	movs	r2, #0
 8004c88:	2100      	movs	r1, #0
 8004c8a:	68f8      	ldr	r0, [r7, #12]
 8004c8c:	f001 fc7e 	bl	800658c <USBD_LL_PrepareReceive>
 8004c90:	e03b      	b.n	8004d0a <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8004c92:	693b      	ldr	r3, [r7, #16]
 8004c94:	68da      	ldr	r2, [r3, #12]
 8004c96:	693b      	ldr	r3, [r7, #16]
 8004c98:	689b      	ldr	r3, [r3, #8]
 8004c9a:	429a      	cmp	r2, r3
 8004c9c:	d11c      	bne.n	8004cd8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8004c9e:	693b      	ldr	r3, [r7, #16]
 8004ca0:	685a      	ldr	r2, [r3, #4]
 8004ca2:	693b      	ldr	r3, [r7, #16]
 8004ca4:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8004ca6:	429a      	cmp	r2, r3
 8004ca8:	d316      	bcc.n	8004cd8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8004caa:	693b      	ldr	r3, [r7, #16]
 8004cac:	685a      	ldr	r2, [r3, #4]
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8004cb4:	429a      	cmp	r2, r3
 8004cb6:	d20f      	bcs.n	8004cd8 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8004cb8:	2200      	movs	r2, #0
 8004cba:	2100      	movs	r1, #0
 8004cbc:	68f8      	ldr	r0, [r7, #12]
 8004cbe:	f000 ff65 	bl	8005b8c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004cca:	2300      	movs	r3, #0
 8004ccc:	2200      	movs	r2, #0
 8004cce:	2100      	movs	r1, #0
 8004cd0:	68f8      	ldr	r0, [r7, #12]
 8004cd2:	f001 fc5b 	bl	800658c <USBD_LL_PrepareReceive>
 8004cd6:	e018      	b.n	8004d0a <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004cde:	b2db      	uxtb	r3, r3
 8004ce0:	2b03      	cmp	r3, #3
 8004ce2:	d10b      	bne.n	8004cfc <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004cea:	68db      	ldr	r3, [r3, #12]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d005      	beq.n	8004cfc <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004cf6:	68db      	ldr	r3, [r3, #12]
 8004cf8:	68f8      	ldr	r0, [r7, #12]
 8004cfa:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8004cfc:	2180      	movs	r1, #128	; 0x80
 8004cfe:	68f8      	ldr	r0, [r7, #12]
 8004d00:	f001 fb9a 	bl	8006438 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8004d04:	68f8      	ldr	r0, [r7, #12]
 8004d06:	f000 ff93 	bl	8005c30 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8004d10:	2b01      	cmp	r3, #1
 8004d12:	d122      	bne.n	8004d5a <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8004d14:	68f8      	ldr	r0, [r7, #12]
 8004d16:	f7ff fe98 	bl	8004a4a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8004d22:	e01a      	b.n	8004d5a <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004d2a:	b2db      	uxtb	r3, r3
 8004d2c:	2b03      	cmp	r3, #3
 8004d2e:	d114      	bne.n	8004d5a <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004d36:	695b      	ldr	r3, [r3, #20]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d00e      	beq.n	8004d5a <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004d42:	695b      	ldr	r3, [r3, #20]
 8004d44:	7afa      	ldrb	r2, [r7, #11]
 8004d46:	4611      	mov	r1, r2
 8004d48:	68f8      	ldr	r0, [r7, #12]
 8004d4a:	4798      	blx	r3
 8004d4c:	4603      	mov	r3, r0
 8004d4e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8004d50:	7dfb      	ldrb	r3, [r7, #23]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d001      	beq.n	8004d5a <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8004d56:	7dfb      	ldrb	r3, [r7, #23]
 8004d58:	e000      	b.n	8004d5c <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8004d5a:	2300      	movs	r3, #0
}
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	3718      	adds	r7, #24
 8004d60:	46bd      	mov	sp, r7
 8004d62:	bd80      	pop	{r7, pc}

08004d64 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b082      	sub	sp, #8
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2201      	movs	r2, #1
 8004d70:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2200      	movs	r2, #0
 8004d78:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2200      	movs	r2, #0
 8004d80:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	2200      	movs	r2, #0
 8004d86:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d101      	bne.n	8004d98 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8004d94:	2303      	movs	r3, #3
 8004d96:	e02f      	b.n	8004df8 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d00f      	beq.n	8004dc2 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004da8:	685b      	ldr	r3, [r3, #4]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d009      	beq.n	8004dc2 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004db4:	685b      	ldr	r3, [r3, #4]
 8004db6:	687a      	ldr	r2, [r7, #4]
 8004db8:	6852      	ldr	r2, [r2, #4]
 8004dba:	b2d2      	uxtb	r2, r2
 8004dbc:	4611      	mov	r1, r2
 8004dbe:	6878      	ldr	r0, [r7, #4]
 8004dc0:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004dc2:	2340      	movs	r3, #64	; 0x40
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	2100      	movs	r1, #0
 8004dc8:	6878      	ldr	r0, [r7, #4]
 8004dca:	f001 faf0 	bl	80063ae <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2201      	movs	r2, #1
 8004dd2:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2240      	movs	r2, #64	; 0x40
 8004dda:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004dde:	2340      	movs	r3, #64	; 0x40
 8004de0:	2200      	movs	r2, #0
 8004de2:	2180      	movs	r1, #128	; 0x80
 8004de4:	6878      	ldr	r0, [r7, #4]
 8004de6:	f001 fae2 	bl	80063ae <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2201      	movs	r2, #1
 8004dee:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2240      	movs	r2, #64	; 0x40
 8004df4:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8004df6:	2300      	movs	r3, #0
}
 8004df8:	4618      	mov	r0, r3
 8004dfa:	3708      	adds	r7, #8
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	bd80      	pop	{r7, pc}

08004e00 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8004e00:	b480      	push	{r7}
 8004e02:	b083      	sub	sp, #12
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
 8004e08:	460b      	mov	r3, r1
 8004e0a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	78fa      	ldrb	r2, [r7, #3]
 8004e10:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8004e12:	2300      	movs	r3, #0
}
 8004e14:	4618      	mov	r0, r3
 8004e16:	370c      	adds	r7, #12
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1e:	4770      	bx	lr

08004e20 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8004e20:	b480      	push	{r7}
 8004e22:	b083      	sub	sp, #12
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004e2e:	b2da      	uxtb	r2, r3
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2204      	movs	r2, #4
 8004e3a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8004e3e:	2300      	movs	r3, #0
}
 8004e40:	4618      	mov	r0, r3
 8004e42:	370c      	adds	r7, #12
 8004e44:	46bd      	mov	sp, r7
 8004e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4a:	4770      	bx	lr

08004e4c <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8004e4c:	b480      	push	{r7}
 8004e4e:	b083      	sub	sp, #12
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004e5a:	b2db      	uxtb	r3, r3
 8004e5c:	2b04      	cmp	r3, #4
 8004e5e:	d106      	bne.n	8004e6e <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8004e66:	b2da      	uxtb	r2, r3
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8004e6e:	2300      	movs	r3, #0
}
 8004e70:	4618      	mov	r0, r3
 8004e72:	370c      	adds	r7, #12
 8004e74:	46bd      	mov	sp, r7
 8004e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7a:	4770      	bx	lr

08004e7c <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b082      	sub	sp, #8
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d101      	bne.n	8004e92 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8004e8e:	2303      	movs	r3, #3
 8004e90:	e012      	b.n	8004eb8 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004e98:	b2db      	uxtb	r3, r3
 8004e9a:	2b03      	cmp	r3, #3
 8004e9c:	d10b      	bne.n	8004eb6 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004ea4:	69db      	ldr	r3, [r3, #28]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d005      	beq.n	8004eb6 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004eb0:	69db      	ldr	r3, [r3, #28]
 8004eb2:	6878      	ldr	r0, [r7, #4]
 8004eb4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8004eb6:	2300      	movs	r3, #0
}
 8004eb8:	4618      	mov	r0, r3
 8004eba:	3708      	adds	r7, #8
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	bd80      	pop	{r7, pc}

08004ec0 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b082      	sub	sp, #8
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
 8004ec8:	460b      	mov	r3, r1
 8004eca:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d101      	bne.n	8004eda <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8004ed6:	2303      	movs	r3, #3
 8004ed8:	e014      	b.n	8004f04 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004ee0:	b2db      	uxtb	r3, r3
 8004ee2:	2b03      	cmp	r3, #3
 8004ee4:	d10d      	bne.n	8004f02 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004eec:	6a1b      	ldr	r3, [r3, #32]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d007      	beq.n	8004f02 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004ef8:	6a1b      	ldr	r3, [r3, #32]
 8004efa:	78fa      	ldrb	r2, [r7, #3]
 8004efc:	4611      	mov	r1, r2
 8004efe:	6878      	ldr	r0, [r7, #4]
 8004f00:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8004f02:	2300      	movs	r3, #0
}
 8004f04:	4618      	mov	r0, r3
 8004f06:	3708      	adds	r7, #8
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	bd80      	pop	{r7, pc}

08004f0c <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b082      	sub	sp, #8
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
 8004f14:	460b      	mov	r3, r1
 8004f16:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d101      	bne.n	8004f26 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8004f22:	2303      	movs	r3, #3
 8004f24:	e014      	b.n	8004f50 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004f2c:	b2db      	uxtb	r3, r3
 8004f2e:	2b03      	cmp	r3, #3
 8004f30:	d10d      	bne.n	8004f4e <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d007      	beq.n	8004f4e <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f46:	78fa      	ldrb	r2, [r7, #3]
 8004f48:	4611      	mov	r1, r2
 8004f4a:	6878      	ldr	r0, [r7, #4]
 8004f4c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8004f4e:	2300      	movs	r3, #0
}
 8004f50:	4618      	mov	r0, r3
 8004f52:	3708      	adds	r7, #8
 8004f54:	46bd      	mov	sp, r7
 8004f56:	bd80      	pop	{r7, pc}

08004f58 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8004f58:	b480      	push	{r7}
 8004f5a:	b083      	sub	sp, #12
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8004f60:	2300      	movs	r3, #0
}
 8004f62:	4618      	mov	r0, r3
 8004f64:	370c      	adds	r7, #12
 8004f66:	46bd      	mov	sp, r7
 8004f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6c:	4770      	bx	lr

08004f6e <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8004f6e:	b580      	push	{r7, lr}
 8004f70:	b082      	sub	sp, #8
 8004f72:	af00      	add	r7, sp, #0
 8004f74:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2201      	movs	r2, #1
 8004f7a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d009      	beq.n	8004f9c <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004f8e:	685b      	ldr	r3, [r3, #4]
 8004f90:	687a      	ldr	r2, [r7, #4]
 8004f92:	6852      	ldr	r2, [r2, #4]
 8004f94:	b2d2      	uxtb	r2, r2
 8004f96:	4611      	mov	r1, r2
 8004f98:	6878      	ldr	r0, [r7, #4]
 8004f9a:	4798      	blx	r3
  }

  return USBD_OK;
 8004f9c:	2300      	movs	r3, #0
}
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	3708      	adds	r7, #8
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	bd80      	pop	{r7, pc}

08004fa6 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8004fa6:	b480      	push	{r7}
 8004fa8:	b087      	sub	sp, #28
 8004faa:	af00      	add	r7, sp, #0
 8004fac:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8004fb2:	697b      	ldr	r3, [r7, #20]
 8004fb4:	781b      	ldrb	r3, [r3, #0]
 8004fb6:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8004fb8:	697b      	ldr	r3, [r7, #20]
 8004fba:	3301      	adds	r3, #1
 8004fbc:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8004fbe:	697b      	ldr	r3, [r7, #20]
 8004fc0:	781b      	ldrb	r3, [r3, #0]
 8004fc2:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8004fc4:	8a3b      	ldrh	r3, [r7, #16]
 8004fc6:	021b      	lsls	r3, r3, #8
 8004fc8:	b21a      	sxth	r2, r3
 8004fca:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004fce:	4313      	orrs	r3, r2
 8004fd0:	b21b      	sxth	r3, r3
 8004fd2:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8004fd4:	89fb      	ldrh	r3, [r7, #14]
}
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	371c      	adds	r7, #28
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe0:	4770      	bx	lr
	...

08004fe4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b084      	sub	sp, #16
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
 8004fec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8004fee:	2300      	movs	r3, #0
 8004ff0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	781b      	ldrb	r3, [r3, #0]
 8004ff6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004ffa:	2b40      	cmp	r3, #64	; 0x40
 8004ffc:	d005      	beq.n	800500a <USBD_StdDevReq+0x26>
 8004ffe:	2b40      	cmp	r3, #64	; 0x40
 8005000:	d853      	bhi.n	80050aa <USBD_StdDevReq+0xc6>
 8005002:	2b00      	cmp	r3, #0
 8005004:	d00b      	beq.n	800501e <USBD_StdDevReq+0x3a>
 8005006:	2b20      	cmp	r3, #32
 8005008:	d14f      	bne.n	80050aa <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005010:	689b      	ldr	r3, [r3, #8]
 8005012:	6839      	ldr	r1, [r7, #0]
 8005014:	6878      	ldr	r0, [r7, #4]
 8005016:	4798      	blx	r3
 8005018:	4603      	mov	r3, r0
 800501a:	73fb      	strb	r3, [r7, #15]
      break;
 800501c:	e04a      	b.n	80050b4 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	785b      	ldrb	r3, [r3, #1]
 8005022:	2b09      	cmp	r3, #9
 8005024:	d83b      	bhi.n	800509e <USBD_StdDevReq+0xba>
 8005026:	a201      	add	r2, pc, #4	; (adr r2, 800502c <USBD_StdDevReq+0x48>)
 8005028:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800502c:	08005081 	.word	0x08005081
 8005030:	08005095 	.word	0x08005095
 8005034:	0800509f 	.word	0x0800509f
 8005038:	0800508b 	.word	0x0800508b
 800503c:	0800509f 	.word	0x0800509f
 8005040:	0800505f 	.word	0x0800505f
 8005044:	08005055 	.word	0x08005055
 8005048:	0800509f 	.word	0x0800509f
 800504c:	08005077 	.word	0x08005077
 8005050:	08005069 	.word	0x08005069
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8005054:	6839      	ldr	r1, [r7, #0]
 8005056:	6878      	ldr	r0, [r7, #4]
 8005058:	f000 f9de 	bl	8005418 <USBD_GetDescriptor>
          break;
 800505c:	e024      	b.n	80050a8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800505e:	6839      	ldr	r1, [r7, #0]
 8005060:	6878      	ldr	r0, [r7, #4]
 8005062:	f000 fb43 	bl	80056ec <USBD_SetAddress>
          break;
 8005066:	e01f      	b.n	80050a8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8005068:	6839      	ldr	r1, [r7, #0]
 800506a:	6878      	ldr	r0, [r7, #4]
 800506c:	f000 fb82 	bl	8005774 <USBD_SetConfig>
 8005070:	4603      	mov	r3, r0
 8005072:	73fb      	strb	r3, [r7, #15]
          break;
 8005074:	e018      	b.n	80050a8 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8005076:	6839      	ldr	r1, [r7, #0]
 8005078:	6878      	ldr	r0, [r7, #4]
 800507a:	f000 fc21 	bl	80058c0 <USBD_GetConfig>
          break;
 800507e:	e013      	b.n	80050a8 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8005080:	6839      	ldr	r1, [r7, #0]
 8005082:	6878      	ldr	r0, [r7, #4]
 8005084:	f000 fc52 	bl	800592c <USBD_GetStatus>
          break;
 8005088:	e00e      	b.n	80050a8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800508a:	6839      	ldr	r1, [r7, #0]
 800508c:	6878      	ldr	r0, [r7, #4]
 800508e:	f000 fc81 	bl	8005994 <USBD_SetFeature>
          break;
 8005092:	e009      	b.n	80050a8 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8005094:	6839      	ldr	r1, [r7, #0]
 8005096:	6878      	ldr	r0, [r7, #4]
 8005098:	f000 fc90 	bl	80059bc <USBD_ClrFeature>
          break;
 800509c:	e004      	b.n	80050a8 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800509e:	6839      	ldr	r1, [r7, #0]
 80050a0:	6878      	ldr	r0, [r7, #4]
 80050a2:	f000 fce7 	bl	8005a74 <USBD_CtlError>
          break;
 80050a6:	bf00      	nop
      }
      break;
 80050a8:	e004      	b.n	80050b4 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 80050aa:	6839      	ldr	r1, [r7, #0]
 80050ac:	6878      	ldr	r0, [r7, #4]
 80050ae:	f000 fce1 	bl	8005a74 <USBD_CtlError>
      break;
 80050b2:	bf00      	nop
  }

  return ret;
 80050b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80050b6:	4618      	mov	r0, r3
 80050b8:	3710      	adds	r7, #16
 80050ba:	46bd      	mov	sp, r7
 80050bc:	bd80      	pop	{r7, pc}
 80050be:	bf00      	nop

080050c0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b084      	sub	sp, #16
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
 80050c8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80050ca:	2300      	movs	r3, #0
 80050cc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	781b      	ldrb	r3, [r3, #0]
 80050d2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80050d6:	2b40      	cmp	r3, #64	; 0x40
 80050d8:	d005      	beq.n	80050e6 <USBD_StdItfReq+0x26>
 80050da:	2b40      	cmp	r3, #64	; 0x40
 80050dc:	d82f      	bhi.n	800513e <USBD_StdItfReq+0x7e>
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d001      	beq.n	80050e6 <USBD_StdItfReq+0x26>
 80050e2:	2b20      	cmp	r3, #32
 80050e4:	d12b      	bne.n	800513e <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80050ec:	b2db      	uxtb	r3, r3
 80050ee:	3b01      	subs	r3, #1
 80050f0:	2b02      	cmp	r3, #2
 80050f2:	d81d      	bhi.n	8005130 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	889b      	ldrh	r3, [r3, #4]
 80050f8:	b2db      	uxtb	r3, r3
 80050fa:	2b01      	cmp	r3, #1
 80050fc:	d813      	bhi.n	8005126 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005104:	689b      	ldr	r3, [r3, #8]
 8005106:	6839      	ldr	r1, [r7, #0]
 8005108:	6878      	ldr	r0, [r7, #4]
 800510a:	4798      	blx	r3
 800510c:	4603      	mov	r3, r0
 800510e:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	88db      	ldrh	r3, [r3, #6]
 8005114:	2b00      	cmp	r3, #0
 8005116:	d110      	bne.n	800513a <USBD_StdItfReq+0x7a>
 8005118:	7bfb      	ldrb	r3, [r7, #15]
 800511a:	2b00      	cmp	r3, #0
 800511c:	d10d      	bne.n	800513a <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800511e:	6878      	ldr	r0, [r7, #4]
 8005120:	f000 fd73 	bl	8005c0a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8005124:	e009      	b.n	800513a <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8005126:	6839      	ldr	r1, [r7, #0]
 8005128:	6878      	ldr	r0, [r7, #4]
 800512a:	f000 fca3 	bl	8005a74 <USBD_CtlError>
          break;
 800512e:	e004      	b.n	800513a <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8005130:	6839      	ldr	r1, [r7, #0]
 8005132:	6878      	ldr	r0, [r7, #4]
 8005134:	f000 fc9e 	bl	8005a74 <USBD_CtlError>
          break;
 8005138:	e000      	b.n	800513c <USBD_StdItfReq+0x7c>
          break;
 800513a:	bf00      	nop
      }
      break;
 800513c:	e004      	b.n	8005148 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800513e:	6839      	ldr	r1, [r7, #0]
 8005140:	6878      	ldr	r0, [r7, #4]
 8005142:	f000 fc97 	bl	8005a74 <USBD_CtlError>
      break;
 8005146:	bf00      	nop
  }

  return ret;
 8005148:	7bfb      	ldrb	r3, [r7, #15]
}
 800514a:	4618      	mov	r0, r3
 800514c:	3710      	adds	r7, #16
 800514e:	46bd      	mov	sp, r7
 8005150:	bd80      	pop	{r7, pc}

08005152 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005152:	b580      	push	{r7, lr}
 8005154:	b084      	sub	sp, #16
 8005156:	af00      	add	r7, sp, #0
 8005158:	6078      	str	r0, [r7, #4]
 800515a:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800515c:	2300      	movs	r3, #0
 800515e:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	889b      	ldrh	r3, [r3, #4]
 8005164:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	781b      	ldrb	r3, [r3, #0]
 800516a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800516e:	2b40      	cmp	r3, #64	; 0x40
 8005170:	d007      	beq.n	8005182 <USBD_StdEPReq+0x30>
 8005172:	2b40      	cmp	r3, #64	; 0x40
 8005174:	f200 8145 	bhi.w	8005402 <USBD_StdEPReq+0x2b0>
 8005178:	2b00      	cmp	r3, #0
 800517a:	d00c      	beq.n	8005196 <USBD_StdEPReq+0x44>
 800517c:	2b20      	cmp	r3, #32
 800517e:	f040 8140 	bne.w	8005402 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005188:	689b      	ldr	r3, [r3, #8]
 800518a:	6839      	ldr	r1, [r7, #0]
 800518c:	6878      	ldr	r0, [r7, #4]
 800518e:	4798      	blx	r3
 8005190:	4603      	mov	r3, r0
 8005192:	73fb      	strb	r3, [r7, #15]
      break;
 8005194:	e13a      	b.n	800540c <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	785b      	ldrb	r3, [r3, #1]
 800519a:	2b03      	cmp	r3, #3
 800519c:	d007      	beq.n	80051ae <USBD_StdEPReq+0x5c>
 800519e:	2b03      	cmp	r3, #3
 80051a0:	f300 8129 	bgt.w	80053f6 <USBD_StdEPReq+0x2a4>
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d07f      	beq.n	80052a8 <USBD_StdEPReq+0x156>
 80051a8:	2b01      	cmp	r3, #1
 80051aa:	d03c      	beq.n	8005226 <USBD_StdEPReq+0xd4>
 80051ac:	e123      	b.n	80053f6 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80051b4:	b2db      	uxtb	r3, r3
 80051b6:	2b02      	cmp	r3, #2
 80051b8:	d002      	beq.n	80051c0 <USBD_StdEPReq+0x6e>
 80051ba:	2b03      	cmp	r3, #3
 80051bc:	d016      	beq.n	80051ec <USBD_StdEPReq+0x9a>
 80051be:	e02c      	b.n	800521a <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80051c0:	7bbb      	ldrb	r3, [r7, #14]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d00d      	beq.n	80051e2 <USBD_StdEPReq+0x90>
 80051c6:	7bbb      	ldrb	r3, [r7, #14]
 80051c8:	2b80      	cmp	r3, #128	; 0x80
 80051ca:	d00a      	beq.n	80051e2 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80051cc:	7bbb      	ldrb	r3, [r7, #14]
 80051ce:	4619      	mov	r1, r3
 80051d0:	6878      	ldr	r0, [r7, #4]
 80051d2:	f001 f931 	bl	8006438 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80051d6:	2180      	movs	r1, #128	; 0x80
 80051d8:	6878      	ldr	r0, [r7, #4]
 80051da:	f001 f92d 	bl	8006438 <USBD_LL_StallEP>
 80051de:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80051e0:	e020      	b.n	8005224 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 80051e2:	6839      	ldr	r1, [r7, #0]
 80051e4:	6878      	ldr	r0, [r7, #4]
 80051e6:	f000 fc45 	bl	8005a74 <USBD_CtlError>
              break;
 80051ea:	e01b      	b.n	8005224 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	885b      	ldrh	r3, [r3, #2]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d10e      	bne.n	8005212 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80051f4:	7bbb      	ldrb	r3, [r7, #14]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d00b      	beq.n	8005212 <USBD_StdEPReq+0xc0>
 80051fa:	7bbb      	ldrb	r3, [r7, #14]
 80051fc:	2b80      	cmp	r3, #128	; 0x80
 80051fe:	d008      	beq.n	8005212 <USBD_StdEPReq+0xc0>
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	88db      	ldrh	r3, [r3, #6]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d104      	bne.n	8005212 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8005208:	7bbb      	ldrb	r3, [r7, #14]
 800520a:	4619      	mov	r1, r3
 800520c:	6878      	ldr	r0, [r7, #4]
 800520e:	f001 f913 	bl	8006438 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8005212:	6878      	ldr	r0, [r7, #4]
 8005214:	f000 fcf9 	bl	8005c0a <USBD_CtlSendStatus>

              break;
 8005218:	e004      	b.n	8005224 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800521a:	6839      	ldr	r1, [r7, #0]
 800521c:	6878      	ldr	r0, [r7, #4]
 800521e:	f000 fc29 	bl	8005a74 <USBD_CtlError>
              break;
 8005222:	bf00      	nop
          }
          break;
 8005224:	e0ec      	b.n	8005400 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800522c:	b2db      	uxtb	r3, r3
 800522e:	2b02      	cmp	r3, #2
 8005230:	d002      	beq.n	8005238 <USBD_StdEPReq+0xe6>
 8005232:	2b03      	cmp	r3, #3
 8005234:	d016      	beq.n	8005264 <USBD_StdEPReq+0x112>
 8005236:	e030      	b.n	800529a <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005238:	7bbb      	ldrb	r3, [r7, #14]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d00d      	beq.n	800525a <USBD_StdEPReq+0x108>
 800523e:	7bbb      	ldrb	r3, [r7, #14]
 8005240:	2b80      	cmp	r3, #128	; 0x80
 8005242:	d00a      	beq.n	800525a <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005244:	7bbb      	ldrb	r3, [r7, #14]
 8005246:	4619      	mov	r1, r3
 8005248:	6878      	ldr	r0, [r7, #4]
 800524a:	f001 f8f5 	bl	8006438 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800524e:	2180      	movs	r1, #128	; 0x80
 8005250:	6878      	ldr	r0, [r7, #4]
 8005252:	f001 f8f1 	bl	8006438 <USBD_LL_StallEP>
 8005256:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005258:	e025      	b.n	80052a6 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800525a:	6839      	ldr	r1, [r7, #0]
 800525c:	6878      	ldr	r0, [r7, #4]
 800525e:	f000 fc09 	bl	8005a74 <USBD_CtlError>
              break;
 8005262:	e020      	b.n	80052a6 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	885b      	ldrh	r3, [r3, #2]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d11b      	bne.n	80052a4 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800526c:	7bbb      	ldrb	r3, [r7, #14]
 800526e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005272:	2b00      	cmp	r3, #0
 8005274:	d004      	beq.n	8005280 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8005276:	7bbb      	ldrb	r3, [r7, #14]
 8005278:	4619      	mov	r1, r3
 800527a:	6878      	ldr	r0, [r7, #4]
 800527c:	f001 f8fb 	bl	8006476 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8005280:	6878      	ldr	r0, [r7, #4]
 8005282:	f000 fcc2 	bl	8005c0a <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800528c:	689b      	ldr	r3, [r3, #8]
 800528e:	6839      	ldr	r1, [r7, #0]
 8005290:	6878      	ldr	r0, [r7, #4]
 8005292:	4798      	blx	r3
 8005294:	4603      	mov	r3, r0
 8005296:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8005298:	e004      	b.n	80052a4 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800529a:	6839      	ldr	r1, [r7, #0]
 800529c:	6878      	ldr	r0, [r7, #4]
 800529e:	f000 fbe9 	bl	8005a74 <USBD_CtlError>
              break;
 80052a2:	e000      	b.n	80052a6 <USBD_StdEPReq+0x154>
              break;
 80052a4:	bf00      	nop
          }
          break;
 80052a6:	e0ab      	b.n	8005400 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80052ae:	b2db      	uxtb	r3, r3
 80052b0:	2b02      	cmp	r3, #2
 80052b2:	d002      	beq.n	80052ba <USBD_StdEPReq+0x168>
 80052b4:	2b03      	cmp	r3, #3
 80052b6:	d032      	beq.n	800531e <USBD_StdEPReq+0x1cc>
 80052b8:	e097      	b.n	80053ea <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80052ba:	7bbb      	ldrb	r3, [r7, #14]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d007      	beq.n	80052d0 <USBD_StdEPReq+0x17e>
 80052c0:	7bbb      	ldrb	r3, [r7, #14]
 80052c2:	2b80      	cmp	r3, #128	; 0x80
 80052c4:	d004      	beq.n	80052d0 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 80052c6:	6839      	ldr	r1, [r7, #0]
 80052c8:	6878      	ldr	r0, [r7, #4]
 80052ca:	f000 fbd3 	bl	8005a74 <USBD_CtlError>
                break;
 80052ce:	e091      	b.n	80053f4 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80052d0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	da0b      	bge.n	80052f0 <USBD_StdEPReq+0x19e>
 80052d8:	7bbb      	ldrb	r3, [r7, #14]
 80052da:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80052de:	4613      	mov	r3, r2
 80052e0:	009b      	lsls	r3, r3, #2
 80052e2:	4413      	add	r3, r2
 80052e4:	009b      	lsls	r3, r3, #2
 80052e6:	3310      	adds	r3, #16
 80052e8:	687a      	ldr	r2, [r7, #4]
 80052ea:	4413      	add	r3, r2
 80052ec:	3304      	adds	r3, #4
 80052ee:	e00b      	b.n	8005308 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80052f0:	7bbb      	ldrb	r3, [r7, #14]
 80052f2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80052f6:	4613      	mov	r3, r2
 80052f8:	009b      	lsls	r3, r3, #2
 80052fa:	4413      	add	r3, r2
 80052fc:	009b      	lsls	r3, r3, #2
 80052fe:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005302:	687a      	ldr	r2, [r7, #4]
 8005304:	4413      	add	r3, r2
 8005306:	3304      	adds	r3, #4
 8005308:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800530a:	68bb      	ldr	r3, [r7, #8]
 800530c:	2200      	movs	r2, #0
 800530e:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005310:	68bb      	ldr	r3, [r7, #8]
 8005312:	2202      	movs	r2, #2
 8005314:	4619      	mov	r1, r3
 8005316:	6878      	ldr	r0, [r7, #4]
 8005318:	f000 fc1d 	bl	8005b56 <USBD_CtlSendData>
              break;
 800531c:	e06a      	b.n	80053f4 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800531e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005322:	2b00      	cmp	r3, #0
 8005324:	da11      	bge.n	800534a <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005326:	7bbb      	ldrb	r3, [r7, #14]
 8005328:	f003 020f 	and.w	r2, r3, #15
 800532c:	6879      	ldr	r1, [r7, #4]
 800532e:	4613      	mov	r3, r2
 8005330:	009b      	lsls	r3, r3, #2
 8005332:	4413      	add	r3, r2
 8005334:	009b      	lsls	r3, r3, #2
 8005336:	440b      	add	r3, r1
 8005338:	3324      	adds	r3, #36	; 0x24
 800533a:	881b      	ldrh	r3, [r3, #0]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d117      	bne.n	8005370 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8005340:	6839      	ldr	r1, [r7, #0]
 8005342:	6878      	ldr	r0, [r7, #4]
 8005344:	f000 fb96 	bl	8005a74 <USBD_CtlError>
                  break;
 8005348:	e054      	b.n	80053f4 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800534a:	7bbb      	ldrb	r3, [r7, #14]
 800534c:	f003 020f 	and.w	r2, r3, #15
 8005350:	6879      	ldr	r1, [r7, #4]
 8005352:	4613      	mov	r3, r2
 8005354:	009b      	lsls	r3, r3, #2
 8005356:	4413      	add	r3, r2
 8005358:	009b      	lsls	r3, r3, #2
 800535a:	440b      	add	r3, r1
 800535c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005360:	881b      	ldrh	r3, [r3, #0]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d104      	bne.n	8005370 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8005366:	6839      	ldr	r1, [r7, #0]
 8005368:	6878      	ldr	r0, [r7, #4]
 800536a:	f000 fb83 	bl	8005a74 <USBD_CtlError>
                  break;
 800536e:	e041      	b.n	80053f4 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005370:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005374:	2b00      	cmp	r3, #0
 8005376:	da0b      	bge.n	8005390 <USBD_StdEPReq+0x23e>
 8005378:	7bbb      	ldrb	r3, [r7, #14]
 800537a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800537e:	4613      	mov	r3, r2
 8005380:	009b      	lsls	r3, r3, #2
 8005382:	4413      	add	r3, r2
 8005384:	009b      	lsls	r3, r3, #2
 8005386:	3310      	adds	r3, #16
 8005388:	687a      	ldr	r2, [r7, #4]
 800538a:	4413      	add	r3, r2
 800538c:	3304      	adds	r3, #4
 800538e:	e00b      	b.n	80053a8 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005390:	7bbb      	ldrb	r3, [r7, #14]
 8005392:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005396:	4613      	mov	r3, r2
 8005398:	009b      	lsls	r3, r3, #2
 800539a:	4413      	add	r3, r2
 800539c:	009b      	lsls	r3, r3, #2
 800539e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80053a2:	687a      	ldr	r2, [r7, #4]
 80053a4:	4413      	add	r3, r2
 80053a6:	3304      	adds	r3, #4
 80053a8:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80053aa:	7bbb      	ldrb	r3, [r7, #14]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d002      	beq.n	80053b6 <USBD_StdEPReq+0x264>
 80053b0:	7bbb      	ldrb	r3, [r7, #14]
 80053b2:	2b80      	cmp	r3, #128	; 0x80
 80053b4:	d103      	bne.n	80053be <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 80053b6:	68bb      	ldr	r3, [r7, #8]
 80053b8:	2200      	movs	r2, #0
 80053ba:	601a      	str	r2, [r3, #0]
 80053bc:	e00e      	b.n	80053dc <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80053be:	7bbb      	ldrb	r3, [r7, #14]
 80053c0:	4619      	mov	r1, r3
 80053c2:	6878      	ldr	r0, [r7, #4]
 80053c4:	f001 f876 	bl	80064b4 <USBD_LL_IsStallEP>
 80053c8:	4603      	mov	r3, r0
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d003      	beq.n	80053d6 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 80053ce:	68bb      	ldr	r3, [r7, #8]
 80053d0:	2201      	movs	r2, #1
 80053d2:	601a      	str	r2, [r3, #0]
 80053d4:	e002      	b.n	80053dc <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 80053d6:	68bb      	ldr	r3, [r7, #8]
 80053d8:	2200      	movs	r2, #0
 80053da:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80053dc:	68bb      	ldr	r3, [r7, #8]
 80053de:	2202      	movs	r2, #2
 80053e0:	4619      	mov	r1, r3
 80053e2:	6878      	ldr	r0, [r7, #4]
 80053e4:	f000 fbb7 	bl	8005b56 <USBD_CtlSendData>
              break;
 80053e8:	e004      	b.n	80053f4 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 80053ea:	6839      	ldr	r1, [r7, #0]
 80053ec:	6878      	ldr	r0, [r7, #4]
 80053ee:	f000 fb41 	bl	8005a74 <USBD_CtlError>
              break;
 80053f2:	bf00      	nop
          }
          break;
 80053f4:	e004      	b.n	8005400 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 80053f6:	6839      	ldr	r1, [r7, #0]
 80053f8:	6878      	ldr	r0, [r7, #4]
 80053fa:	f000 fb3b 	bl	8005a74 <USBD_CtlError>
          break;
 80053fe:	bf00      	nop
      }
      break;
 8005400:	e004      	b.n	800540c <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8005402:	6839      	ldr	r1, [r7, #0]
 8005404:	6878      	ldr	r0, [r7, #4]
 8005406:	f000 fb35 	bl	8005a74 <USBD_CtlError>
      break;
 800540a:	bf00      	nop
  }

  return ret;
 800540c:	7bfb      	ldrb	r3, [r7, #15]
}
 800540e:	4618      	mov	r0, r3
 8005410:	3710      	adds	r7, #16
 8005412:	46bd      	mov	sp, r7
 8005414:	bd80      	pop	{r7, pc}
	...

08005418 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b084      	sub	sp, #16
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
 8005420:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005422:	2300      	movs	r3, #0
 8005424:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8005426:	2300      	movs	r3, #0
 8005428:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800542a:	2300      	movs	r3, #0
 800542c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	885b      	ldrh	r3, [r3, #2]
 8005432:	0a1b      	lsrs	r3, r3, #8
 8005434:	b29b      	uxth	r3, r3
 8005436:	3b01      	subs	r3, #1
 8005438:	2b06      	cmp	r3, #6
 800543a:	f200 8128 	bhi.w	800568e <USBD_GetDescriptor+0x276>
 800543e:	a201      	add	r2, pc, #4	; (adr r2, 8005444 <USBD_GetDescriptor+0x2c>)
 8005440:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005444:	08005461 	.word	0x08005461
 8005448:	08005479 	.word	0x08005479
 800544c:	080054b9 	.word	0x080054b9
 8005450:	0800568f 	.word	0x0800568f
 8005454:	0800568f 	.word	0x0800568f
 8005458:	0800562f 	.word	0x0800562f
 800545c:	0800565b 	.word	0x0800565b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	687a      	ldr	r2, [r7, #4]
 800546a:	7c12      	ldrb	r2, [r2, #16]
 800546c:	f107 0108 	add.w	r1, r7, #8
 8005470:	4610      	mov	r0, r2
 8005472:	4798      	blx	r3
 8005474:	60f8      	str	r0, [r7, #12]
      break;
 8005476:	e112      	b.n	800569e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	7c1b      	ldrb	r3, [r3, #16]
 800547c:	2b00      	cmp	r3, #0
 800547e:	d10d      	bne.n	800549c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005486:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005488:	f107 0208 	add.w	r2, r7, #8
 800548c:	4610      	mov	r0, r2
 800548e:	4798      	blx	r3
 8005490:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	3301      	adds	r3, #1
 8005496:	2202      	movs	r2, #2
 8005498:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800549a:	e100      	b.n	800569e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80054a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054a4:	f107 0208 	add.w	r2, r7, #8
 80054a8:	4610      	mov	r0, r2
 80054aa:	4798      	blx	r3
 80054ac:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	3301      	adds	r3, #1
 80054b2:	2202      	movs	r2, #2
 80054b4:	701a      	strb	r2, [r3, #0]
      break;
 80054b6:	e0f2      	b.n	800569e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	885b      	ldrh	r3, [r3, #2]
 80054bc:	b2db      	uxtb	r3, r3
 80054be:	2b05      	cmp	r3, #5
 80054c0:	f200 80ac 	bhi.w	800561c <USBD_GetDescriptor+0x204>
 80054c4:	a201      	add	r2, pc, #4	; (adr r2, 80054cc <USBD_GetDescriptor+0xb4>)
 80054c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054ca:	bf00      	nop
 80054cc:	080054e5 	.word	0x080054e5
 80054d0:	08005519 	.word	0x08005519
 80054d4:	0800554d 	.word	0x0800554d
 80054d8:	08005581 	.word	0x08005581
 80054dc:	080055b5 	.word	0x080055b5
 80054e0:	080055e9 	.word	0x080055e9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80054ea:	685b      	ldr	r3, [r3, #4]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d00b      	beq.n	8005508 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80054f6:	685b      	ldr	r3, [r3, #4]
 80054f8:	687a      	ldr	r2, [r7, #4]
 80054fa:	7c12      	ldrb	r2, [r2, #16]
 80054fc:	f107 0108 	add.w	r1, r7, #8
 8005500:	4610      	mov	r0, r2
 8005502:	4798      	blx	r3
 8005504:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005506:	e091      	b.n	800562c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005508:	6839      	ldr	r1, [r7, #0]
 800550a:	6878      	ldr	r0, [r7, #4]
 800550c:	f000 fab2 	bl	8005a74 <USBD_CtlError>
            err++;
 8005510:	7afb      	ldrb	r3, [r7, #11]
 8005512:	3301      	adds	r3, #1
 8005514:	72fb      	strb	r3, [r7, #11]
          break;
 8005516:	e089      	b.n	800562c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800551e:	689b      	ldr	r3, [r3, #8]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d00b      	beq.n	800553c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800552a:	689b      	ldr	r3, [r3, #8]
 800552c:	687a      	ldr	r2, [r7, #4]
 800552e:	7c12      	ldrb	r2, [r2, #16]
 8005530:	f107 0108 	add.w	r1, r7, #8
 8005534:	4610      	mov	r0, r2
 8005536:	4798      	blx	r3
 8005538:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800553a:	e077      	b.n	800562c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800553c:	6839      	ldr	r1, [r7, #0]
 800553e:	6878      	ldr	r0, [r7, #4]
 8005540:	f000 fa98 	bl	8005a74 <USBD_CtlError>
            err++;
 8005544:	7afb      	ldrb	r3, [r7, #11]
 8005546:	3301      	adds	r3, #1
 8005548:	72fb      	strb	r3, [r7, #11]
          break;
 800554a:	e06f      	b.n	800562c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005552:	68db      	ldr	r3, [r3, #12]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d00b      	beq.n	8005570 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800555e:	68db      	ldr	r3, [r3, #12]
 8005560:	687a      	ldr	r2, [r7, #4]
 8005562:	7c12      	ldrb	r2, [r2, #16]
 8005564:	f107 0108 	add.w	r1, r7, #8
 8005568:	4610      	mov	r0, r2
 800556a:	4798      	blx	r3
 800556c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800556e:	e05d      	b.n	800562c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005570:	6839      	ldr	r1, [r7, #0]
 8005572:	6878      	ldr	r0, [r7, #4]
 8005574:	f000 fa7e 	bl	8005a74 <USBD_CtlError>
            err++;
 8005578:	7afb      	ldrb	r3, [r7, #11]
 800557a:	3301      	adds	r3, #1
 800557c:	72fb      	strb	r3, [r7, #11]
          break;
 800557e:	e055      	b.n	800562c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005586:	691b      	ldr	r3, [r3, #16]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d00b      	beq.n	80055a4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005592:	691b      	ldr	r3, [r3, #16]
 8005594:	687a      	ldr	r2, [r7, #4]
 8005596:	7c12      	ldrb	r2, [r2, #16]
 8005598:	f107 0108 	add.w	r1, r7, #8
 800559c:	4610      	mov	r0, r2
 800559e:	4798      	blx	r3
 80055a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80055a2:	e043      	b.n	800562c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80055a4:	6839      	ldr	r1, [r7, #0]
 80055a6:	6878      	ldr	r0, [r7, #4]
 80055a8:	f000 fa64 	bl	8005a74 <USBD_CtlError>
            err++;
 80055ac:	7afb      	ldrb	r3, [r7, #11]
 80055ae:	3301      	adds	r3, #1
 80055b0:	72fb      	strb	r3, [r7, #11]
          break;
 80055b2:	e03b      	b.n	800562c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80055ba:	695b      	ldr	r3, [r3, #20]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d00b      	beq.n	80055d8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80055c6:	695b      	ldr	r3, [r3, #20]
 80055c8:	687a      	ldr	r2, [r7, #4]
 80055ca:	7c12      	ldrb	r2, [r2, #16]
 80055cc:	f107 0108 	add.w	r1, r7, #8
 80055d0:	4610      	mov	r0, r2
 80055d2:	4798      	blx	r3
 80055d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80055d6:	e029      	b.n	800562c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80055d8:	6839      	ldr	r1, [r7, #0]
 80055da:	6878      	ldr	r0, [r7, #4]
 80055dc:	f000 fa4a 	bl	8005a74 <USBD_CtlError>
            err++;
 80055e0:	7afb      	ldrb	r3, [r7, #11]
 80055e2:	3301      	adds	r3, #1
 80055e4:	72fb      	strb	r3, [r7, #11]
          break;
 80055e6:	e021      	b.n	800562c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80055ee:	699b      	ldr	r3, [r3, #24]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d00b      	beq.n	800560c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80055fa:	699b      	ldr	r3, [r3, #24]
 80055fc:	687a      	ldr	r2, [r7, #4]
 80055fe:	7c12      	ldrb	r2, [r2, #16]
 8005600:	f107 0108 	add.w	r1, r7, #8
 8005604:	4610      	mov	r0, r2
 8005606:	4798      	blx	r3
 8005608:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800560a:	e00f      	b.n	800562c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800560c:	6839      	ldr	r1, [r7, #0]
 800560e:	6878      	ldr	r0, [r7, #4]
 8005610:	f000 fa30 	bl	8005a74 <USBD_CtlError>
            err++;
 8005614:	7afb      	ldrb	r3, [r7, #11]
 8005616:	3301      	adds	r3, #1
 8005618:	72fb      	strb	r3, [r7, #11]
          break;
 800561a:	e007      	b.n	800562c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800561c:	6839      	ldr	r1, [r7, #0]
 800561e:	6878      	ldr	r0, [r7, #4]
 8005620:	f000 fa28 	bl	8005a74 <USBD_CtlError>
          err++;
 8005624:	7afb      	ldrb	r3, [r7, #11]
 8005626:	3301      	adds	r3, #1
 8005628:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800562a:	bf00      	nop
      }
      break;
 800562c:	e037      	b.n	800569e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	7c1b      	ldrb	r3, [r3, #16]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d109      	bne.n	800564a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800563c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800563e:	f107 0208 	add.w	r2, r7, #8
 8005642:	4610      	mov	r0, r2
 8005644:	4798      	blx	r3
 8005646:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005648:	e029      	b.n	800569e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800564a:	6839      	ldr	r1, [r7, #0]
 800564c:	6878      	ldr	r0, [r7, #4]
 800564e:	f000 fa11 	bl	8005a74 <USBD_CtlError>
        err++;
 8005652:	7afb      	ldrb	r3, [r7, #11]
 8005654:	3301      	adds	r3, #1
 8005656:	72fb      	strb	r3, [r7, #11]
      break;
 8005658:	e021      	b.n	800569e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	7c1b      	ldrb	r3, [r3, #16]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d10d      	bne.n	800567e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800566a:	f107 0208 	add.w	r2, r7, #8
 800566e:	4610      	mov	r0, r2
 8005670:	4798      	blx	r3
 8005672:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	3301      	adds	r3, #1
 8005678:	2207      	movs	r2, #7
 800567a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800567c:	e00f      	b.n	800569e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800567e:	6839      	ldr	r1, [r7, #0]
 8005680:	6878      	ldr	r0, [r7, #4]
 8005682:	f000 f9f7 	bl	8005a74 <USBD_CtlError>
        err++;
 8005686:	7afb      	ldrb	r3, [r7, #11]
 8005688:	3301      	adds	r3, #1
 800568a:	72fb      	strb	r3, [r7, #11]
      break;
 800568c:	e007      	b.n	800569e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800568e:	6839      	ldr	r1, [r7, #0]
 8005690:	6878      	ldr	r0, [r7, #4]
 8005692:	f000 f9ef 	bl	8005a74 <USBD_CtlError>
      err++;
 8005696:	7afb      	ldrb	r3, [r7, #11]
 8005698:	3301      	adds	r3, #1
 800569a:	72fb      	strb	r3, [r7, #11]
      break;
 800569c:	bf00      	nop
  }

  if (err != 0U)
 800569e:	7afb      	ldrb	r3, [r7, #11]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d11e      	bne.n	80056e2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	88db      	ldrh	r3, [r3, #6]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d016      	beq.n	80056da <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80056ac:	893b      	ldrh	r3, [r7, #8]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d00e      	beq.n	80056d0 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	88da      	ldrh	r2, [r3, #6]
 80056b6:	893b      	ldrh	r3, [r7, #8]
 80056b8:	4293      	cmp	r3, r2
 80056ba:	bf28      	it	cs
 80056bc:	4613      	movcs	r3, r2
 80056be:	b29b      	uxth	r3, r3
 80056c0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80056c2:	893b      	ldrh	r3, [r7, #8]
 80056c4:	461a      	mov	r2, r3
 80056c6:	68f9      	ldr	r1, [r7, #12]
 80056c8:	6878      	ldr	r0, [r7, #4]
 80056ca:	f000 fa44 	bl	8005b56 <USBD_CtlSendData>
 80056ce:	e009      	b.n	80056e4 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80056d0:	6839      	ldr	r1, [r7, #0]
 80056d2:	6878      	ldr	r0, [r7, #4]
 80056d4:	f000 f9ce 	bl	8005a74 <USBD_CtlError>
 80056d8:	e004      	b.n	80056e4 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80056da:	6878      	ldr	r0, [r7, #4]
 80056dc:	f000 fa95 	bl	8005c0a <USBD_CtlSendStatus>
 80056e0:	e000      	b.n	80056e4 <USBD_GetDescriptor+0x2cc>
    return;
 80056e2:	bf00      	nop
  }
}
 80056e4:	3710      	adds	r7, #16
 80056e6:	46bd      	mov	sp, r7
 80056e8:	bd80      	pop	{r7, pc}
 80056ea:	bf00      	nop

080056ec <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80056ec:	b580      	push	{r7, lr}
 80056ee:	b084      	sub	sp, #16
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
 80056f4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	889b      	ldrh	r3, [r3, #4]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d131      	bne.n	8005762 <USBD_SetAddress+0x76>
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	88db      	ldrh	r3, [r3, #6]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d12d      	bne.n	8005762 <USBD_SetAddress+0x76>
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	885b      	ldrh	r3, [r3, #2]
 800570a:	2b7f      	cmp	r3, #127	; 0x7f
 800570c:	d829      	bhi.n	8005762 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	885b      	ldrh	r3, [r3, #2]
 8005712:	b2db      	uxtb	r3, r3
 8005714:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005718:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005720:	b2db      	uxtb	r3, r3
 8005722:	2b03      	cmp	r3, #3
 8005724:	d104      	bne.n	8005730 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8005726:	6839      	ldr	r1, [r7, #0]
 8005728:	6878      	ldr	r0, [r7, #4]
 800572a:	f000 f9a3 	bl	8005a74 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800572e:	e01d      	b.n	800576c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	7bfa      	ldrb	r2, [r7, #15]
 8005734:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8005738:	7bfb      	ldrb	r3, [r7, #15]
 800573a:	4619      	mov	r1, r3
 800573c:	6878      	ldr	r0, [r7, #4]
 800573e:	f000 fee5 	bl	800650c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8005742:	6878      	ldr	r0, [r7, #4]
 8005744:	f000 fa61 	bl	8005c0a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8005748:	7bfb      	ldrb	r3, [r7, #15]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d004      	beq.n	8005758 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	2202      	movs	r2, #2
 8005752:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005756:	e009      	b.n	800576c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2201      	movs	r2, #1
 800575c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005760:	e004      	b.n	800576c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8005762:	6839      	ldr	r1, [r7, #0]
 8005764:	6878      	ldr	r0, [r7, #4]
 8005766:	f000 f985 	bl	8005a74 <USBD_CtlError>
  }
}
 800576a:	bf00      	nop
 800576c:	bf00      	nop
 800576e:	3710      	adds	r7, #16
 8005770:	46bd      	mov	sp, r7
 8005772:	bd80      	pop	{r7, pc}

08005774 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005774:	b580      	push	{r7, lr}
 8005776:	b084      	sub	sp, #16
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
 800577c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800577e:	2300      	movs	r3, #0
 8005780:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	885b      	ldrh	r3, [r3, #2]
 8005786:	b2da      	uxtb	r2, r3
 8005788:	4b4c      	ldr	r3, [pc, #304]	; (80058bc <USBD_SetConfig+0x148>)
 800578a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800578c:	4b4b      	ldr	r3, [pc, #300]	; (80058bc <USBD_SetConfig+0x148>)
 800578e:	781b      	ldrb	r3, [r3, #0]
 8005790:	2b01      	cmp	r3, #1
 8005792:	d905      	bls.n	80057a0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8005794:	6839      	ldr	r1, [r7, #0]
 8005796:	6878      	ldr	r0, [r7, #4]
 8005798:	f000 f96c 	bl	8005a74 <USBD_CtlError>
    return USBD_FAIL;
 800579c:	2303      	movs	r3, #3
 800579e:	e088      	b.n	80058b2 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80057a6:	b2db      	uxtb	r3, r3
 80057a8:	2b02      	cmp	r3, #2
 80057aa:	d002      	beq.n	80057b2 <USBD_SetConfig+0x3e>
 80057ac:	2b03      	cmp	r3, #3
 80057ae:	d025      	beq.n	80057fc <USBD_SetConfig+0x88>
 80057b0:	e071      	b.n	8005896 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80057b2:	4b42      	ldr	r3, [pc, #264]	; (80058bc <USBD_SetConfig+0x148>)
 80057b4:	781b      	ldrb	r3, [r3, #0]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d01c      	beq.n	80057f4 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 80057ba:	4b40      	ldr	r3, [pc, #256]	; (80058bc <USBD_SetConfig+0x148>)
 80057bc:	781b      	ldrb	r3, [r3, #0]
 80057be:	461a      	mov	r2, r3
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80057c4:	4b3d      	ldr	r3, [pc, #244]	; (80058bc <USBD_SetConfig+0x148>)
 80057c6:	781b      	ldrb	r3, [r3, #0]
 80057c8:	4619      	mov	r1, r3
 80057ca:	6878      	ldr	r0, [r7, #4]
 80057cc:	f7ff f948 	bl	8004a60 <USBD_SetClassConfig>
 80057d0:	4603      	mov	r3, r0
 80057d2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80057d4:	7bfb      	ldrb	r3, [r7, #15]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d004      	beq.n	80057e4 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 80057da:	6839      	ldr	r1, [r7, #0]
 80057dc:	6878      	ldr	r0, [r7, #4]
 80057de:	f000 f949 	bl	8005a74 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80057e2:	e065      	b.n	80058b0 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80057e4:	6878      	ldr	r0, [r7, #4]
 80057e6:	f000 fa10 	bl	8005c0a <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2203      	movs	r2, #3
 80057ee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80057f2:	e05d      	b.n	80058b0 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80057f4:	6878      	ldr	r0, [r7, #4]
 80057f6:	f000 fa08 	bl	8005c0a <USBD_CtlSendStatus>
      break;
 80057fa:	e059      	b.n	80058b0 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80057fc:	4b2f      	ldr	r3, [pc, #188]	; (80058bc <USBD_SetConfig+0x148>)
 80057fe:	781b      	ldrb	r3, [r3, #0]
 8005800:	2b00      	cmp	r3, #0
 8005802:	d112      	bne.n	800582a <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2202      	movs	r2, #2
 8005808:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800580c:	4b2b      	ldr	r3, [pc, #172]	; (80058bc <USBD_SetConfig+0x148>)
 800580e:	781b      	ldrb	r3, [r3, #0]
 8005810:	461a      	mov	r2, r3
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8005816:	4b29      	ldr	r3, [pc, #164]	; (80058bc <USBD_SetConfig+0x148>)
 8005818:	781b      	ldrb	r3, [r3, #0]
 800581a:	4619      	mov	r1, r3
 800581c:	6878      	ldr	r0, [r7, #4]
 800581e:	f7ff f93b 	bl	8004a98 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8005822:	6878      	ldr	r0, [r7, #4]
 8005824:	f000 f9f1 	bl	8005c0a <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8005828:	e042      	b.n	80058b0 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800582a:	4b24      	ldr	r3, [pc, #144]	; (80058bc <USBD_SetConfig+0x148>)
 800582c:	781b      	ldrb	r3, [r3, #0]
 800582e:	461a      	mov	r2, r3
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	685b      	ldr	r3, [r3, #4]
 8005834:	429a      	cmp	r2, r3
 8005836:	d02a      	beq.n	800588e <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	685b      	ldr	r3, [r3, #4]
 800583c:	b2db      	uxtb	r3, r3
 800583e:	4619      	mov	r1, r3
 8005840:	6878      	ldr	r0, [r7, #4]
 8005842:	f7ff f929 	bl	8004a98 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8005846:	4b1d      	ldr	r3, [pc, #116]	; (80058bc <USBD_SetConfig+0x148>)
 8005848:	781b      	ldrb	r3, [r3, #0]
 800584a:	461a      	mov	r2, r3
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8005850:	4b1a      	ldr	r3, [pc, #104]	; (80058bc <USBD_SetConfig+0x148>)
 8005852:	781b      	ldrb	r3, [r3, #0]
 8005854:	4619      	mov	r1, r3
 8005856:	6878      	ldr	r0, [r7, #4]
 8005858:	f7ff f902 	bl	8004a60 <USBD_SetClassConfig>
 800585c:	4603      	mov	r3, r0
 800585e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8005860:	7bfb      	ldrb	r3, [r7, #15]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d00f      	beq.n	8005886 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8005866:	6839      	ldr	r1, [r7, #0]
 8005868:	6878      	ldr	r0, [r7, #4]
 800586a:	f000 f903 	bl	8005a74 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	685b      	ldr	r3, [r3, #4]
 8005872:	b2db      	uxtb	r3, r3
 8005874:	4619      	mov	r1, r3
 8005876:	6878      	ldr	r0, [r7, #4]
 8005878:	f7ff f90e 	bl	8004a98 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2202      	movs	r2, #2
 8005880:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8005884:	e014      	b.n	80058b0 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8005886:	6878      	ldr	r0, [r7, #4]
 8005888:	f000 f9bf 	bl	8005c0a <USBD_CtlSendStatus>
      break;
 800588c:	e010      	b.n	80058b0 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800588e:	6878      	ldr	r0, [r7, #4]
 8005890:	f000 f9bb 	bl	8005c0a <USBD_CtlSendStatus>
      break;
 8005894:	e00c      	b.n	80058b0 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8005896:	6839      	ldr	r1, [r7, #0]
 8005898:	6878      	ldr	r0, [r7, #4]
 800589a:	f000 f8eb 	bl	8005a74 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800589e:	4b07      	ldr	r3, [pc, #28]	; (80058bc <USBD_SetConfig+0x148>)
 80058a0:	781b      	ldrb	r3, [r3, #0]
 80058a2:	4619      	mov	r1, r3
 80058a4:	6878      	ldr	r0, [r7, #4]
 80058a6:	f7ff f8f7 	bl	8004a98 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80058aa:	2303      	movs	r3, #3
 80058ac:	73fb      	strb	r3, [r7, #15]
      break;
 80058ae:	bf00      	nop
  }

  return ret;
 80058b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80058b2:	4618      	mov	r0, r3
 80058b4:	3710      	adds	r7, #16
 80058b6:	46bd      	mov	sp, r7
 80058b8:	bd80      	pop	{r7, pc}
 80058ba:	bf00      	nop
 80058bc:	2000019c 	.word	0x2000019c

080058c0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80058c0:	b580      	push	{r7, lr}
 80058c2:	b082      	sub	sp, #8
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
 80058c8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	88db      	ldrh	r3, [r3, #6]
 80058ce:	2b01      	cmp	r3, #1
 80058d0:	d004      	beq.n	80058dc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80058d2:	6839      	ldr	r1, [r7, #0]
 80058d4:	6878      	ldr	r0, [r7, #4]
 80058d6:	f000 f8cd 	bl	8005a74 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80058da:	e023      	b.n	8005924 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80058e2:	b2db      	uxtb	r3, r3
 80058e4:	2b02      	cmp	r3, #2
 80058e6:	dc02      	bgt.n	80058ee <USBD_GetConfig+0x2e>
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	dc03      	bgt.n	80058f4 <USBD_GetConfig+0x34>
 80058ec:	e015      	b.n	800591a <USBD_GetConfig+0x5a>
 80058ee:	2b03      	cmp	r3, #3
 80058f0:	d00b      	beq.n	800590a <USBD_GetConfig+0x4a>
 80058f2:	e012      	b.n	800591a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2200      	movs	r2, #0
 80058f8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	3308      	adds	r3, #8
 80058fe:	2201      	movs	r2, #1
 8005900:	4619      	mov	r1, r3
 8005902:	6878      	ldr	r0, [r7, #4]
 8005904:	f000 f927 	bl	8005b56 <USBD_CtlSendData>
        break;
 8005908:	e00c      	b.n	8005924 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	3304      	adds	r3, #4
 800590e:	2201      	movs	r2, #1
 8005910:	4619      	mov	r1, r3
 8005912:	6878      	ldr	r0, [r7, #4]
 8005914:	f000 f91f 	bl	8005b56 <USBD_CtlSendData>
        break;
 8005918:	e004      	b.n	8005924 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800591a:	6839      	ldr	r1, [r7, #0]
 800591c:	6878      	ldr	r0, [r7, #4]
 800591e:	f000 f8a9 	bl	8005a74 <USBD_CtlError>
        break;
 8005922:	bf00      	nop
}
 8005924:	bf00      	nop
 8005926:	3708      	adds	r7, #8
 8005928:	46bd      	mov	sp, r7
 800592a:	bd80      	pop	{r7, pc}

0800592c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800592c:	b580      	push	{r7, lr}
 800592e:	b082      	sub	sp, #8
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
 8005934:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800593c:	b2db      	uxtb	r3, r3
 800593e:	3b01      	subs	r3, #1
 8005940:	2b02      	cmp	r3, #2
 8005942:	d81e      	bhi.n	8005982 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	88db      	ldrh	r3, [r3, #6]
 8005948:	2b02      	cmp	r3, #2
 800594a:	d004      	beq.n	8005956 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800594c:	6839      	ldr	r1, [r7, #0]
 800594e:	6878      	ldr	r0, [r7, #4]
 8005950:	f000 f890 	bl	8005a74 <USBD_CtlError>
        break;
 8005954:	e01a      	b.n	800598c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	2201      	movs	r2, #1
 800595a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8005962:	2b00      	cmp	r3, #0
 8005964:	d005      	beq.n	8005972 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	68db      	ldr	r3, [r3, #12]
 800596a:	f043 0202 	orr.w	r2, r3, #2
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	330c      	adds	r3, #12
 8005976:	2202      	movs	r2, #2
 8005978:	4619      	mov	r1, r3
 800597a:	6878      	ldr	r0, [r7, #4]
 800597c:	f000 f8eb 	bl	8005b56 <USBD_CtlSendData>
      break;
 8005980:	e004      	b.n	800598c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8005982:	6839      	ldr	r1, [r7, #0]
 8005984:	6878      	ldr	r0, [r7, #4]
 8005986:	f000 f875 	bl	8005a74 <USBD_CtlError>
      break;
 800598a:	bf00      	nop
  }
}
 800598c:	bf00      	nop
 800598e:	3708      	adds	r7, #8
 8005990:	46bd      	mov	sp, r7
 8005992:	bd80      	pop	{r7, pc}

08005994 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005994:	b580      	push	{r7, lr}
 8005996:	b082      	sub	sp, #8
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
 800599c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800599e:	683b      	ldr	r3, [r7, #0]
 80059a0:	885b      	ldrh	r3, [r3, #2]
 80059a2:	2b01      	cmp	r3, #1
 80059a4:	d106      	bne.n	80059b4 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2201      	movs	r2, #1
 80059aa:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80059ae:	6878      	ldr	r0, [r7, #4]
 80059b0:	f000 f92b 	bl	8005c0a <USBD_CtlSendStatus>
  }
}
 80059b4:	bf00      	nop
 80059b6:	3708      	adds	r7, #8
 80059b8:	46bd      	mov	sp, r7
 80059ba:	bd80      	pop	{r7, pc}

080059bc <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80059bc:	b580      	push	{r7, lr}
 80059be:	b082      	sub	sp, #8
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
 80059c4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80059cc:	b2db      	uxtb	r3, r3
 80059ce:	3b01      	subs	r3, #1
 80059d0:	2b02      	cmp	r3, #2
 80059d2:	d80b      	bhi.n	80059ec <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80059d4:	683b      	ldr	r3, [r7, #0]
 80059d6:	885b      	ldrh	r3, [r3, #2]
 80059d8:	2b01      	cmp	r3, #1
 80059da:	d10c      	bne.n	80059f6 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2200      	movs	r2, #0
 80059e0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80059e4:	6878      	ldr	r0, [r7, #4]
 80059e6:	f000 f910 	bl	8005c0a <USBD_CtlSendStatus>
      }
      break;
 80059ea:	e004      	b.n	80059f6 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80059ec:	6839      	ldr	r1, [r7, #0]
 80059ee:	6878      	ldr	r0, [r7, #4]
 80059f0:	f000 f840 	bl	8005a74 <USBD_CtlError>
      break;
 80059f4:	e000      	b.n	80059f8 <USBD_ClrFeature+0x3c>
      break;
 80059f6:	bf00      	nop
  }
}
 80059f8:	bf00      	nop
 80059fa:	3708      	adds	r7, #8
 80059fc:	46bd      	mov	sp, r7
 80059fe:	bd80      	pop	{r7, pc}

08005a00 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b084      	sub	sp, #16
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
 8005a08:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	781a      	ldrb	r2, [r3, #0]
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	3301      	adds	r3, #1
 8005a1a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	781a      	ldrb	r2, [r3, #0]
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	3301      	adds	r3, #1
 8005a28:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8005a2a:	68f8      	ldr	r0, [r7, #12]
 8005a2c:	f7ff fabb 	bl	8004fa6 <SWAPBYTE>
 8005a30:	4603      	mov	r3, r0
 8005a32:	461a      	mov	r2, r3
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	3301      	adds	r3, #1
 8005a3c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	3301      	adds	r3, #1
 8005a42:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8005a44:	68f8      	ldr	r0, [r7, #12]
 8005a46:	f7ff faae 	bl	8004fa6 <SWAPBYTE>
 8005a4a:	4603      	mov	r3, r0
 8005a4c:	461a      	mov	r2, r3
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	3301      	adds	r3, #1
 8005a56:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	3301      	adds	r3, #1
 8005a5c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8005a5e:	68f8      	ldr	r0, [r7, #12]
 8005a60:	f7ff faa1 	bl	8004fa6 <SWAPBYTE>
 8005a64:	4603      	mov	r3, r0
 8005a66:	461a      	mov	r2, r3
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	80da      	strh	r2, [r3, #6]
}
 8005a6c:	bf00      	nop
 8005a6e:	3710      	adds	r7, #16
 8005a70:	46bd      	mov	sp, r7
 8005a72:	bd80      	pop	{r7, pc}

08005a74 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005a74:	b580      	push	{r7, lr}
 8005a76:	b082      	sub	sp, #8
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
 8005a7c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8005a7e:	2180      	movs	r1, #128	; 0x80
 8005a80:	6878      	ldr	r0, [r7, #4]
 8005a82:	f000 fcd9 	bl	8006438 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8005a86:	2100      	movs	r1, #0
 8005a88:	6878      	ldr	r0, [r7, #4]
 8005a8a:	f000 fcd5 	bl	8006438 <USBD_LL_StallEP>
}
 8005a8e:	bf00      	nop
 8005a90:	3708      	adds	r7, #8
 8005a92:	46bd      	mov	sp, r7
 8005a94:	bd80      	pop	{r7, pc}

08005a96 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8005a96:	b580      	push	{r7, lr}
 8005a98:	b086      	sub	sp, #24
 8005a9a:	af00      	add	r7, sp, #0
 8005a9c:	60f8      	str	r0, [r7, #12]
 8005a9e:	60b9      	str	r1, [r7, #8]
 8005aa0:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d036      	beq.n	8005b1a <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8005ab0:	6938      	ldr	r0, [r7, #16]
 8005ab2:	f000 f836 	bl	8005b22 <USBD_GetLen>
 8005ab6:	4603      	mov	r3, r0
 8005ab8:	3301      	adds	r3, #1
 8005aba:	b29b      	uxth	r3, r3
 8005abc:	005b      	lsls	r3, r3, #1
 8005abe:	b29a      	uxth	r2, r3
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8005ac4:	7dfb      	ldrb	r3, [r7, #23]
 8005ac6:	68ba      	ldr	r2, [r7, #8]
 8005ac8:	4413      	add	r3, r2
 8005aca:	687a      	ldr	r2, [r7, #4]
 8005acc:	7812      	ldrb	r2, [r2, #0]
 8005ace:	701a      	strb	r2, [r3, #0]
  idx++;
 8005ad0:	7dfb      	ldrb	r3, [r7, #23]
 8005ad2:	3301      	adds	r3, #1
 8005ad4:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8005ad6:	7dfb      	ldrb	r3, [r7, #23]
 8005ad8:	68ba      	ldr	r2, [r7, #8]
 8005ada:	4413      	add	r3, r2
 8005adc:	2203      	movs	r2, #3
 8005ade:	701a      	strb	r2, [r3, #0]
  idx++;
 8005ae0:	7dfb      	ldrb	r3, [r7, #23]
 8005ae2:	3301      	adds	r3, #1
 8005ae4:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8005ae6:	e013      	b.n	8005b10 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8005ae8:	7dfb      	ldrb	r3, [r7, #23]
 8005aea:	68ba      	ldr	r2, [r7, #8]
 8005aec:	4413      	add	r3, r2
 8005aee:	693a      	ldr	r2, [r7, #16]
 8005af0:	7812      	ldrb	r2, [r2, #0]
 8005af2:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8005af4:	693b      	ldr	r3, [r7, #16]
 8005af6:	3301      	adds	r3, #1
 8005af8:	613b      	str	r3, [r7, #16]
    idx++;
 8005afa:	7dfb      	ldrb	r3, [r7, #23]
 8005afc:	3301      	adds	r3, #1
 8005afe:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8005b00:	7dfb      	ldrb	r3, [r7, #23]
 8005b02:	68ba      	ldr	r2, [r7, #8]
 8005b04:	4413      	add	r3, r2
 8005b06:	2200      	movs	r2, #0
 8005b08:	701a      	strb	r2, [r3, #0]
    idx++;
 8005b0a:	7dfb      	ldrb	r3, [r7, #23]
 8005b0c:	3301      	adds	r3, #1
 8005b0e:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8005b10:	693b      	ldr	r3, [r7, #16]
 8005b12:	781b      	ldrb	r3, [r3, #0]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d1e7      	bne.n	8005ae8 <USBD_GetString+0x52>
 8005b18:	e000      	b.n	8005b1c <USBD_GetString+0x86>
    return;
 8005b1a:	bf00      	nop
  }
}
 8005b1c:	3718      	adds	r7, #24
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	bd80      	pop	{r7, pc}

08005b22 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8005b22:	b480      	push	{r7}
 8005b24:	b085      	sub	sp, #20
 8005b26:	af00      	add	r7, sp, #0
 8005b28:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8005b32:	e005      	b.n	8005b40 <USBD_GetLen+0x1e>
  {
    len++;
 8005b34:	7bfb      	ldrb	r3, [r7, #15]
 8005b36:	3301      	adds	r3, #1
 8005b38:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8005b3a:	68bb      	ldr	r3, [r7, #8]
 8005b3c:	3301      	adds	r3, #1
 8005b3e:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8005b40:	68bb      	ldr	r3, [r7, #8]
 8005b42:	781b      	ldrb	r3, [r3, #0]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d1f5      	bne.n	8005b34 <USBD_GetLen+0x12>
  }

  return len;
 8005b48:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	3714      	adds	r7, #20
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b54:	4770      	bx	lr

08005b56 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8005b56:	b580      	push	{r7, lr}
 8005b58:	b084      	sub	sp, #16
 8005b5a:	af00      	add	r7, sp, #0
 8005b5c:	60f8      	str	r0, [r7, #12]
 8005b5e:	60b9      	str	r1, [r7, #8]
 8005b60:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	2202      	movs	r2, #2
 8005b66:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	687a      	ldr	r2, [r7, #4]
 8005b6e:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	687a      	ldr	r2, [r7, #4]
 8005b74:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	68ba      	ldr	r2, [r7, #8]
 8005b7a:	2100      	movs	r1, #0
 8005b7c:	68f8      	ldr	r0, [r7, #12]
 8005b7e:	f000 fce4 	bl	800654a <USBD_LL_Transmit>

  return USBD_OK;
 8005b82:	2300      	movs	r3, #0
}
 8005b84:	4618      	mov	r0, r3
 8005b86:	3710      	adds	r7, #16
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	bd80      	pop	{r7, pc}

08005b8c <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	b084      	sub	sp, #16
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	60f8      	str	r0, [r7, #12]
 8005b94:	60b9      	str	r1, [r7, #8]
 8005b96:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	68ba      	ldr	r2, [r7, #8]
 8005b9c:	2100      	movs	r1, #0
 8005b9e:	68f8      	ldr	r0, [r7, #12]
 8005ba0:	f000 fcd3 	bl	800654a <USBD_LL_Transmit>

  return USBD_OK;
 8005ba4:	2300      	movs	r3, #0
}
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	3710      	adds	r7, #16
 8005baa:	46bd      	mov	sp, r7
 8005bac:	bd80      	pop	{r7, pc}

08005bae <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8005bae:	b580      	push	{r7, lr}
 8005bb0:	b084      	sub	sp, #16
 8005bb2:	af00      	add	r7, sp, #0
 8005bb4:	60f8      	str	r0, [r7, #12]
 8005bb6:	60b9      	str	r1, [r7, #8]
 8005bb8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	2203      	movs	r2, #3
 8005bbe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	687a      	ldr	r2, [r7, #4]
 8005bc6:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	687a      	ldr	r2, [r7, #4]
 8005bce:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	68ba      	ldr	r2, [r7, #8]
 8005bd6:	2100      	movs	r1, #0
 8005bd8:	68f8      	ldr	r0, [r7, #12]
 8005bda:	f000 fcd7 	bl	800658c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005bde:	2300      	movs	r3, #0
}
 8005be0:	4618      	mov	r0, r3
 8005be2:	3710      	adds	r7, #16
 8005be4:	46bd      	mov	sp, r7
 8005be6:	bd80      	pop	{r7, pc}

08005be8 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8005be8:	b580      	push	{r7, lr}
 8005bea:	b084      	sub	sp, #16
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	60f8      	str	r0, [r7, #12]
 8005bf0:	60b9      	str	r1, [r7, #8]
 8005bf2:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	68ba      	ldr	r2, [r7, #8]
 8005bf8:	2100      	movs	r1, #0
 8005bfa:	68f8      	ldr	r0, [r7, #12]
 8005bfc:	f000 fcc6 	bl	800658c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005c00:	2300      	movs	r3, #0
}
 8005c02:	4618      	mov	r0, r3
 8005c04:	3710      	adds	r7, #16
 8005c06:	46bd      	mov	sp, r7
 8005c08:	bd80      	pop	{r7, pc}

08005c0a <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8005c0a:	b580      	push	{r7, lr}
 8005c0c:	b082      	sub	sp, #8
 8005c0e:	af00      	add	r7, sp, #0
 8005c10:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	2204      	movs	r2, #4
 8005c16:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	2100      	movs	r1, #0
 8005c20:	6878      	ldr	r0, [r7, #4]
 8005c22:	f000 fc92 	bl	800654a <USBD_LL_Transmit>

  return USBD_OK;
 8005c26:	2300      	movs	r3, #0
}
 8005c28:	4618      	mov	r0, r3
 8005c2a:	3708      	adds	r7, #8
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	bd80      	pop	{r7, pc}

08005c30 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b082      	sub	sp, #8
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2205      	movs	r2, #5
 8005c3c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005c40:	2300      	movs	r3, #0
 8005c42:	2200      	movs	r2, #0
 8005c44:	2100      	movs	r1, #0
 8005c46:	6878      	ldr	r0, [r7, #4]
 8005c48:	f000 fca0 	bl	800658c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005c4c:	2300      	movs	r3, #0
}
 8005c4e:	4618      	mov	r0, r3
 8005c50:	3708      	adds	r7, #8
 8005c52:	46bd      	mov	sp, r7
 8005c54:	bd80      	pop	{r7, pc}
	...

08005c58 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	4912      	ldr	r1, [pc, #72]	; (8005ca8 <MX_USB_DEVICE_Init+0x50>)
 8005c60:	4812      	ldr	r0, [pc, #72]	; (8005cac <MX_USB_DEVICE_Init+0x54>)
 8005c62:	f7fe fe8f 	bl	8004984 <USBD_Init>
 8005c66:	4603      	mov	r3, r0
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d001      	beq.n	8005c70 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8005c6c:	f7fa fe50 	bl	8000910 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8005c70:	490f      	ldr	r1, [pc, #60]	; (8005cb0 <MX_USB_DEVICE_Init+0x58>)
 8005c72:	480e      	ldr	r0, [pc, #56]	; (8005cac <MX_USB_DEVICE_Init+0x54>)
 8005c74:	f7fe feb6 	bl	80049e4 <USBD_RegisterClass>
 8005c78:	4603      	mov	r3, r0
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d001      	beq.n	8005c82 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8005c7e:	f7fa fe47 	bl	8000910 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8005c82:	490c      	ldr	r1, [pc, #48]	; (8005cb4 <MX_USB_DEVICE_Init+0x5c>)
 8005c84:	4809      	ldr	r0, [pc, #36]	; (8005cac <MX_USB_DEVICE_Init+0x54>)
 8005c86:	f7fe fe07 	bl	8004898 <USBD_CDC_RegisterInterface>
 8005c8a:	4603      	mov	r3, r0
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d001      	beq.n	8005c94 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8005c90:	f7fa fe3e 	bl	8000910 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8005c94:	4805      	ldr	r0, [pc, #20]	; (8005cac <MX_USB_DEVICE_Init+0x54>)
 8005c96:	f7fe fecc 	bl	8004a32 <USBD_Start>
 8005c9a:	4603      	mov	r3, r0
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d001      	beq.n	8005ca4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8005ca0:	f7fa fe36 	bl	8000910 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8005ca4:	bf00      	nop
 8005ca6:	bd80      	pop	{r7, pc}
 8005ca8:	20000130 	.word	0x20000130
 8005cac:	200003c4 	.word	0x200003c4
 8005cb0:	20000018 	.word	0x20000018
 8005cb4:	2000011c 	.word	0x2000011c

08005cb8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	4905      	ldr	r1, [pc, #20]	; (8005cd4 <CDC_Init_FS+0x1c>)
 8005cc0:	4805      	ldr	r0, [pc, #20]	; (8005cd8 <CDC_Init_FS+0x20>)
 8005cc2:	f7fe fdfe 	bl	80048c2 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8005cc6:	4905      	ldr	r1, [pc, #20]	; (8005cdc <CDC_Init_FS+0x24>)
 8005cc8:	4803      	ldr	r0, [pc, #12]	; (8005cd8 <CDC_Init_FS+0x20>)
 8005cca:	f7fe fe18 	bl	80048fe <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8005cce:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	bd80      	pop	{r7, pc}
 8005cd4:	20000e94 	.word	0x20000e94
 8005cd8:	200003c4 	.word	0x200003c4
 8005cdc:	20000694 	.word	0x20000694

08005ce0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8005ce0:	b480      	push	{r7}
 8005ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8005ce4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cee:	4770      	bx	lr

08005cf0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8005cf0:	b480      	push	{r7}
 8005cf2:	b083      	sub	sp, #12
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	4603      	mov	r3, r0
 8005cf8:	6039      	str	r1, [r7, #0]
 8005cfa:	71fb      	strb	r3, [r7, #7]
 8005cfc:	4613      	mov	r3, r2
 8005cfe:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8005d00:	79fb      	ldrb	r3, [r7, #7]
 8005d02:	2b23      	cmp	r3, #35	; 0x23
 8005d04:	d84a      	bhi.n	8005d9c <CDC_Control_FS+0xac>
 8005d06:	a201      	add	r2, pc, #4	; (adr r2, 8005d0c <CDC_Control_FS+0x1c>)
 8005d08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d0c:	08005d9d 	.word	0x08005d9d
 8005d10:	08005d9d 	.word	0x08005d9d
 8005d14:	08005d9d 	.word	0x08005d9d
 8005d18:	08005d9d 	.word	0x08005d9d
 8005d1c:	08005d9d 	.word	0x08005d9d
 8005d20:	08005d9d 	.word	0x08005d9d
 8005d24:	08005d9d 	.word	0x08005d9d
 8005d28:	08005d9d 	.word	0x08005d9d
 8005d2c:	08005d9d 	.word	0x08005d9d
 8005d30:	08005d9d 	.word	0x08005d9d
 8005d34:	08005d9d 	.word	0x08005d9d
 8005d38:	08005d9d 	.word	0x08005d9d
 8005d3c:	08005d9d 	.word	0x08005d9d
 8005d40:	08005d9d 	.word	0x08005d9d
 8005d44:	08005d9d 	.word	0x08005d9d
 8005d48:	08005d9d 	.word	0x08005d9d
 8005d4c:	08005d9d 	.word	0x08005d9d
 8005d50:	08005d9d 	.word	0x08005d9d
 8005d54:	08005d9d 	.word	0x08005d9d
 8005d58:	08005d9d 	.word	0x08005d9d
 8005d5c:	08005d9d 	.word	0x08005d9d
 8005d60:	08005d9d 	.word	0x08005d9d
 8005d64:	08005d9d 	.word	0x08005d9d
 8005d68:	08005d9d 	.word	0x08005d9d
 8005d6c:	08005d9d 	.word	0x08005d9d
 8005d70:	08005d9d 	.word	0x08005d9d
 8005d74:	08005d9d 	.word	0x08005d9d
 8005d78:	08005d9d 	.word	0x08005d9d
 8005d7c:	08005d9d 	.word	0x08005d9d
 8005d80:	08005d9d 	.word	0x08005d9d
 8005d84:	08005d9d 	.word	0x08005d9d
 8005d88:	08005d9d 	.word	0x08005d9d
 8005d8c:	08005d9d 	.word	0x08005d9d
 8005d90:	08005d9d 	.word	0x08005d9d
 8005d94:	08005d9d 	.word	0x08005d9d
 8005d98:	08005d9d 	.word	0x08005d9d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8005d9c:	bf00      	nop
  }

  return (USBD_OK);
 8005d9e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8005da0:	4618      	mov	r0, r3
 8005da2:	370c      	adds	r7, #12
 8005da4:	46bd      	mov	sp, r7
 8005da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005daa:	4770      	bx	lr

08005dac <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8005dac:	b580      	push	{r7, lr}
 8005dae:	b082      	sub	sp, #8
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
 8005db4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8005db6:	6879      	ldr	r1, [r7, #4]
 8005db8:	4805      	ldr	r0, [pc, #20]	; (8005dd0 <CDC_Receive_FS+0x24>)
 8005dba:	f7fe fda0 	bl	80048fe <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8005dbe:	4804      	ldr	r0, [pc, #16]	; (8005dd0 <CDC_Receive_FS+0x24>)
 8005dc0:	f7fe fdb6 	bl	8004930 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8005dc4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	3708      	adds	r7, #8
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	bd80      	pop	{r7, pc}
 8005dce:	bf00      	nop
 8005dd0:	200003c4 	.word	0x200003c4

08005dd4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8005dd4:	b480      	push	{r7}
 8005dd6:	b087      	sub	sp, #28
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	60f8      	str	r0, [r7, #12]
 8005ddc:	60b9      	str	r1, [r7, #8]
 8005dde:	4613      	mov	r3, r2
 8005de0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8005de2:	2300      	movs	r3, #0
 8005de4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8005de6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005dea:	4618      	mov	r0, r3
 8005dec:	371c      	adds	r7, #28
 8005dee:	46bd      	mov	sp, r7
 8005df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df4:	4770      	bx	lr
	...

08005df8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005df8:	b480      	push	{r7}
 8005dfa:	b083      	sub	sp, #12
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	4603      	mov	r3, r0
 8005e00:	6039      	str	r1, [r7, #0]
 8005e02:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	2212      	movs	r2, #18
 8005e08:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8005e0a:	4b03      	ldr	r3, [pc, #12]	; (8005e18 <USBD_FS_DeviceDescriptor+0x20>)
}
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	370c      	adds	r7, #12
 8005e10:	46bd      	mov	sp, r7
 8005e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e16:	4770      	bx	lr
 8005e18:	2000014c 	.word	0x2000014c

08005e1c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005e1c:	b480      	push	{r7}
 8005e1e:	b083      	sub	sp, #12
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	4603      	mov	r3, r0
 8005e24:	6039      	str	r1, [r7, #0]
 8005e26:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	2204      	movs	r2, #4
 8005e2c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8005e2e:	4b03      	ldr	r3, [pc, #12]	; (8005e3c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8005e30:	4618      	mov	r0, r3
 8005e32:	370c      	adds	r7, #12
 8005e34:	46bd      	mov	sp, r7
 8005e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3a:	4770      	bx	lr
 8005e3c:	20000160 	.word	0x20000160

08005e40 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b082      	sub	sp, #8
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	4603      	mov	r3, r0
 8005e48:	6039      	str	r1, [r7, #0]
 8005e4a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8005e4c:	79fb      	ldrb	r3, [r7, #7]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d105      	bne.n	8005e5e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8005e52:	683a      	ldr	r2, [r7, #0]
 8005e54:	4907      	ldr	r1, [pc, #28]	; (8005e74 <USBD_FS_ProductStrDescriptor+0x34>)
 8005e56:	4808      	ldr	r0, [pc, #32]	; (8005e78 <USBD_FS_ProductStrDescriptor+0x38>)
 8005e58:	f7ff fe1d 	bl	8005a96 <USBD_GetString>
 8005e5c:	e004      	b.n	8005e68 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8005e5e:	683a      	ldr	r2, [r7, #0]
 8005e60:	4904      	ldr	r1, [pc, #16]	; (8005e74 <USBD_FS_ProductStrDescriptor+0x34>)
 8005e62:	4805      	ldr	r0, [pc, #20]	; (8005e78 <USBD_FS_ProductStrDescriptor+0x38>)
 8005e64:	f7ff fe17 	bl	8005a96 <USBD_GetString>
  }
  return USBD_StrDesc;
 8005e68:	4b02      	ldr	r3, [pc, #8]	; (8005e74 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	3708      	adds	r7, #8
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	bd80      	pop	{r7, pc}
 8005e72:	bf00      	nop
 8005e74:	20001694 	.word	0x20001694
 8005e78:	080066ec 	.word	0x080066ec

08005e7c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b082      	sub	sp, #8
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	4603      	mov	r3, r0
 8005e84:	6039      	str	r1, [r7, #0]
 8005e86:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8005e88:	683a      	ldr	r2, [r7, #0]
 8005e8a:	4904      	ldr	r1, [pc, #16]	; (8005e9c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8005e8c:	4804      	ldr	r0, [pc, #16]	; (8005ea0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8005e8e:	f7ff fe02 	bl	8005a96 <USBD_GetString>
  return USBD_StrDesc;
 8005e92:	4b02      	ldr	r3, [pc, #8]	; (8005e9c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8005e94:	4618      	mov	r0, r3
 8005e96:	3708      	adds	r7, #8
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	bd80      	pop	{r7, pc}
 8005e9c:	20001694 	.word	0x20001694
 8005ea0:	08006704 	.word	0x08006704

08005ea4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	b082      	sub	sp, #8
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	4603      	mov	r3, r0
 8005eac:	6039      	str	r1, [r7, #0]
 8005eae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	221a      	movs	r2, #26
 8005eb4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8005eb6:	f000 f843 	bl	8005f40 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8005eba:	4b02      	ldr	r3, [pc, #8]	; (8005ec4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8005ebc:	4618      	mov	r0, r3
 8005ebe:	3708      	adds	r7, #8
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	bd80      	pop	{r7, pc}
 8005ec4:	20000164 	.word	0x20000164

08005ec8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b082      	sub	sp, #8
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	4603      	mov	r3, r0
 8005ed0:	6039      	str	r1, [r7, #0]
 8005ed2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8005ed4:	79fb      	ldrb	r3, [r7, #7]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d105      	bne.n	8005ee6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8005eda:	683a      	ldr	r2, [r7, #0]
 8005edc:	4907      	ldr	r1, [pc, #28]	; (8005efc <USBD_FS_ConfigStrDescriptor+0x34>)
 8005ede:	4808      	ldr	r0, [pc, #32]	; (8005f00 <USBD_FS_ConfigStrDescriptor+0x38>)
 8005ee0:	f7ff fdd9 	bl	8005a96 <USBD_GetString>
 8005ee4:	e004      	b.n	8005ef0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8005ee6:	683a      	ldr	r2, [r7, #0]
 8005ee8:	4904      	ldr	r1, [pc, #16]	; (8005efc <USBD_FS_ConfigStrDescriptor+0x34>)
 8005eea:	4805      	ldr	r0, [pc, #20]	; (8005f00 <USBD_FS_ConfigStrDescriptor+0x38>)
 8005eec:	f7ff fdd3 	bl	8005a96 <USBD_GetString>
  }
  return USBD_StrDesc;
 8005ef0:	4b02      	ldr	r3, [pc, #8]	; (8005efc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	3708      	adds	r7, #8
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	bd80      	pop	{r7, pc}
 8005efa:	bf00      	nop
 8005efc:	20001694 	.word	0x20001694
 8005f00:	08006718 	.word	0x08006718

08005f04 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005f04:	b580      	push	{r7, lr}
 8005f06:	b082      	sub	sp, #8
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	4603      	mov	r3, r0
 8005f0c:	6039      	str	r1, [r7, #0]
 8005f0e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8005f10:	79fb      	ldrb	r3, [r7, #7]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d105      	bne.n	8005f22 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8005f16:	683a      	ldr	r2, [r7, #0]
 8005f18:	4907      	ldr	r1, [pc, #28]	; (8005f38 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8005f1a:	4808      	ldr	r0, [pc, #32]	; (8005f3c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8005f1c:	f7ff fdbb 	bl	8005a96 <USBD_GetString>
 8005f20:	e004      	b.n	8005f2c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8005f22:	683a      	ldr	r2, [r7, #0]
 8005f24:	4904      	ldr	r1, [pc, #16]	; (8005f38 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8005f26:	4805      	ldr	r0, [pc, #20]	; (8005f3c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8005f28:	f7ff fdb5 	bl	8005a96 <USBD_GetString>
  }
  return USBD_StrDesc;
 8005f2c:	4b02      	ldr	r3, [pc, #8]	; (8005f38 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8005f2e:	4618      	mov	r0, r3
 8005f30:	3708      	adds	r7, #8
 8005f32:	46bd      	mov	sp, r7
 8005f34:	bd80      	pop	{r7, pc}
 8005f36:	bf00      	nop
 8005f38:	20001694 	.word	0x20001694
 8005f3c:	08006724 	.word	0x08006724

08005f40 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8005f40:	b580      	push	{r7, lr}
 8005f42:	b084      	sub	sp, #16
 8005f44:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8005f46:	4b0f      	ldr	r3, [pc, #60]	; (8005f84 <Get_SerialNum+0x44>)
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8005f4c:	4b0e      	ldr	r3, [pc, #56]	; (8005f88 <Get_SerialNum+0x48>)
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8005f52:	4b0e      	ldr	r3, [pc, #56]	; (8005f8c <Get_SerialNum+0x4c>)
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8005f58:	68fa      	ldr	r2, [r7, #12]
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	4413      	add	r3, r2
 8005f5e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d009      	beq.n	8005f7a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8005f66:	2208      	movs	r2, #8
 8005f68:	4909      	ldr	r1, [pc, #36]	; (8005f90 <Get_SerialNum+0x50>)
 8005f6a:	68f8      	ldr	r0, [r7, #12]
 8005f6c:	f000 f814 	bl	8005f98 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8005f70:	2204      	movs	r2, #4
 8005f72:	4908      	ldr	r1, [pc, #32]	; (8005f94 <Get_SerialNum+0x54>)
 8005f74:	68b8      	ldr	r0, [r7, #8]
 8005f76:	f000 f80f 	bl	8005f98 <IntToUnicode>
  }
}
 8005f7a:	bf00      	nop
 8005f7c:	3710      	adds	r7, #16
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	bd80      	pop	{r7, pc}
 8005f82:	bf00      	nop
 8005f84:	1fff7a10 	.word	0x1fff7a10
 8005f88:	1fff7a14 	.word	0x1fff7a14
 8005f8c:	1fff7a18 	.word	0x1fff7a18
 8005f90:	20000166 	.word	0x20000166
 8005f94:	20000176 	.word	0x20000176

08005f98 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8005f98:	b480      	push	{r7}
 8005f9a:	b087      	sub	sp, #28
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	60f8      	str	r0, [r7, #12]
 8005fa0:	60b9      	str	r1, [r7, #8]
 8005fa2:	4613      	mov	r3, r2
 8005fa4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8005faa:	2300      	movs	r3, #0
 8005fac:	75fb      	strb	r3, [r7, #23]
 8005fae:	e027      	b.n	8006000 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	0f1b      	lsrs	r3, r3, #28
 8005fb4:	2b09      	cmp	r3, #9
 8005fb6:	d80b      	bhi.n	8005fd0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	0f1b      	lsrs	r3, r3, #28
 8005fbc:	b2da      	uxtb	r2, r3
 8005fbe:	7dfb      	ldrb	r3, [r7, #23]
 8005fc0:	005b      	lsls	r3, r3, #1
 8005fc2:	4619      	mov	r1, r3
 8005fc4:	68bb      	ldr	r3, [r7, #8]
 8005fc6:	440b      	add	r3, r1
 8005fc8:	3230      	adds	r2, #48	; 0x30
 8005fca:	b2d2      	uxtb	r2, r2
 8005fcc:	701a      	strb	r2, [r3, #0]
 8005fce:	e00a      	b.n	8005fe6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	0f1b      	lsrs	r3, r3, #28
 8005fd4:	b2da      	uxtb	r2, r3
 8005fd6:	7dfb      	ldrb	r3, [r7, #23]
 8005fd8:	005b      	lsls	r3, r3, #1
 8005fda:	4619      	mov	r1, r3
 8005fdc:	68bb      	ldr	r3, [r7, #8]
 8005fde:	440b      	add	r3, r1
 8005fe0:	3237      	adds	r2, #55	; 0x37
 8005fe2:	b2d2      	uxtb	r2, r2
 8005fe4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	011b      	lsls	r3, r3, #4
 8005fea:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8005fec:	7dfb      	ldrb	r3, [r7, #23]
 8005fee:	005b      	lsls	r3, r3, #1
 8005ff0:	3301      	adds	r3, #1
 8005ff2:	68ba      	ldr	r2, [r7, #8]
 8005ff4:	4413      	add	r3, r2
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8005ffa:	7dfb      	ldrb	r3, [r7, #23]
 8005ffc:	3301      	adds	r3, #1
 8005ffe:	75fb      	strb	r3, [r7, #23]
 8006000:	7dfa      	ldrb	r2, [r7, #23]
 8006002:	79fb      	ldrb	r3, [r7, #7]
 8006004:	429a      	cmp	r2, r3
 8006006:	d3d3      	bcc.n	8005fb0 <IntToUnicode+0x18>
  }
}
 8006008:	bf00      	nop
 800600a:	bf00      	nop
 800600c:	371c      	adds	r7, #28
 800600e:	46bd      	mov	sp, r7
 8006010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006014:	4770      	bx	lr
	...

08006018 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006018:	b580      	push	{r7, lr}
 800601a:	b08a      	sub	sp, #40	; 0x28
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006020:	f107 0314 	add.w	r3, r7, #20
 8006024:	2200      	movs	r2, #0
 8006026:	601a      	str	r2, [r3, #0]
 8006028:	605a      	str	r2, [r3, #4]
 800602a:	609a      	str	r2, [r3, #8]
 800602c:	60da      	str	r2, [r3, #12]
 800602e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006038:	d158      	bne.n	80060ec <HAL_PCD_MspInit+0xd4>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800603a:	2300      	movs	r3, #0
 800603c:	613b      	str	r3, [r7, #16]
 800603e:	4b2d      	ldr	r3, [pc, #180]	; (80060f4 <HAL_PCD_MspInit+0xdc>)
 8006040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006042:	4a2c      	ldr	r2, [pc, #176]	; (80060f4 <HAL_PCD_MspInit+0xdc>)
 8006044:	f043 0301 	orr.w	r3, r3, #1
 8006048:	6313      	str	r3, [r2, #48]	; 0x30
 800604a:	4b2a      	ldr	r3, [pc, #168]	; (80060f4 <HAL_PCD_MspInit+0xdc>)
 800604c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800604e:	f003 0301 	and.w	r3, r3, #1
 8006052:	613b      	str	r3, [r7, #16]
 8006054:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8006056:	f44f 7300 	mov.w	r3, #512	; 0x200
 800605a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800605c:	2300      	movs	r3, #0
 800605e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006060:	2300      	movs	r3, #0
 8006062:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8006064:	f107 0314 	add.w	r3, r7, #20
 8006068:	4619      	mov	r1, r3
 800606a:	4823      	ldr	r0, [pc, #140]	; (80060f8 <HAL_PCD_MspInit+0xe0>)
 800606c:	f7fa fe96 	bl	8000d9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DP_Pin;
 8006070:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8006074:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006076:	2302      	movs	r3, #2
 8006078:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800607a:	2300      	movs	r3, #0
 800607c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800607e:	2300      	movs	r3, #0
 8006080:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8006082:	230a      	movs	r3, #10
 8006084:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006086:	f107 0314 	add.w	r3, r7, #20
 800608a:	4619      	mov	r1, r3
 800608c:	481a      	ldr	r0, [pc, #104]	; (80060f8 <HAL_PCD_MspInit+0xe0>)
 800608e:	f7fa fe85 	bl	8000d9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8006092:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006096:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006098:	2302      	movs	r3, #2
 800609a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800609c:	2300      	movs	r3, #0
 800609e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80060a0:	2303      	movs	r3, #3
 80060a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80060a4:	230a      	movs	r3, #10
 80060a6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80060a8:	f107 0314 	add.w	r3, r7, #20
 80060ac:	4619      	mov	r1, r3
 80060ae:	4812      	ldr	r0, [pc, #72]	; (80060f8 <HAL_PCD_MspInit+0xe0>)
 80060b0:	f7fa fe74 	bl	8000d9c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80060b4:	4b0f      	ldr	r3, [pc, #60]	; (80060f4 <HAL_PCD_MspInit+0xdc>)
 80060b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060b8:	4a0e      	ldr	r2, [pc, #56]	; (80060f4 <HAL_PCD_MspInit+0xdc>)
 80060ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060be:	6353      	str	r3, [r2, #52]	; 0x34
 80060c0:	2300      	movs	r3, #0
 80060c2:	60fb      	str	r3, [r7, #12]
 80060c4:	4b0b      	ldr	r3, [pc, #44]	; (80060f4 <HAL_PCD_MspInit+0xdc>)
 80060c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060c8:	4a0a      	ldr	r2, [pc, #40]	; (80060f4 <HAL_PCD_MspInit+0xdc>)
 80060ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80060ce:	6453      	str	r3, [r2, #68]	; 0x44
 80060d0:	4b08      	ldr	r3, [pc, #32]	; (80060f4 <HAL_PCD_MspInit+0xdc>)
 80060d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80060d8:	60fb      	str	r3, [r7, #12]
 80060da:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80060dc:	2200      	movs	r2, #0
 80060de:	2100      	movs	r1, #0
 80060e0:	2043      	movs	r0, #67	; 0x43
 80060e2:	f7fa fe24 	bl	8000d2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80060e6:	2043      	movs	r0, #67	; 0x43
 80060e8:	f7fa fe3d 	bl	8000d66 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80060ec:	bf00      	nop
 80060ee:	3728      	adds	r7, #40	; 0x28
 80060f0:	46bd      	mov	sp, r7
 80060f2:	bd80      	pop	{r7, pc}
 80060f4:	40023800 	.word	0x40023800
 80060f8:	40020000 	.word	0x40020000

080060fc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80060fc:	b580      	push	{r7, lr}
 80060fe:	b082      	sub	sp, #8
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006110:	4619      	mov	r1, r3
 8006112:	4610      	mov	r0, r2
 8006114:	f7fe fcd8 	bl	8004ac8 <USBD_LL_SetupStage>
}
 8006118:	bf00      	nop
 800611a:	3708      	adds	r7, #8
 800611c:	46bd      	mov	sp, r7
 800611e:	bd80      	pop	{r7, pc}

08006120 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006120:	b580      	push	{r7, lr}
 8006122:	b082      	sub	sp, #8
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
 8006128:	460b      	mov	r3, r1
 800612a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8006132:	78fa      	ldrb	r2, [r7, #3]
 8006134:	6879      	ldr	r1, [r7, #4]
 8006136:	4613      	mov	r3, r2
 8006138:	00db      	lsls	r3, r3, #3
 800613a:	1a9b      	subs	r3, r3, r2
 800613c:	009b      	lsls	r3, r3, #2
 800613e:	440b      	add	r3, r1
 8006140:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006144:	681a      	ldr	r2, [r3, #0]
 8006146:	78fb      	ldrb	r3, [r7, #3]
 8006148:	4619      	mov	r1, r3
 800614a:	f7fe fd12 	bl	8004b72 <USBD_LL_DataOutStage>
}
 800614e:	bf00      	nop
 8006150:	3708      	adds	r7, #8
 8006152:	46bd      	mov	sp, r7
 8006154:	bd80      	pop	{r7, pc}

08006156 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006156:	b580      	push	{r7, lr}
 8006158:	b082      	sub	sp, #8
 800615a:	af00      	add	r7, sp, #0
 800615c:	6078      	str	r0, [r7, #4]
 800615e:	460b      	mov	r3, r1
 8006160:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8006168:	78fa      	ldrb	r2, [r7, #3]
 800616a:	6879      	ldr	r1, [r7, #4]
 800616c:	4613      	mov	r3, r2
 800616e:	00db      	lsls	r3, r3, #3
 8006170:	1a9b      	subs	r3, r3, r2
 8006172:	009b      	lsls	r3, r3, #2
 8006174:	440b      	add	r3, r1
 8006176:	3348      	adds	r3, #72	; 0x48
 8006178:	681a      	ldr	r2, [r3, #0]
 800617a:	78fb      	ldrb	r3, [r7, #3]
 800617c:	4619      	mov	r1, r3
 800617e:	f7fe fd5b 	bl	8004c38 <USBD_LL_DataInStage>
}
 8006182:	bf00      	nop
 8006184:	3708      	adds	r7, #8
 8006186:	46bd      	mov	sp, r7
 8006188:	bd80      	pop	{r7, pc}

0800618a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800618a:	b580      	push	{r7, lr}
 800618c:	b082      	sub	sp, #8
 800618e:	af00      	add	r7, sp, #0
 8006190:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006198:	4618      	mov	r0, r3
 800619a:	f7fe fe6f 	bl	8004e7c <USBD_LL_SOF>
}
 800619e:	bf00      	nop
 80061a0:	3708      	adds	r7, #8
 80061a2:	46bd      	mov	sp, r7
 80061a4:	bd80      	pop	{r7, pc}

080061a6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80061a6:	b580      	push	{r7, lr}
 80061a8:	b084      	sub	sp, #16
 80061aa:	af00      	add	r7, sp, #0
 80061ac:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80061ae:	2301      	movs	r3, #1
 80061b0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	68db      	ldr	r3, [r3, #12]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d102      	bne.n	80061c0 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80061ba:	2300      	movs	r3, #0
 80061bc:	73fb      	strb	r3, [r7, #15]
 80061be:	e008      	b.n	80061d2 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	68db      	ldr	r3, [r3, #12]
 80061c4:	2b02      	cmp	r3, #2
 80061c6:	d102      	bne.n	80061ce <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80061c8:	2301      	movs	r3, #1
 80061ca:	73fb      	strb	r3, [r7, #15]
 80061cc:	e001      	b.n	80061d2 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80061ce:	f7fa fb9f 	bl	8000910 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80061d8:	7bfa      	ldrb	r2, [r7, #15]
 80061da:	4611      	mov	r1, r2
 80061dc:	4618      	mov	r0, r3
 80061de:	f7fe fe0f 	bl	8004e00 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80061e8:	4618      	mov	r0, r3
 80061ea:	f7fe fdbb 	bl	8004d64 <USBD_LL_Reset>
}
 80061ee:	bf00      	nop
 80061f0:	3710      	adds	r7, #16
 80061f2:	46bd      	mov	sp, r7
 80061f4:	bd80      	pop	{r7, pc}
	...

080061f8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80061f8:	b580      	push	{r7, lr}
 80061fa:	b082      	sub	sp, #8
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006206:	4618      	mov	r0, r3
 8006208:	f7fe fe0a 	bl	8004e20 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	687a      	ldr	r2, [r7, #4]
 8006218:	6812      	ldr	r2, [r2, #0]
 800621a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800621e:	f043 0301 	orr.w	r3, r3, #1
 8006222:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	6a1b      	ldr	r3, [r3, #32]
 8006228:	2b00      	cmp	r3, #0
 800622a:	d005      	beq.n	8006238 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800622c:	4b04      	ldr	r3, [pc, #16]	; (8006240 <HAL_PCD_SuspendCallback+0x48>)
 800622e:	691b      	ldr	r3, [r3, #16]
 8006230:	4a03      	ldr	r2, [pc, #12]	; (8006240 <HAL_PCD_SuspendCallback+0x48>)
 8006232:	f043 0306 	orr.w	r3, r3, #6
 8006236:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8006238:	bf00      	nop
 800623a:	3708      	adds	r7, #8
 800623c:	46bd      	mov	sp, r7
 800623e:	bd80      	pop	{r7, pc}
 8006240:	e000ed00 	.word	0xe000ed00

08006244 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006244:	b580      	push	{r7, lr}
 8006246:	b082      	sub	sp, #8
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006252:	4618      	mov	r0, r3
 8006254:	f7fe fdfa 	bl	8004e4c <USBD_LL_Resume>
}
 8006258:	bf00      	nop
 800625a:	3708      	adds	r7, #8
 800625c:	46bd      	mov	sp, r7
 800625e:	bd80      	pop	{r7, pc}

08006260 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006260:	b580      	push	{r7, lr}
 8006262:	b082      	sub	sp, #8
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
 8006268:	460b      	mov	r3, r1
 800626a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006272:	78fa      	ldrb	r2, [r7, #3]
 8006274:	4611      	mov	r1, r2
 8006276:	4618      	mov	r0, r3
 8006278:	f7fe fe48 	bl	8004f0c <USBD_LL_IsoOUTIncomplete>
}
 800627c:	bf00      	nop
 800627e:	3708      	adds	r7, #8
 8006280:	46bd      	mov	sp, r7
 8006282:	bd80      	pop	{r7, pc}

08006284 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006284:	b580      	push	{r7, lr}
 8006286:	b082      	sub	sp, #8
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
 800628c:	460b      	mov	r3, r1
 800628e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006296:	78fa      	ldrb	r2, [r7, #3]
 8006298:	4611      	mov	r1, r2
 800629a:	4618      	mov	r0, r3
 800629c:	f7fe fe10 	bl	8004ec0 <USBD_LL_IsoINIncomplete>
}
 80062a0:	bf00      	nop
 80062a2:	3708      	adds	r7, #8
 80062a4:	46bd      	mov	sp, r7
 80062a6:	bd80      	pop	{r7, pc}

080062a8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80062a8:	b580      	push	{r7, lr}
 80062aa:	b082      	sub	sp, #8
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80062b6:	4618      	mov	r0, r3
 80062b8:	f7fe fe4e 	bl	8004f58 <USBD_LL_DevConnected>
}
 80062bc:	bf00      	nop
 80062be:	3708      	adds	r7, #8
 80062c0:	46bd      	mov	sp, r7
 80062c2:	bd80      	pop	{r7, pc}

080062c4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80062c4:	b580      	push	{r7, lr}
 80062c6:	b082      	sub	sp, #8
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80062d2:	4618      	mov	r0, r3
 80062d4:	f7fe fe4b 	bl	8004f6e <USBD_LL_DevDisconnected>
}
 80062d8:	bf00      	nop
 80062da:	3708      	adds	r7, #8
 80062dc:	46bd      	mov	sp, r7
 80062de:	bd80      	pop	{r7, pc}

080062e0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80062e0:	b580      	push	{r7, lr}
 80062e2:	b082      	sub	sp, #8
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	781b      	ldrb	r3, [r3, #0]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d13c      	bne.n	800636a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80062f0:	4a20      	ldr	r2, [pc, #128]	; (8006374 <USBD_LL_Init+0x94>)
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	4a1e      	ldr	r2, [pc, #120]	; (8006374 <USBD_LL_Init+0x94>)
 80062fc:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8006300:	4b1c      	ldr	r3, [pc, #112]	; (8006374 <USBD_LL_Init+0x94>)
 8006302:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8006306:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8006308:	4b1a      	ldr	r3, [pc, #104]	; (8006374 <USBD_LL_Init+0x94>)
 800630a:	2204      	movs	r2, #4
 800630c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800630e:	4b19      	ldr	r3, [pc, #100]	; (8006374 <USBD_LL_Init+0x94>)
 8006310:	2202      	movs	r2, #2
 8006312:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8006314:	4b17      	ldr	r3, [pc, #92]	; (8006374 <USBD_LL_Init+0x94>)
 8006316:	2200      	movs	r2, #0
 8006318:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800631a:	4b16      	ldr	r3, [pc, #88]	; (8006374 <USBD_LL_Init+0x94>)
 800631c:	2202      	movs	r2, #2
 800631e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8006320:	4b14      	ldr	r3, [pc, #80]	; (8006374 <USBD_LL_Init+0x94>)
 8006322:	2200      	movs	r2, #0
 8006324:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8006326:	4b13      	ldr	r3, [pc, #76]	; (8006374 <USBD_LL_Init+0x94>)
 8006328:	2200      	movs	r2, #0
 800632a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800632c:	4b11      	ldr	r3, [pc, #68]	; (8006374 <USBD_LL_Init+0x94>)
 800632e:	2200      	movs	r2, #0
 8006330:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8006332:	4b10      	ldr	r3, [pc, #64]	; (8006374 <USBD_LL_Init+0x94>)
 8006334:	2201      	movs	r2, #1
 8006336:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8006338:	4b0e      	ldr	r3, [pc, #56]	; (8006374 <USBD_LL_Init+0x94>)
 800633a:	2200      	movs	r2, #0
 800633c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800633e:	480d      	ldr	r0, [pc, #52]	; (8006374 <USBD_LL_Init+0x94>)
 8006340:	f7fa fee1 	bl	8001106 <HAL_PCD_Init>
 8006344:	4603      	mov	r3, r0
 8006346:	2b00      	cmp	r3, #0
 8006348:	d001      	beq.n	800634e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800634a:	f7fa fae1 	bl	8000910 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800634e:	2180      	movs	r1, #128	; 0x80
 8006350:	4808      	ldr	r0, [pc, #32]	; (8006374 <USBD_LL_Init+0x94>)
 8006352:	f7fc f83e 	bl	80023d2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8006356:	2240      	movs	r2, #64	; 0x40
 8006358:	2100      	movs	r1, #0
 800635a:	4806      	ldr	r0, [pc, #24]	; (8006374 <USBD_LL_Init+0x94>)
 800635c:	f7fb fff2 	bl	8002344 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8006360:	2280      	movs	r2, #128	; 0x80
 8006362:	2101      	movs	r1, #1
 8006364:	4803      	ldr	r0, [pc, #12]	; (8006374 <USBD_LL_Init+0x94>)
 8006366:	f7fb ffed 	bl	8002344 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800636a:	2300      	movs	r3, #0
}
 800636c:	4618      	mov	r0, r3
 800636e:	3708      	adds	r7, #8
 8006370:	46bd      	mov	sp, r7
 8006372:	bd80      	pop	{r7, pc}
 8006374:	20001894 	.word	0x20001894

08006378 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8006378:	b580      	push	{r7, lr}
 800637a:	b084      	sub	sp, #16
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006380:	2300      	movs	r3, #0
 8006382:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006384:	2300      	movs	r3, #0
 8006386:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800638e:	4618      	mov	r0, r3
 8006390:	f7fa ffd6 	bl	8001340 <HAL_PCD_Start>
 8006394:	4603      	mov	r3, r0
 8006396:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006398:	7bfb      	ldrb	r3, [r7, #15]
 800639a:	4618      	mov	r0, r3
 800639c:	f000 f942 	bl	8006624 <USBD_Get_USB_Status>
 80063a0:	4603      	mov	r3, r0
 80063a2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80063a4:	7bbb      	ldrb	r3, [r7, #14]
}
 80063a6:	4618      	mov	r0, r3
 80063a8:	3710      	adds	r7, #16
 80063aa:	46bd      	mov	sp, r7
 80063ac:	bd80      	pop	{r7, pc}

080063ae <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80063ae:	b580      	push	{r7, lr}
 80063b0:	b084      	sub	sp, #16
 80063b2:	af00      	add	r7, sp, #0
 80063b4:	6078      	str	r0, [r7, #4]
 80063b6:	4608      	mov	r0, r1
 80063b8:	4611      	mov	r1, r2
 80063ba:	461a      	mov	r2, r3
 80063bc:	4603      	mov	r3, r0
 80063be:	70fb      	strb	r3, [r7, #3]
 80063c0:	460b      	mov	r3, r1
 80063c2:	70bb      	strb	r3, [r7, #2]
 80063c4:	4613      	mov	r3, r2
 80063c6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80063c8:	2300      	movs	r3, #0
 80063ca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80063cc:	2300      	movs	r3, #0
 80063ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80063d6:	78bb      	ldrb	r3, [r7, #2]
 80063d8:	883a      	ldrh	r2, [r7, #0]
 80063da:	78f9      	ldrb	r1, [r7, #3]
 80063dc:	f7fb fbba 	bl	8001b54 <HAL_PCD_EP_Open>
 80063e0:	4603      	mov	r3, r0
 80063e2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80063e4:	7bfb      	ldrb	r3, [r7, #15]
 80063e6:	4618      	mov	r0, r3
 80063e8:	f000 f91c 	bl	8006624 <USBD_Get_USB_Status>
 80063ec:	4603      	mov	r3, r0
 80063ee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80063f0:	7bbb      	ldrb	r3, [r7, #14]
}
 80063f2:	4618      	mov	r0, r3
 80063f4:	3710      	adds	r7, #16
 80063f6:	46bd      	mov	sp, r7
 80063f8:	bd80      	pop	{r7, pc}

080063fa <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80063fa:	b580      	push	{r7, lr}
 80063fc:	b084      	sub	sp, #16
 80063fe:	af00      	add	r7, sp, #0
 8006400:	6078      	str	r0, [r7, #4]
 8006402:	460b      	mov	r3, r1
 8006404:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006406:	2300      	movs	r3, #0
 8006408:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800640a:	2300      	movs	r3, #0
 800640c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006414:	78fa      	ldrb	r2, [r7, #3]
 8006416:	4611      	mov	r1, r2
 8006418:	4618      	mov	r0, r3
 800641a:	f7fb fc03 	bl	8001c24 <HAL_PCD_EP_Close>
 800641e:	4603      	mov	r3, r0
 8006420:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006422:	7bfb      	ldrb	r3, [r7, #15]
 8006424:	4618      	mov	r0, r3
 8006426:	f000 f8fd 	bl	8006624 <USBD_Get_USB_Status>
 800642a:	4603      	mov	r3, r0
 800642c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800642e:	7bbb      	ldrb	r3, [r7, #14]
}
 8006430:	4618      	mov	r0, r3
 8006432:	3710      	adds	r7, #16
 8006434:	46bd      	mov	sp, r7
 8006436:	bd80      	pop	{r7, pc}

08006438 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006438:	b580      	push	{r7, lr}
 800643a:	b084      	sub	sp, #16
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
 8006440:	460b      	mov	r3, r1
 8006442:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006444:	2300      	movs	r3, #0
 8006446:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006448:	2300      	movs	r3, #0
 800644a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006452:	78fa      	ldrb	r2, [r7, #3]
 8006454:	4611      	mov	r1, r2
 8006456:	4618      	mov	r0, r3
 8006458:	f7fb fcdb 	bl	8001e12 <HAL_PCD_EP_SetStall>
 800645c:	4603      	mov	r3, r0
 800645e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006460:	7bfb      	ldrb	r3, [r7, #15]
 8006462:	4618      	mov	r0, r3
 8006464:	f000 f8de 	bl	8006624 <USBD_Get_USB_Status>
 8006468:	4603      	mov	r3, r0
 800646a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800646c:	7bbb      	ldrb	r3, [r7, #14]
}
 800646e:	4618      	mov	r0, r3
 8006470:	3710      	adds	r7, #16
 8006472:	46bd      	mov	sp, r7
 8006474:	bd80      	pop	{r7, pc}

08006476 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006476:	b580      	push	{r7, lr}
 8006478:	b084      	sub	sp, #16
 800647a:	af00      	add	r7, sp, #0
 800647c:	6078      	str	r0, [r7, #4]
 800647e:	460b      	mov	r3, r1
 8006480:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006482:	2300      	movs	r3, #0
 8006484:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006486:	2300      	movs	r3, #0
 8006488:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006490:	78fa      	ldrb	r2, [r7, #3]
 8006492:	4611      	mov	r1, r2
 8006494:	4618      	mov	r0, r3
 8006496:	f7fb fd20 	bl	8001eda <HAL_PCD_EP_ClrStall>
 800649a:	4603      	mov	r3, r0
 800649c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800649e:	7bfb      	ldrb	r3, [r7, #15]
 80064a0:	4618      	mov	r0, r3
 80064a2:	f000 f8bf 	bl	8006624 <USBD_Get_USB_Status>
 80064a6:	4603      	mov	r3, r0
 80064a8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80064aa:	7bbb      	ldrb	r3, [r7, #14]
}
 80064ac:	4618      	mov	r0, r3
 80064ae:	3710      	adds	r7, #16
 80064b0:	46bd      	mov	sp, r7
 80064b2:	bd80      	pop	{r7, pc}

080064b4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80064b4:	b480      	push	{r7}
 80064b6:	b085      	sub	sp, #20
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
 80064bc:	460b      	mov	r3, r1
 80064be:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80064c6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80064c8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	da0b      	bge.n	80064e8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80064d0:	78fb      	ldrb	r3, [r7, #3]
 80064d2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80064d6:	68f9      	ldr	r1, [r7, #12]
 80064d8:	4613      	mov	r3, r2
 80064da:	00db      	lsls	r3, r3, #3
 80064dc:	1a9b      	subs	r3, r3, r2
 80064de:	009b      	lsls	r3, r3, #2
 80064e0:	440b      	add	r3, r1
 80064e2:	333e      	adds	r3, #62	; 0x3e
 80064e4:	781b      	ldrb	r3, [r3, #0]
 80064e6:	e00b      	b.n	8006500 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80064e8:	78fb      	ldrb	r3, [r7, #3]
 80064ea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80064ee:	68f9      	ldr	r1, [r7, #12]
 80064f0:	4613      	mov	r3, r2
 80064f2:	00db      	lsls	r3, r3, #3
 80064f4:	1a9b      	subs	r3, r3, r2
 80064f6:	009b      	lsls	r3, r3, #2
 80064f8:	440b      	add	r3, r1
 80064fa:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80064fe:	781b      	ldrb	r3, [r3, #0]
  }
}
 8006500:	4618      	mov	r0, r3
 8006502:	3714      	adds	r7, #20
 8006504:	46bd      	mov	sp, r7
 8006506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650a:	4770      	bx	lr

0800650c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800650c:	b580      	push	{r7, lr}
 800650e:	b084      	sub	sp, #16
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]
 8006514:	460b      	mov	r3, r1
 8006516:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006518:	2300      	movs	r3, #0
 800651a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800651c:	2300      	movs	r3, #0
 800651e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006526:	78fa      	ldrb	r2, [r7, #3]
 8006528:	4611      	mov	r1, r2
 800652a:	4618      	mov	r0, r3
 800652c:	f7fb faed 	bl	8001b0a <HAL_PCD_SetAddress>
 8006530:	4603      	mov	r3, r0
 8006532:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006534:	7bfb      	ldrb	r3, [r7, #15]
 8006536:	4618      	mov	r0, r3
 8006538:	f000 f874 	bl	8006624 <USBD_Get_USB_Status>
 800653c:	4603      	mov	r3, r0
 800653e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006540:	7bbb      	ldrb	r3, [r7, #14]
}
 8006542:	4618      	mov	r0, r3
 8006544:	3710      	adds	r7, #16
 8006546:	46bd      	mov	sp, r7
 8006548:	bd80      	pop	{r7, pc}

0800654a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800654a:	b580      	push	{r7, lr}
 800654c:	b086      	sub	sp, #24
 800654e:	af00      	add	r7, sp, #0
 8006550:	60f8      	str	r0, [r7, #12]
 8006552:	607a      	str	r2, [r7, #4]
 8006554:	603b      	str	r3, [r7, #0]
 8006556:	460b      	mov	r3, r1
 8006558:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800655a:	2300      	movs	r3, #0
 800655c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800655e:	2300      	movs	r3, #0
 8006560:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8006568:	7af9      	ldrb	r1, [r7, #11]
 800656a:	683b      	ldr	r3, [r7, #0]
 800656c:	687a      	ldr	r2, [r7, #4]
 800656e:	f7fb fc06 	bl	8001d7e <HAL_PCD_EP_Transmit>
 8006572:	4603      	mov	r3, r0
 8006574:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006576:	7dfb      	ldrb	r3, [r7, #23]
 8006578:	4618      	mov	r0, r3
 800657a:	f000 f853 	bl	8006624 <USBD_Get_USB_Status>
 800657e:	4603      	mov	r3, r0
 8006580:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8006582:	7dbb      	ldrb	r3, [r7, #22]
}
 8006584:	4618      	mov	r0, r3
 8006586:	3718      	adds	r7, #24
 8006588:	46bd      	mov	sp, r7
 800658a:	bd80      	pop	{r7, pc}

0800658c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800658c:	b580      	push	{r7, lr}
 800658e:	b086      	sub	sp, #24
 8006590:	af00      	add	r7, sp, #0
 8006592:	60f8      	str	r0, [r7, #12]
 8006594:	607a      	str	r2, [r7, #4]
 8006596:	603b      	str	r3, [r7, #0]
 8006598:	460b      	mov	r3, r1
 800659a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800659c:	2300      	movs	r3, #0
 800659e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80065a0:	2300      	movs	r3, #0
 80065a2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80065aa:	7af9      	ldrb	r1, [r7, #11]
 80065ac:	683b      	ldr	r3, [r7, #0]
 80065ae:	687a      	ldr	r2, [r7, #4]
 80065b0:	f7fb fb82 	bl	8001cb8 <HAL_PCD_EP_Receive>
 80065b4:	4603      	mov	r3, r0
 80065b6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80065b8:	7dfb      	ldrb	r3, [r7, #23]
 80065ba:	4618      	mov	r0, r3
 80065bc:	f000 f832 	bl	8006624 <USBD_Get_USB_Status>
 80065c0:	4603      	mov	r3, r0
 80065c2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80065c4:	7dbb      	ldrb	r3, [r7, #22]
}
 80065c6:	4618      	mov	r0, r3
 80065c8:	3718      	adds	r7, #24
 80065ca:	46bd      	mov	sp, r7
 80065cc:	bd80      	pop	{r7, pc}

080065ce <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80065ce:	b580      	push	{r7, lr}
 80065d0:	b082      	sub	sp, #8
 80065d2:	af00      	add	r7, sp, #0
 80065d4:	6078      	str	r0, [r7, #4]
 80065d6:	460b      	mov	r3, r1
 80065d8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80065e0:	78fa      	ldrb	r2, [r7, #3]
 80065e2:	4611      	mov	r1, r2
 80065e4:	4618      	mov	r0, r3
 80065e6:	f7fb fbb2 	bl	8001d4e <HAL_PCD_EP_GetRxCount>
 80065ea:	4603      	mov	r3, r0
}
 80065ec:	4618      	mov	r0, r3
 80065ee:	3708      	adds	r7, #8
 80065f0:	46bd      	mov	sp, r7
 80065f2:	bd80      	pop	{r7, pc}

080065f4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80065f4:	b480      	push	{r7}
 80065f6:	b083      	sub	sp, #12
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80065fc:	4b03      	ldr	r3, [pc, #12]	; (800660c <USBD_static_malloc+0x18>)
}
 80065fe:	4618      	mov	r0, r3
 8006600:	370c      	adds	r7, #12
 8006602:	46bd      	mov	sp, r7
 8006604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006608:	4770      	bx	lr
 800660a:	bf00      	nop
 800660c:	200001a0 	.word	0x200001a0

08006610 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8006610:	b480      	push	{r7}
 8006612:	b083      	sub	sp, #12
 8006614:	af00      	add	r7, sp, #0
 8006616:	6078      	str	r0, [r7, #4]

}
 8006618:	bf00      	nop
 800661a:	370c      	adds	r7, #12
 800661c:	46bd      	mov	sp, r7
 800661e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006622:	4770      	bx	lr

08006624 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8006624:	b480      	push	{r7}
 8006626:	b085      	sub	sp, #20
 8006628:	af00      	add	r7, sp, #0
 800662a:	4603      	mov	r3, r0
 800662c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800662e:	2300      	movs	r3, #0
 8006630:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8006632:	79fb      	ldrb	r3, [r7, #7]
 8006634:	2b03      	cmp	r3, #3
 8006636:	d817      	bhi.n	8006668 <USBD_Get_USB_Status+0x44>
 8006638:	a201      	add	r2, pc, #4	; (adr r2, 8006640 <USBD_Get_USB_Status+0x1c>)
 800663a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800663e:	bf00      	nop
 8006640:	08006651 	.word	0x08006651
 8006644:	08006657 	.word	0x08006657
 8006648:	0800665d 	.word	0x0800665d
 800664c:	08006663 	.word	0x08006663
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8006650:	2300      	movs	r3, #0
 8006652:	73fb      	strb	r3, [r7, #15]
    break;
 8006654:	e00b      	b.n	800666e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006656:	2303      	movs	r3, #3
 8006658:	73fb      	strb	r3, [r7, #15]
    break;
 800665a:	e008      	b.n	800666e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800665c:	2301      	movs	r3, #1
 800665e:	73fb      	strb	r3, [r7, #15]
    break;
 8006660:	e005      	b.n	800666e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006662:	2303      	movs	r3, #3
 8006664:	73fb      	strb	r3, [r7, #15]
    break;
 8006666:	e002      	b.n	800666e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8006668:	2303      	movs	r3, #3
 800666a:	73fb      	strb	r3, [r7, #15]
    break;
 800666c:	bf00      	nop
  }
  return usb_status;
 800666e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006670:	4618      	mov	r0, r3
 8006672:	3714      	adds	r7, #20
 8006674:	46bd      	mov	sp, r7
 8006676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667a:	4770      	bx	lr

0800667c <__libc_init_array>:
 800667c:	b570      	push	{r4, r5, r6, lr}
 800667e:	4d0d      	ldr	r5, [pc, #52]	; (80066b4 <__libc_init_array+0x38>)
 8006680:	4c0d      	ldr	r4, [pc, #52]	; (80066b8 <__libc_init_array+0x3c>)
 8006682:	1b64      	subs	r4, r4, r5
 8006684:	10a4      	asrs	r4, r4, #2
 8006686:	2600      	movs	r6, #0
 8006688:	42a6      	cmp	r6, r4
 800668a:	d109      	bne.n	80066a0 <__libc_init_array+0x24>
 800668c:	4d0b      	ldr	r5, [pc, #44]	; (80066bc <__libc_init_array+0x40>)
 800668e:	4c0c      	ldr	r4, [pc, #48]	; (80066c0 <__libc_init_array+0x44>)
 8006690:	f000 f820 	bl	80066d4 <_init>
 8006694:	1b64      	subs	r4, r4, r5
 8006696:	10a4      	asrs	r4, r4, #2
 8006698:	2600      	movs	r6, #0
 800669a:	42a6      	cmp	r6, r4
 800669c:	d105      	bne.n	80066aa <__libc_init_array+0x2e>
 800669e:	bd70      	pop	{r4, r5, r6, pc}
 80066a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80066a4:	4798      	blx	r3
 80066a6:	3601      	adds	r6, #1
 80066a8:	e7ee      	b.n	8006688 <__libc_init_array+0xc>
 80066aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80066ae:	4798      	blx	r3
 80066b0:	3601      	adds	r6, #1
 80066b2:	e7f2      	b.n	800669a <__libc_init_array+0x1e>
 80066b4:	0800674c 	.word	0x0800674c
 80066b8:	0800674c 	.word	0x0800674c
 80066bc:	0800674c 	.word	0x0800674c
 80066c0:	08006750 	.word	0x08006750

080066c4 <memset>:
 80066c4:	4402      	add	r2, r0
 80066c6:	4603      	mov	r3, r0
 80066c8:	4293      	cmp	r3, r2
 80066ca:	d100      	bne.n	80066ce <memset+0xa>
 80066cc:	4770      	bx	lr
 80066ce:	f803 1b01 	strb.w	r1, [r3], #1
 80066d2:	e7f9      	b.n	80066c8 <memset+0x4>

080066d4 <_init>:
 80066d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066d6:	bf00      	nop
 80066d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066da:	bc08      	pop	{r3}
 80066dc:	469e      	mov	lr, r3
 80066de:	4770      	bx	lr

080066e0 <_fini>:
 80066e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066e2:	bf00      	nop
 80066e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066e6:	bc08      	pop	{r3}
 80066e8:	469e      	mov	lr, r3
 80066ea:	4770      	bx	lr
